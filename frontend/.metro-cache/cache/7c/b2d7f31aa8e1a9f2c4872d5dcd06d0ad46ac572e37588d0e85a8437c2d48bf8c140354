{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"streamChunk\", {\n    enumerable: true,\n    get: function () {\n      return streamChunk;\n    }\n  });\n  Object.defineProperty(exports, \"readBytes\", {\n    enumerable: true,\n    get: function () {\n      return readBytes;\n    }\n  });\n  Object.defineProperty(exports, \"trackStream\", {\n    enumerable: true,\n    get: function () {\n      return trackStream;\n    }\n  });\n  const streamChunk = function* (chunk, chunkSize) {\n    let len = chunk.byteLength;\n    if (!chunkSize || len < chunkSize) {\n      yield chunk;\n      return;\n    }\n    let pos = 0;\n    let end;\n    while (pos < len) {\n      end = pos + chunkSize;\n      yield chunk.slice(pos, end);\n      pos = end;\n    }\n  };\n  const readBytes = async function* (iterable, chunkSize) {\n    for await (const chunk of readStream(iterable)) {\n      yield* streamChunk(chunk, chunkSize);\n    }\n  };\n  const readStream = async function* (stream) {\n    if (stream[Symbol.asyncIterator]) {\n      yield* stream;\n      return;\n    }\n    const reader = stream.getReader();\n    try {\n      for (;;) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) {\n          break;\n        }\n        yield value;\n      }\n    } finally {\n      await reader.cancel();\n    }\n  };\n  const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n    const iterator = readBytes(stream, chunkSize);\n    let bytes = 0;\n    let done;\n    let _onFinish = e => {\n      if (!done) {\n        done = true;\n        onFinish && onFinish(e);\n      }\n    };\n    return new ReadableStream({\n      async pull(controller) {\n        try {\n          const {\n            done,\n            value\n          } = await iterator.next();\n          if (done) {\n            _onFinish();\n            controller.close();\n            return;\n          }\n          let len = value.byteLength;\n          if (onProgress) {\n            let loadedBytes = bytes += len;\n            onProgress(loadedBytes);\n          }\n          controller.enqueue(new Uint8Array(value));\n        } catch (err) {\n          _onFinish(err);\n          throw err;\n        }\n      },\n      cancel(reason) {\n        _onFinish(reason);\n        return iterator.return();\n      }\n    }, {\n      highWaterMark: 2\n    });\n  };\n});","lineCount":106,"map":[[7,2,2,0,"Object"],[7,8,2,0],[7,9,2,0,"defineProperty"],[7,23,2,0],[7,24,2,0,"exports"],[7,31,2,0],[8,4,2,0,"enumerable"],[8,14,2,0],[9,4,2,0,"get"],[9,7,2,0],[9,18,2,0,"get"],[9,19,2,0],[10,6,2,0],[10,13,2,0,"streamChunk"],[10,24,2,0],[11,4,2,0],[12,2,2,0],[13,2,20,0,"Object"],[13,8,20,0],[13,9,20,0,"defineProperty"],[13,23,20,0],[13,24,20,0,"exports"],[13,31,20,0],[14,4,20,0,"enumerable"],[14,14,20,0],[15,4,20,0,"get"],[15,7,20,0],[15,18,20,0,"get"],[15,19,20,0],[16,6,20,0],[16,13,20,0,"readBytes"],[16,22,20,0],[17,4,20,0],[18,2,20,0],[19,2,46,0,"Object"],[19,8,46,0],[19,9,46,0,"defineProperty"],[19,23,46,0],[19,24,46,0,"exports"],[19,31,46,0],[20,4,46,0,"enumerable"],[20,14,46,0],[21,4,46,0,"get"],[21,7,46,0],[21,18,46,0,"get"],[21,19,46,0],[22,6,46,0],[22,13,46,0,"trackStream"],[22,24,46,0],[23,4,46,0],[24,2,46,0],[25,2,2,7],[25,8,2,13,"streamChunk"],[25,19,2,24],[25,22,2,27],[25,32,2,27,"streamChunk"],[25,33,2,38,"chunk"],[25,38,2,43],[25,40,2,45,"chunkSize"],[25,49,2,54],[25,51,2,56],[26,4,3,2],[26,8,3,6,"len"],[26,11,3,9],[26,14,3,12,"chunk"],[26,19,3,17],[26,20,3,18,"byteLength"],[26,30,3,28],[27,4,5,2],[27,8,5,6],[27,9,5,7,"chunkSize"],[27,18,5,16],[27,22,5,20,"len"],[27,25,5,23],[27,28,5,26,"chunkSize"],[27,37,5,35],[27,39,5,37],[28,6,6,4],[28,12,6,10,"chunk"],[28,17,6,15],[29,6,7,4],[30,4,8,2],[31,4,10,2],[31,8,10,6,"pos"],[31,11,10,9],[31,14,10,12],[31,15,10,13],[32,4,11,2],[32,8,11,6,"end"],[32,11,11,9],[33,4,13,2],[33,11,13,9,"pos"],[33,14,13,12],[33,17,13,15,"len"],[33,20,13,18],[33,22,13,20],[34,6,14,4,"end"],[34,9,14,7],[34,12,14,10,"pos"],[34,15,14,13],[34,18,14,16,"chunkSize"],[34,27,14,25],[35,6,15,4],[35,12,15,10,"chunk"],[35,17,15,15],[35,18,15,16,"slice"],[35,23,15,21],[35,24,15,22,"pos"],[35,27,15,25],[35,29,15,27,"end"],[35,32,15,30],[35,33,15,31],[36,6,16,4,"pos"],[36,9,16,7],[36,12,16,10,"end"],[36,15,16,13],[37,4,17,2],[38,2,18,0],[38,3,18,1],[39,2,20,7],[39,8,20,13,"readBytes"],[39,17,20,22],[39,20,20,25],[39,36,20,25,"readBytes"],[39,37,20,42,"iterable"],[39,45,20,50],[39,47,20,52,"chunkSize"],[39,56,20,61],[39,58,20,63],[40,4,21,2],[40,15,21,13],[40,21,21,19,"chunk"],[40,26,21,24],[40,30,21,28,"readStream"],[40,40,21,38],[40,41,21,39,"iterable"],[40,49,21,47],[40,50,21,48],[40,52,21,50],[41,6,22,4],[41,13,22,11,"streamChunk"],[41,24,22,22],[41,25,22,23,"chunk"],[41,30,22,28],[41,32,22,30,"chunkSize"],[41,41,22,39],[41,42,22,40],[42,4,23,2],[43,2,24,0],[43,3,24,1],[44,2,26,0],[44,8,26,6,"readStream"],[44,18,26,16],[44,21,26,19],[44,37,26,19,"readStream"],[44,38,26,36,"stream"],[44,44,26,42],[44,46,26,44],[45,4,27,2],[45,8,27,6,"stream"],[45,14,27,12],[45,15,27,13,"Symbol"],[45,21,27,19],[45,22,27,20,"asyncIterator"],[45,35,27,33],[45,36,27,34],[45,38,27,36],[46,6,28,4],[46,13,28,11,"stream"],[46,19,28,17],[47,6,29,4],[48,4,30,2],[49,4,32,2],[49,10,32,8,"reader"],[49,16,32,14],[49,19,32,17,"stream"],[49,25,32,23],[49,26,32,24,"getReader"],[49,35,32,33],[49,36,32,34],[49,37,32,35],[50,4,33,2],[50,8,33,6],[51,6,34,4],[51,15,34,13],[52,8,35,6],[52,14,35,12],[53,10,35,13,"done"],[53,14,35,17],[54,10,35,19,"value"],[55,8,35,24],[55,9,35,25],[55,12,35,28],[55,18,35,34,"reader"],[55,24,35,40],[55,25,35,41,"read"],[55,29,35,45],[55,30,35,46],[55,31,35,47],[56,8,36,6],[56,12,36,10,"done"],[56,16,36,14],[56,18,36,16],[57,10,37,8],[58,8,38,6],[59,8,39,6],[59,14,39,12,"value"],[59,19,39,17],[60,6,40,4],[61,4,41,2],[61,5,41,3],[61,14,41,12],[62,6,42,4],[62,12,42,10,"reader"],[62,18,42,16],[62,19,42,17,"cancel"],[62,25,42,23],[62,26,42,24],[62,27,42,25],[63,4,43,2],[64,2,44,0],[64,3,44,1],[65,2,46,7],[65,8,46,13,"trackStream"],[65,19,46,24],[65,22,46,27,"trackStream"],[65,23,46,28,"stream"],[65,29,46,34],[65,31,46,36,"chunkSize"],[65,40,46,45],[65,42,46,47,"onProgress"],[65,52,46,57],[65,54,46,59,"onFinish"],[65,62,46,67],[65,67,46,72],[66,4,47,2],[66,10,47,8,"iterator"],[66,18,47,16],[66,21,47,19,"readBytes"],[66,30,47,28],[66,31,47,29,"stream"],[66,37,47,35],[66,39,47,37,"chunkSize"],[66,48,47,46],[66,49,47,47],[67,4,49,2],[67,8,49,6,"bytes"],[67,13,49,11],[67,16,49,14],[67,17,49,15],[68,4,50,2],[68,8,50,6,"done"],[68,12,50,10],[69,4,51,2],[69,8,51,6,"_onFinish"],[69,17,51,15],[69,20,51,19,"e"],[69,21,51,20],[69,25,51,25],[70,6,52,4],[70,10,52,8],[70,11,52,9,"done"],[70,15,52,13],[70,17,52,15],[71,8,53,6,"done"],[71,12,53,10],[71,15,53,13],[71,19,53,17],[72,8,54,6,"onFinish"],[72,16,54,14],[72,20,54,18,"onFinish"],[72,28,54,26],[72,29,54,27,"e"],[72,30,54,28],[72,31,54,29],[73,6,55,4],[74,4,56,2],[74,5,56,3],[75,4,58,2],[75,11,58,9],[75,15,58,13,"ReadableStream"],[75,29,58,27],[75,30,58,28],[76,6,59,4],[76,12,59,10,"pull"],[76,16,59,14,"pull"],[76,17,59,15,"controller"],[76,27,59,25],[76,29,59,27],[77,8,60,6],[77,12,60,10],[78,10,61,8],[78,16,61,14],[79,12,61,15,"done"],[79,16,61,19],[80,12,61,21,"value"],[81,10,61,26],[81,11,61,27],[81,14,61,30],[81,20,61,36,"iterator"],[81,28,61,44],[81,29,61,45,"next"],[81,33,61,49],[81,34,61,50],[81,35,61,51],[82,10,63,8],[82,14,63,12,"done"],[82,18,63,16],[82,20,63,18],[83,12,64,9,"_onFinish"],[83,21,64,18],[83,22,64,19],[83,23,64,20],[84,12,65,10,"controller"],[84,22,65,20],[84,23,65,21,"close"],[84,28,65,26],[84,29,65,27],[84,30,65,28],[85,12,66,10],[86,10,67,8],[87,10,69,8],[87,14,69,12,"len"],[87,17,69,15],[87,20,69,18,"value"],[87,25,69,23],[87,26,69,24,"byteLength"],[87,36,69,34],[88,10,70,8],[88,14,70,12,"onProgress"],[88,24,70,22],[88,26,70,24],[89,12,71,10],[89,16,71,14,"loadedBytes"],[89,27,71,25],[89,30,71,28,"bytes"],[89,35,71,33],[89,39,71,37,"len"],[89,42,71,40],[90,12,72,10,"onProgress"],[90,22,72,20],[90,23,72,21,"loadedBytes"],[90,34,72,32],[90,35,72,33],[91,10,73,8],[92,10,74,8,"controller"],[92,20,74,18],[92,21,74,19,"enqueue"],[92,28,74,26],[92,29,74,27],[92,33,74,31,"Uint8Array"],[92,43,74,41],[92,44,74,42,"value"],[92,49,74,47],[92,50,74,48],[92,51,74,49],[93,8,75,6],[93,9,75,7],[93,10,75,8],[93,17,75,15,"err"],[93,20,75,18],[93,22,75,20],[94,10,76,8,"_onFinish"],[94,19,76,17],[94,20,76,18,"err"],[94,23,76,21],[94,24,76,22],[95,10,77,8],[95,16,77,14,"err"],[95,19,77,17],[96,8,78,6],[97,6,79,4],[97,7,79,5],[98,6,80,4,"cancel"],[98,12,80,10,"cancel"],[98,13,80,11,"reason"],[98,19,80,17],[98,21,80,19],[99,8,81,6,"_onFinish"],[99,17,81,15],[99,18,81,16,"reason"],[99,24,81,22],[99,25,81,23],[100,8,82,6],[100,15,82,13,"iterator"],[100,23,82,21],[100,24,82,22,"return"],[100,30,82,28],[100,31,82,29],[100,32,82,30],[101,6,83,4],[102,4,84,2],[102,5,84,3],[102,7,84,5],[103,6,85,4,"highWaterMark"],[103,19,85,17],[103,21,85,19],[104,4,86,2],[104,5,86,3],[104,6,86,4],[105,2,87,0],[105,3,87,1],[106,0,87,1],[106,3]],"functionMap":{"names":["<global>","streamChunk","readBytes","readStream","trackStream","_onFinish","ReadableStream$argument_0.pull","ReadableStream$argument_0.cancel"],"mappings":"AAA;2BCC;CDgB;yBEE;CFI;mBGE;CHkB;2BIE;kBCK;GDK;IEG;KFoB;IGC;KHG;CJI"},"hasCjsExports":false},"type":"js/module"}]}