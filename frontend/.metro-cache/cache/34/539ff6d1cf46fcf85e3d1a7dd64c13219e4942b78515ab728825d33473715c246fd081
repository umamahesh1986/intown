{"dependencies":[{"name":"./async.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":12,"index":12},"end":{"line":1,"column":33,"index":33}}],"key":"4cfSYaXp0uPOZnt9/HhLOFg25Ks=","exportNames":["*"],"imports":1}},{"name":"./abort.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":12,"index":46},"end":{"line":2,"column":33,"index":67}}],"key":"AIcYwaZA9VS0hp+6u8V/mcl6ZKA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var async = require(_dependencyMap[0], \"./async.js\"),\n    abort = require(_dependencyMap[1], \"./abort.js\");\n\n  // API\n  module.exports = iterate;\n\n  /**\n   * Iterates over each job object\n   *\n   * @param {array|object} list - array or object (named list) to iterate over\n   * @param {function} iterator - iterator to run\n   * @param {object} state - current job status\n   * @param {function} callback - invoked when all elements processed\n   */\n  function iterate(list, iterator, state, callback) {\n    // store current index\n    var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;\n    state.jobs[key] = runJob(iterator, key, list[key], function (error, output) {\n      // don't repeat yourself\n      // skip secondary callbacks\n      if (!(key in state.jobs)) {\n        return;\n      }\n\n      // clean up jobs\n      delete state.jobs[key];\n      if (error) {\n        // don't process rest of the results\n        // stop still active jobs\n        // and reset the list\n        abort(state);\n      } else {\n        state.results[key] = output;\n      }\n\n      // return salvaged results\n      callback(error, state.results);\n    });\n  }\n\n  /**\n   * Runs iterator over provided job element\n   *\n   * @param   {function} iterator - iterator to invoke\n   * @param   {string|number} key - key/index of the element in the list of jobs\n   * @param   {mixed} item - job description\n   * @param   {function} callback - invoked after iterator is done with the job\n   * @returns {function|mixed} - job abort function or something else\n   */\n  function runJob(iterator, key, item, callback) {\n    var aborter;\n\n    // allow shortcut if iterator expects only two arguments\n    if (iterator.length == 2) {\n      aborter = iterator(item, async(callback));\n    }\n    // otherwise go with full three arguments\n    else {\n      aborter = iterator(item, key, async(callback));\n    }\n    return aborter;\n  }\n});","lineCount":64,"map":[[2,2,1,0],[2,6,1,4,"async"],[2,11,1,9],[2,14,1,12,"require"],[2,21,1,19],[2,22,1,19,"_dependencyMap"],[2,36,1,19],[2,53,1,32],[2,54,1,33],[3,4,2,4,"abort"],[3,9,2,9],[3,12,2,12,"require"],[3,19,2,19],[3,20,2,19,"_dependencyMap"],[3,34,2,19],[3,51,2,32],[3,52,2,33],[5,2,5,0],[6,2,6,0,"module"],[6,8,6,6],[6,9,6,7,"exports"],[6,16,6,14],[6,19,6,17,"iterate"],[6,26,6,24],[8,2,8,0],[9,0,9,0],[10,0,10,0],[11,0,11,0],[12,0,12,0],[13,0,13,0],[14,0,14,0],[15,0,15,0],[16,2,16,0],[16,11,16,9,"iterate"],[16,18,16,16,"iterate"],[16,19,16,17,"list"],[16,23,16,21],[16,25,16,23,"iterator"],[16,33,16,31],[16,35,16,33,"state"],[16,40,16,38],[16,42,16,40,"callback"],[16,50,16,48],[16,52,17,0],[17,4,18,2],[18,4,19,2],[18,8,19,6,"key"],[18,11,19,9],[18,14,19,12,"state"],[18,19,19,17],[18,20,19,18],[18,31,19,29],[18,32,19,30],[18,35,19,33,"state"],[18,40,19,38],[18,41,19,39],[18,52,19,50],[18,53,19,51],[18,54,19,52,"state"],[18,59,19,57],[18,60,19,58,"index"],[18,65,19,63],[18,66,19,64],[18,69,19,67,"state"],[18,74,19,72],[18,75,19,73,"index"],[18,80,19,78],[19,4,21,2,"state"],[19,9,21,7],[19,10,21,8,"jobs"],[19,14,21,12],[19,15,21,13,"key"],[19,18,21,16],[19,19,21,17],[19,22,21,20,"runJob"],[19,28,21,26],[19,29,21,27,"iterator"],[19,37,21,35],[19,39,21,37,"key"],[19,42,21,40],[19,44,21,42,"list"],[19,48,21,46],[19,49,21,47,"key"],[19,52,21,50],[19,53,21,51],[19,55,21,53],[19,65,21,62,"error"],[19,70,21,67],[19,72,21,69,"output"],[19,78,21,75],[19,80,22,2],[20,6,23,4],[21,6,24,4],[22,6,25,4],[22,10,25,8],[22,12,25,10,"key"],[22,15,25,13],[22,19,25,17,"state"],[22,24,25,22],[22,25,25,23,"jobs"],[22,29,25,27],[22,30,25,28],[22,32,26,4],[23,8,27,6],[24,6,28,4],[26,6,30,4],[27,6,31,4],[27,13,31,11,"state"],[27,18,31,16],[27,19,31,17,"jobs"],[27,23,31,21],[27,24,31,22,"key"],[27,27,31,25],[27,28,31,26],[28,6,33,4],[28,10,33,8,"error"],[28,15,33,13],[28,17,34,4],[29,8,35,6],[30,8,36,6],[31,8,37,6],[32,8,38,6,"abort"],[32,13,38,11],[32,14,38,12,"state"],[32,19,38,17],[32,20,38,18],[33,6,39,4],[33,7,39,5],[33,13,41,4],[34,8,42,6,"state"],[34,13,42,11],[34,14,42,12,"results"],[34,21,42,19],[34,22,42,20,"key"],[34,25,42,23],[34,26,42,24],[34,29,42,27,"output"],[34,35,42,33],[35,6,43,4],[37,6,45,4],[38,6,46,4,"callback"],[38,14,46,12],[38,15,46,13,"error"],[38,20,46,18],[38,22,46,20,"state"],[38,27,46,25],[38,28,46,26,"results"],[38,35,46,33],[38,36,46,34],[39,4,47,2],[39,5,47,3],[39,6,47,4],[40,2,48,0],[42,2,50,0],[43,0,51,0],[44,0,52,0],[45,0,53,0],[46,0,54,0],[47,0,55,0],[48,0,56,0],[49,0,57,0],[50,0,58,0],[51,2,59,0],[51,11,59,9,"runJob"],[51,17,59,15,"runJob"],[51,18,59,16,"iterator"],[51,26,59,24],[51,28,59,26,"key"],[51,31,59,29],[51,33,59,31,"item"],[51,37,59,35],[51,39,59,37,"callback"],[51,47,59,45],[51,49,60,0],[52,4,61,2],[52,8,61,6,"aborter"],[52,15,61,13],[54,4,63,2],[55,4,64,2],[55,8,64,6,"iterator"],[55,16,64,14],[55,17,64,15,"length"],[55,23,64,21],[55,27,64,25],[55,28,64,26],[55,30,65,2],[56,6,66,4,"aborter"],[56,13,66,11],[56,16,66,14,"iterator"],[56,24,66,22],[56,25,66,23,"item"],[56,29,66,27],[56,31,66,29,"async"],[56,36,66,34],[56,37,66,35,"callback"],[56,45,66,43],[56,46,66,44],[56,47,66,45],[57,4,67,2],[58,4,68,2],[59,4,68,2],[59,9,70,2],[60,6,71,4,"aborter"],[60,13,71,11],[60,16,71,14,"iterator"],[60,24,71,22],[60,25,71,23,"item"],[60,29,71,27],[60,31,71,29,"key"],[60,34,71,32],[60,36,71,34,"async"],[60,41,71,39],[60,42,71,40,"callback"],[60,50,71,48],[60,51,71,49],[60,52,71,50],[61,4,72,2],[62,4,74,2],[62,11,74,9,"aborter"],[62,18,74,16],[63,2,75,0],[64,0,75,1],[64,3]],"functionMap":{"names":["<global>","iterate","runJob$argument_3","runJob"],"mappings":"AAA;ACe;qDCK;GD0B;CDC;AGW;CHgB"},"hasCjsExports":true},"type":"js/module"}]}