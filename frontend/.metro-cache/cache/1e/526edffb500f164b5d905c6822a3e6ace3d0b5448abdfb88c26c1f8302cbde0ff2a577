{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  /**\n   * Calculate data maxRate\n   * @param {Number} [samplesCount= 10]\n   * @param {Number} [min= 1000]\n   * @returns {Function}\n   */\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  function speedometer(samplesCount, min) {\n    samplesCount = samplesCount || 10;\n    const bytes = new Array(samplesCount);\n    const timestamps = new Array(samplesCount);\n    let head = 0;\n    let tail = 0;\n    let firstSampleTS;\n    min = min !== undefined ? min : 1000;\n    return function push(chunkLength) {\n      const now = Date.now();\n      const startedAt = timestamps[tail];\n      if (!firstSampleTS) {\n        firstSampleTS = now;\n      }\n      bytes[head] = chunkLength;\n      timestamps[head] = now;\n      let i = tail;\n      let bytesCount = 0;\n      while (i !== head) {\n        bytesCount += bytes[i++];\n        i = i % samplesCount;\n      }\n      head = (head + 1) % samplesCount;\n      if (head === tail) {\n        tail = (tail + 1) % samplesCount;\n      }\n      if (now - firstSampleTS < min) {\n        return;\n      }\n      const passed = startedAt && now - startedAt;\n      return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n    };\n  }\n  var _default = speedometer;\n});","lineCount":53,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,2,3,0,"Object"],[10,8,3,0],[10,9,3,0,"defineProperty"],[10,23,3,0],[10,24,3,0,"exports"],[10,31,3,0],[11,4,3,0,"value"],[11,9,3,0],[12,2,3,0],[13,2,55,0,"Object"],[13,8,55,0],[13,9,55,0,"defineProperty"],[13,23,55,0],[13,24,55,0,"exports"],[13,31,55,0],[14,4,55,0,"enumerable"],[14,14,55,0],[15,4,55,0,"get"],[15,7,55,0],[15,18,55,0,"get"],[15,19,55,0],[16,6,55,0],[16,13,55,0,"_default"],[16,21,55,0],[17,4,55,0],[18,2,55,0],[19,2,9,0],[19,11,9,9,"speedometer"],[19,22,9,20,"speedometer"],[19,23,9,21,"samplesCount"],[19,35,9,33],[19,37,9,35,"min"],[19,40,9,38],[19,42,9,40],[20,4,10,2,"samplesCount"],[20,16,10,14],[20,19,10,17,"samplesCount"],[20,31,10,29],[20,35,10,33],[20,37,10,35],[21,4,11,2],[21,10,11,8,"bytes"],[21,15,11,13],[21,18,11,16],[21,22,11,20,"Array"],[21,27,11,25],[21,28,11,26,"samplesCount"],[21,40,11,38],[21,41,11,39],[22,4,12,2],[22,10,12,8,"timestamps"],[22,20,12,18],[22,23,12,21],[22,27,12,25,"Array"],[22,32,12,30],[22,33,12,31,"samplesCount"],[22,45,12,43],[22,46,12,44],[23,4,13,2],[23,8,13,6,"head"],[23,12,13,10],[23,15,13,13],[23,16,13,14],[24,4,14,2],[24,8,14,6,"tail"],[24,12,14,10],[24,15,14,13],[24,16,14,14],[25,4,15,2],[25,8,15,6,"firstSampleTS"],[25,21,15,19],[26,4,17,2,"min"],[26,7,17,5],[26,10,17,8,"min"],[26,13,17,11],[26,18,17,16,"undefined"],[26,27,17,25],[26,30,17,28,"min"],[26,33,17,31],[26,36,17,34],[26,40,17,38],[27,4,19,2],[27,11,19,9],[27,20,19,18,"push"],[27,24,19,22,"push"],[27,25,19,23,"chunkLength"],[27,36,19,34],[27,38,19,36],[28,6,20,4],[28,12,20,10,"now"],[28,15,20,13],[28,18,20,16,"Date"],[28,22,20,20],[28,23,20,21,"now"],[28,26,20,24],[28,27,20,25],[28,28,20,26],[29,6,22,4],[29,12,22,10,"startedAt"],[29,21,22,19],[29,24,22,22,"timestamps"],[29,34,22,32],[29,35,22,33,"tail"],[29,39,22,37],[29,40,22,38],[30,6,24,4],[30,10,24,8],[30,11,24,9,"firstSampleTS"],[30,24,24,22],[30,26,24,24],[31,8,25,6,"firstSampleTS"],[31,21,25,19],[31,24,25,22,"now"],[31,27,25,25],[32,6,26,4],[33,6,28,4,"bytes"],[33,11,28,9],[33,12,28,10,"head"],[33,16,28,14],[33,17,28,15],[33,20,28,18,"chunkLength"],[33,31,28,29],[34,6,29,4,"timestamps"],[34,16,29,14],[34,17,29,15,"head"],[34,21,29,19],[34,22,29,20],[34,25,29,23,"now"],[34,28,29,26],[35,6,31,4],[35,10,31,8,"i"],[35,11,31,9],[35,14,31,12,"tail"],[35,18,31,16],[36,6,32,4],[36,10,32,8,"bytesCount"],[36,20,32,18],[36,23,32,21],[36,24,32,22],[37,6,34,4],[37,13,34,11,"i"],[37,14,34,12],[37,19,34,17,"head"],[37,23,34,21],[37,25,34,23],[38,8,35,6,"bytesCount"],[38,18,35,16],[38,22,35,20,"bytes"],[38,27,35,25],[38,28,35,26,"i"],[38,29,35,27],[38,31,35,29],[38,32,35,30],[39,8,36,6,"i"],[39,9,36,7],[39,12,36,10,"i"],[39,13,36,11],[39,16,36,14,"samplesCount"],[39,28,36,26],[40,6,37,4],[41,6,39,4,"head"],[41,10,39,8],[41,13,39,11],[41,14,39,12,"head"],[41,18,39,16],[41,21,39,19],[41,22,39,20],[41,26,39,24,"samplesCount"],[41,38,39,36],[42,6,41,4],[42,10,41,8,"head"],[42,14,41,12],[42,19,41,17,"tail"],[42,23,41,21],[42,25,41,23],[43,8,42,6,"tail"],[43,12,42,10],[43,15,42,13],[43,16,42,14,"tail"],[43,20,42,18],[43,23,42,21],[43,24,42,22],[43,28,42,26,"samplesCount"],[43,40,42,38],[44,6,43,4],[45,6,45,4],[45,10,45,8,"now"],[45,13,45,11],[45,16,45,14,"firstSampleTS"],[45,29,45,27],[45,32,45,30,"min"],[45,35,45,33],[45,37,45,35],[46,8,46,6],[47,6,47,4],[48,6,49,4],[48,12,49,10,"passed"],[48,18,49,16],[48,21,49,19,"startedAt"],[48,30,49,28],[48,34,49,32,"now"],[48,37,49,35],[48,40,49,38,"startedAt"],[48,49,49,47],[49,6,51,4],[49,13,51,11,"passed"],[49,19,51,17],[49,22,51,20,"Math"],[49,26,51,24],[49,27,51,25,"round"],[49,32,51,30],[49,33,51,31,"bytesCount"],[49,43,51,41],[49,46,51,44],[49,50,51,48],[49,53,51,51,"passed"],[49,59,51,57],[49,60,51,58],[49,63,51,61,"undefined"],[49,72,51,70],[50,4,52,2],[50,5,52,3],[51,2,53,0],[52,2,55,0],[52,6,55,0,"_default"],[52,14,55,0],[52,17,55,15,"speedometer"],[52,28,55,26],[53,0,55,27],[53,3]],"functionMap":{"names":["<global>","speedometer","push"],"mappings":"AAA;ACQ;SCU;GDiC;CDC"},"hasCjsExports":false},"type":"js/module"}]}