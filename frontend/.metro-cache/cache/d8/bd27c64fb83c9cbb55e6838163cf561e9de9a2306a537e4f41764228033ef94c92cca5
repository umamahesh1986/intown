{"dependencies":[{"name":"url","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":15,"index":30},"end":{"line":3,"column":29,"index":44}}],"key":"Ug/DVHoj+F8BpIFoKWnZvPrb/TI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var parseUrl = require(_dependencyMap[0], \"url\").parse;\n  var DEFAULT_PORTS = {\n    ftp: 21,\n    gopher: 70,\n    http: 80,\n    https: 443,\n    ws: 80,\n    wss: 443\n  };\n  var stringEndsWith = String.prototype.endsWith || function (s) {\n    return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;\n  };\n\n  /**\n   * @param {string|object} url - The URL, or the result from url.parse.\n   * @return {string} The URL of the proxy that should handle the request to the\n   *  given URL. If no proxy is set, this will be an empty string.\n   */\n  function getProxyForUrl(url) {\n    var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};\n    var proto = parsedUrl.protocol;\n    var hostname = parsedUrl.host;\n    var port = parsedUrl.port;\n    if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {\n      return ''; // Don't proxy URLs without a valid scheme or host.\n    }\n    proto = proto.split(':', 1)[0];\n    // Stripping ports in this way instead of using parsedUrl.hostname to make\n    // sure that the brackets around IPv6 addresses are kept.\n    hostname = hostname.replace(/:\\d*$/, '');\n    port = parseInt(port) || DEFAULT_PORTS[proto] || 0;\n    if (!shouldProxy(hostname, port)) {\n      return ''; // Don't proxy URLs that match NO_PROXY.\n    }\n    var proxy = getEnv('npm_config_' + proto + '_proxy') || getEnv(proto + '_proxy') || getEnv('npm_config_proxy') || getEnv('all_proxy');\n    if (proxy && proxy.indexOf('://') === -1) {\n      // Missing scheme in proxy, default to the requested URL's scheme.\n      proxy = proto + '://' + proxy;\n    }\n    return proxy;\n  }\n\n  /**\n   * Determines whether a given URL should be proxied.\n   *\n   * @param {string} hostname - The host name of the URL.\n   * @param {number} port - The effective port of the URL.\n   * @returns {boolean} Whether the given URL should be proxied.\n   * @private\n   */\n  function shouldProxy(hostname, port) {\n    var NO_PROXY = (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();\n    if (!NO_PROXY) {\n      return true; // Always proxy if NO_PROXY is not set.\n    }\n    if (NO_PROXY === '*') {\n      return false; // Never proxy if wildcard is set.\n    }\n    return NO_PROXY.split(/[,\\s]/).every(function (proxy) {\n      if (!proxy) {\n        return true; // Skip zero-length hosts.\n      }\n      var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n      var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n      var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n      if (parsedProxyPort && parsedProxyPort !== port) {\n        return true; // Skip if ports don't match.\n      }\n      if (!/^[.*]/.test(parsedProxyHostname)) {\n        // No wildcards, so stop proxying if there is an exact match.\n        return hostname !== parsedProxyHostname;\n      }\n      if (parsedProxyHostname.charAt(0) === '*') {\n        // Remove leading wildcard.\n        parsedProxyHostname = parsedProxyHostname.slice(1);\n      }\n      // Stop proxying if the hostname ends with the no_proxy host.\n      return !stringEndsWith.call(hostname, parsedProxyHostname);\n    });\n  }\n\n  /**\n   * Get the value for an environment variable.\n   *\n   * @param {string} key - The name of the environment variable.\n   * @return {string} The value of the environment variable.\n   * @private\n   */\n  function getEnv(key) {\n    return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n  }\n  exports.getProxyForUrl = getProxyForUrl;\n});","lineCount":96,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"parseUrl"],[4,14,3,12],[4,17,3,15,"require"],[4,24,3,22],[4,25,3,22,"_dependencyMap"],[4,39,3,22],[4,49,3,28],[4,50,3,29],[4,51,3,30,"parse"],[4,56,3,35],[5,2,5,0],[5,6,5,4,"DEFAULT_PORTS"],[5,19,5,17],[5,22,5,20],[6,4,6,2,"ftp"],[6,7,6,5],[6,9,6,7],[6,11,6,9],[7,4,7,2,"gopher"],[7,10,7,8],[7,12,7,10],[7,14,7,12],[8,4,8,2,"http"],[8,8,8,6],[8,10,8,8],[8,12,8,10],[9,4,9,2,"https"],[9,9,9,7],[9,11,9,9],[9,14,9,12],[10,4,10,2,"ws"],[10,6,10,4],[10,8,10,6],[10,10,10,8],[11,4,11,2,"wss"],[11,7,11,5],[11,9,11,7],[12,2,12,0],[12,3,12,1],[13,2,14,0],[13,6,14,4,"stringEndsWith"],[13,20,14,18],[13,23,14,21,"String"],[13,29,14,27],[13,30,14,28,"prototype"],[13,39,14,37],[13,40,14,38,"endsWith"],[13,48,14,46],[13,52,14,50],[13,62,14,59,"s"],[13,63,14,60],[13,65,14,62],[14,4,15,2],[14,11,15,9,"s"],[14,12,15,10],[14,13,15,11,"length"],[14,19,15,17],[14,23,15,21],[14,27,15,25],[14,28,15,26,"length"],[14,34,15,32],[14,38,16,4],[14,42,16,8],[14,43,16,9,"indexOf"],[14,50,16,16],[14,51,16,17,"s"],[14,52,16,18],[14,54,16,20],[14,58,16,24],[14,59,16,25,"length"],[14,65,16,31],[14,68,16,34,"s"],[14,69,16,35],[14,70,16,36,"length"],[14,76,16,42],[14,77,16,43],[14,82,16,48],[14,83,16,49],[14,84,16,50],[15,2,17,0],[15,3,17,1],[17,2,19,0],[18,0,20,0],[19,0,21,0],[20,0,22,0],[21,0,23,0],[22,2,24,0],[22,11,24,9,"getProxyForUrl"],[22,25,24,23,"getProxyForUrl"],[22,26,24,24,"url"],[22,29,24,27],[22,31,24,29],[23,4,25,2],[23,8,25,6,"parsedUrl"],[23,17,25,15],[23,20,25,18],[23,27,25,25,"url"],[23,30,25,28],[23,35,25,33],[23,43,25,41],[23,46,25,44,"parseUrl"],[23,54,25,52],[23,55,25,53,"url"],[23,58,25,56],[23,59,25,57],[23,62,25,60,"url"],[23,65,25,63],[23,69,25,67],[23,70,25,68],[23,71,25,69],[24,4,26,2],[24,8,26,6,"proto"],[24,13,26,11],[24,16,26,14,"parsedUrl"],[24,25,26,23],[24,26,26,24,"protocol"],[24,34,26,32],[25,4,27,2],[25,8,27,6,"hostname"],[25,16,27,14],[25,19,27,17,"parsedUrl"],[25,28,27,26],[25,29,27,27,"host"],[25,33,27,31],[26,4,28,2],[26,8,28,6,"port"],[26,12,28,10],[26,15,28,13,"parsedUrl"],[26,24,28,22],[26,25,28,23,"port"],[26,29,28,27],[27,4,29,2],[27,8,29,6],[27,15,29,13,"hostname"],[27,23,29,21],[27,28,29,26],[27,36,29,34],[27,40,29,38],[27,41,29,39,"hostname"],[27,49,29,47],[27,53,29,51],[27,60,29,58,"proto"],[27,65,29,63],[27,70,29,68],[27,78,29,76],[27,80,29,78],[28,6,30,4],[28,13,30,11],[28,15,30,13],[28,16,30,14],[28,17,30,16],[29,4,31,2],[30,4,33,2,"proto"],[30,9,33,7],[30,12,33,10,"proto"],[30,17,33,15],[30,18,33,16,"split"],[30,23,33,21],[30,24,33,22],[30,27,33,25],[30,29,33,27],[30,30,33,28],[30,31,33,29],[30,32,33,30],[30,33,33,31],[30,34,33,32],[31,4,34,2],[32,4,35,2],[33,4,36,2,"hostname"],[33,12,36,10],[33,15,36,13,"hostname"],[33,23,36,21],[33,24,36,22,"replace"],[33,31,36,29],[33,32,36,30],[33,39,36,37],[33,41,36,39],[33,43,36,41],[33,44,36,42],[34,4,37,2,"port"],[34,8,37,6],[34,11,37,9,"parseInt"],[34,19,37,17],[34,20,37,18,"port"],[34,24,37,22],[34,25,37,23],[34,29,37,27,"DEFAULT_PORTS"],[34,42,37,40],[34,43,37,41,"proto"],[34,48,37,46],[34,49,37,47],[34,53,37,51],[34,54,37,52],[35,4,38,2],[35,8,38,6],[35,9,38,7,"shouldProxy"],[35,20,38,18],[35,21,38,19,"hostname"],[35,29,38,27],[35,31,38,29,"port"],[35,35,38,33],[35,36,38,34],[35,38,38,36],[36,6,39,4],[36,13,39,11],[36,15,39,13],[36,16,39,14],[36,17,39,16],[37,4,40,2],[38,4,42,2],[38,8,42,6,"proxy"],[38,13,42,11],[38,16,43,4,"getEnv"],[38,22,43,10],[38,23,43,11],[38,36,43,24],[38,39,43,27,"proto"],[38,44,43,32],[38,47,43,35],[38,55,43,43],[38,56,43,44],[38,60,44,4,"getEnv"],[38,66,44,10],[38,67,44,11,"proto"],[38,72,44,16],[38,75,44,19],[38,83,44,27],[38,84,44,28],[38,88,45,4,"getEnv"],[38,94,45,10],[38,95,45,11],[38,113,45,29],[38,114,45,30],[38,118,46,4,"getEnv"],[38,124,46,10],[38,125,46,11],[38,136,46,22],[38,137,46,23],[39,4,47,2],[39,8,47,6,"proxy"],[39,13,47,11],[39,17,47,15,"proxy"],[39,22,47,20],[39,23,47,21,"indexOf"],[39,30,47,28],[39,31,47,29],[39,36,47,34],[39,37,47,35],[39,42,47,40],[39,43,47,41],[39,44,47,42],[39,46,47,44],[40,6,48,4],[41,6,49,4,"proxy"],[41,11,49,9],[41,14,49,12,"proto"],[41,19,49,17],[41,22,49,20],[41,27,49,25],[41,30,49,28,"proxy"],[41,35,49,33],[42,4,50,2],[43,4,51,2],[43,11,51,9,"proxy"],[43,16,51,14],[44,2,52,0],[46,2,54,0],[47,0,55,0],[48,0,56,0],[49,0,57,0],[50,0,58,0],[51,0,59,0],[52,0,60,0],[53,0,61,0],[54,2,62,0],[54,11,62,9,"shouldProxy"],[54,22,62,20,"shouldProxy"],[54,23,62,21,"hostname"],[54,31,62,29],[54,33,62,31,"port"],[54,37,62,35],[54,39,62,37],[55,4,63,2],[55,8,63,6,"NO_PROXY"],[55,16,63,14],[55,19,64,4],[55,20,64,5,"getEnv"],[55,26,64,11],[55,27,64,12],[55,48,64,33],[55,49,64,34],[55,53,64,38,"getEnv"],[55,59,64,44],[55,60,64,45],[55,70,64,55],[55,71,64,56],[55,73,64,58,"toLowerCase"],[55,84,64,69],[55,85,64,70],[55,86,64,71],[56,4,65,2],[56,8,65,6],[56,9,65,7,"NO_PROXY"],[56,17,65,15],[56,19,65,17],[57,6,66,4],[57,13,66,11],[57,17,66,15],[57,18,66,16],[57,19,66,18],[58,4,67,2],[59,4,68,2],[59,8,68,6,"NO_PROXY"],[59,16,68,14],[59,21,68,19],[59,24,68,22],[59,26,68,24],[60,6,69,4],[60,13,69,11],[60,18,69,16],[60,19,69,17],[60,20,69,19],[61,4,70,2],[62,4,72,2],[62,11,72,9,"NO_PROXY"],[62,19,72,17],[62,20,72,18,"split"],[62,25,72,23],[62,26,72,24],[62,33,72,31],[62,34,72,32],[62,35,72,33,"every"],[62,40,72,38],[62,41,72,39],[62,51,72,48,"proxy"],[62,56,72,53],[62,58,72,55],[63,6,73,4],[63,10,73,8],[63,11,73,9,"proxy"],[63,16,73,14],[63,18,73,16],[64,8,74,6],[64,15,74,13],[64,19,74,17],[64,20,74,18],[64,21,74,20],[65,6,75,4],[66,6,76,4],[66,10,76,8,"parsedProxy"],[66,21,76,19],[66,24,76,22,"proxy"],[66,29,76,27],[66,30,76,28,"match"],[66,35,76,33],[66,36,76,34],[66,50,76,48],[66,51,76,49],[67,6,77,4],[67,10,77,8,"parsedProxyHostname"],[67,29,77,27],[67,32,77,30,"parsedProxy"],[67,43,77,41],[67,46,77,44,"parsedProxy"],[67,57,77,55],[67,58,77,56],[67,59,77,57],[67,60,77,58],[67,63,77,61,"proxy"],[67,68,77,66],[68,6,78,4],[68,10,78,8,"parsedProxyPort"],[68,25,78,23],[68,28,78,26,"parsedProxy"],[68,39,78,37],[68,42,78,40,"parseInt"],[68,50,78,48],[68,51,78,49,"parsedProxy"],[68,62,78,60],[68,63,78,61],[68,64,78,62],[68,65,78,63],[68,66,78,64],[68,69,78,67],[68,70,78,68],[69,6,79,4],[69,10,79,8,"parsedProxyPort"],[69,25,79,23],[69,29,79,27,"parsedProxyPort"],[69,44,79,42],[69,49,79,47,"port"],[69,53,79,51],[69,55,79,53],[70,8,80,6],[70,15,80,13],[70,19,80,17],[70,20,80,18],[70,21,80,20],[71,6,81,4],[72,6,83,4],[72,10,83,8],[72,11,83,9],[72,18,83,16],[72,19,83,17,"test"],[72,23,83,21],[72,24,83,22,"parsedProxyHostname"],[72,43,83,41],[72,44,83,42],[72,46,83,44],[73,8,84,6],[74,8,85,6],[74,15,85,13,"hostname"],[74,23,85,21],[74,28,85,26,"parsedProxyHostname"],[74,47,85,45],[75,6,86,4],[76,6,88,4],[76,10,88,8,"parsedProxyHostname"],[76,29,88,27],[76,30,88,28,"charAt"],[76,36,88,34],[76,37,88,35],[76,38,88,36],[76,39,88,37],[76,44,88,42],[76,47,88,45],[76,49,88,47],[77,8,89,6],[78,8,90,6,"parsedProxyHostname"],[78,27,90,25],[78,30,90,28,"parsedProxyHostname"],[78,49,90,47],[78,50,90,48,"slice"],[78,55,90,53],[78,56,90,54],[78,57,90,55],[78,58,90,56],[79,6,91,4],[80,6,92,4],[81,6,93,4],[81,13,93,11],[81,14,93,12,"stringEndsWith"],[81,28,93,26],[81,29,93,27,"call"],[81,33,93,31],[81,34,93,32,"hostname"],[81,42,93,40],[81,44,93,42,"parsedProxyHostname"],[81,63,93,61],[81,64,93,62],[82,4,94,2],[82,5,94,3],[82,6,94,4],[83,2,95,0],[85,2,97,0],[86,0,98,0],[87,0,99,0],[88,0,100,0],[89,0,101,0],[90,0,102,0],[91,0,103,0],[92,2,104,0],[92,11,104,9,"getEnv"],[92,17,104,15,"getEnv"],[92,18,104,16,"key"],[92,21,104,19],[92,23,104,21],[93,4,105,2],[93,11,105,9,"process"],[93,18,105,16],[93,19,105,17,"env"],[93,22,105,20],[93,23,105,21,"key"],[93,26,105,24],[93,27,105,25,"toLowerCase"],[93,38,105,36],[93,39,105,37],[93,40,105,38],[93,41,105,39],[93,45,105,43,"process"],[93,52,105,50],[93,53,105,51,"env"],[93,56,105,54],[93,57,105,55,"key"],[93,60,105,58],[93,61,105,59,"toUpperCase"],[93,72,105,70],[93,73,105,71],[93,74,105,72],[93,75,105,73],[93,79,105,77],[93,81,105,79],[94,2,106,0],[95,2,108,0,"exports"],[95,9,108,7],[95,10,108,8,"getProxyForUrl"],[95,24,108,22],[95,27,108,25,"getProxyForUrl"],[95,41,108,39],[96,0,108,40],[96,3]],"functionMap":{"names":["<global>","<anonymous>","getProxyForUrl","shouldProxy","NO_PROXY.split.every$argument_0","getEnv"],"mappings":"AAA;kDCa;CDG;AEO;CF4B;AGU;uCCU;GDsB;CHC;AKS;CLE"},"hasCjsExports":true},"type":"js/module"}]}