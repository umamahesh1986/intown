{"dependencies":[{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":43,"index":58}}],"key":"SN8WVal79eAEDQEpzmVqVAy5JJs=","exportNames":["*"],"imports":1}},{"name":"./BaseRouter.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":59},"end":{"line":4,"column":45,"index":104}}],"key":"dJts27xOtIr7LbP/D7m0z2vzxHI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"TabActions\", {\n    enumerable: true,\n    get: function () {\n      return TabActions;\n    }\n  });\n  exports.TabRouter = TabRouter;\n  var _nanoidNonSecure = require(_dependencyMap[0], \"nanoid/non-secure\");\n  var _BaseRouterJs = require(_dependencyMap[1], \"./BaseRouter.js\");\n  const TYPE_ROUTE = 'route';\n  const TabActions = {\n    jumpTo(name, params) {\n      return {\n        type: 'JUMP_TO',\n        payload: {\n          name,\n          params\n        }\n      };\n    }\n  };\n  const getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n    const history = [{\n      type: TYPE_ROUTE,\n      key: routes[index].key\n    }];\n    let initialRouteIndex;\n    switch (backBehavior) {\n      case 'order':\n        for (let i = index; i > 0; i--) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[i - 1].key\n          });\n        }\n        break;\n      case 'firstRoute':\n        if (index !== 0) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[0].key\n          });\n        }\n        break;\n      case 'initialRoute':\n        initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n        initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n        if (index !== initialRouteIndex) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[initialRouteIndex].key\n          });\n        }\n        break;\n      case 'history':\n      case 'fullHistory':\n        // The history will fill up on navigation\n        break;\n    }\n    return history;\n  };\n  const changeIndex = (state, index, backBehavior, initialRouteName) => {\n    let history = state.history;\n    if (backBehavior === 'history' || backBehavior === 'fullHistory') {\n      const currentRoute = state.routes[index];\n      if (backBehavior === 'history') {\n        // Remove the existing key from the history to de-duplicate it\n        history = history.filter(it => it.type === 'route' ? it.key !== currentRoute.key : false);\n      } else if (backBehavior === 'fullHistory') {\n        const lastHistoryRouteItemIndex = history.findLastIndex(item => item.type === 'route');\n        if (currentRoute.key === history[lastHistoryRouteItemIndex]?.key) {\n          // For full-history, only remove if it matches the last route\n          // Useful for drawer, if current route was in history, then drawer state changed\n          // Then we only need to move the route to the front\n          history = [...history.slice(0, lastHistoryRouteItemIndex), ...history.slice(lastHistoryRouteItemIndex + 1)];\n        }\n      }\n      history = history.concat({\n        type: TYPE_ROUTE,\n        key: currentRoute.key,\n        params: backBehavior === 'fullHistory' ? currentRoute.params : undefined\n      });\n    } else {\n      history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n    }\n    return {\n      ...state,\n      index,\n      history\n    };\n  };\n  function TabRouter({\n    initialRouteName,\n    backBehavior = 'firstRoute'\n  }) {\n    const router = {\n      ..._BaseRouterJs.BaseRouter,\n      type: 'tab',\n      getInitialState({\n        routeNames,\n        routeParamList\n      }) {\n        const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n        const routes = routeNames.map(name => ({\n          name,\n          key: `${name}-${(0, _nanoidNonSecure.nanoid)()}`,\n          params: routeParamList[name]\n        }));\n        const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        return {\n          stale: false,\n          type: 'tab',\n          key: `tab-${(0, _nanoidNonSecure.nanoid)()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys: []\n        };\n      },\n      getRehydratedState(partialState, {\n        routeNames,\n        routeParamList\n      }) {\n        const state = partialState;\n        if (state.stale === false) {\n          return state;\n        }\n        const routes = routeNames.map(name => {\n          const route = state.routes.find(r => r.name === name);\n          return {\n            ...route,\n            name,\n            key: route && route.name === name && route.key ? route.key : `${name}-${(0, _nanoidNonSecure.nanoid)()}`,\n            params: routeParamList[name] !== undefined ? {\n              ...routeParamList[name],\n              ...(route ? route.params : undefined)\n            } : route ? route.params : undefined\n          };\n        });\n        const index = Math.min(Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0), routes.length - 1);\n        const routeKeys = routes.map(route => route.key);\n        const history = state.history?.filter(it => routeKeys.includes(it.key)) ?? [];\n        return changeIndex({\n          stale: false,\n          type: 'tab',\n          key: `tab-${(0, _nanoidNonSecure.nanoid)()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys: state.preloadedRouteKeys?.filter(key => routeKeys.includes(key)) ?? []\n        }, index, backBehavior, initialRouteName);\n      },\n      getStateForRouteNamesChange(state, {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      }) {\n        const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n          name,\n          key: `${name}-${(0, _nanoidNonSecure.nanoid)()}`,\n          params: routeParamList[name]\n        });\n        const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n        let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        it => it.type !== 'route' || routes.find(r => r.key === it.key));\n        if (!history.length) {\n          history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        }\n        return {\n          ...state,\n          history,\n          routeNames,\n          routes,\n          index\n        };\n      },\n      getStateForRouteFocus(state, key) {\n        const index = state.routes.findIndex(r => r.key === key);\n        if (index === -1 || index === state.index) {\n          return state;\n        }\n        return changeIndex(state, index, backBehavior, initialRouteName);\n      },\n      getStateForAction(state, action, {\n        routeParamList,\n        routeGetIdList\n      }) {\n        switch (action.type) {\n          case 'JUMP_TO':\n          case 'NAVIGATE':\n          case 'NAVIGATE_DEPRECATED':\n            {\n              const index = state.routes.findIndex(route => route.name === action.payload.name);\n              if (index === -1) {\n                return null;\n              }\n              const updatedState = changeIndex({\n                ...state,\n                routes: state.routes.map(route => {\n                  if (route.name !== action.payload.name) {\n                    return route;\n                  }\n                  const getId = routeGetIdList[route.name];\n                  const currentId = getId?.({\n                    params: route.params\n                  });\n                  const nextId = getId?.({\n                    params: action.payload.params\n                  });\n                  const key = currentId === nextId ? route.key : `${route.name}-${(0, _nanoidNonSecure.nanoid)()}`;\n                  let params;\n                  if ((action.type === 'NAVIGATE' || action.type === 'NAVIGATE_DEPRECATED') && action.payload.merge && currentId === nextId) {\n                    params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params\n                    } : route.params;\n                  } else {\n                    params = routeParamList[route.name] !== undefined ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params\n                    } : action.payload.params;\n                  }\n                  const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                  return params !== route.params || path !== route.path ? {\n                    ...route,\n                    key,\n                    path,\n                    params\n                  } : route;\n                })\n              }, index, backBehavior, initialRouteName);\n              return {\n                ...updatedState,\n                preloadedRouteKeys: updatedState.preloadedRouteKeys.filter(key => key !== state.routes[updatedState.index].key)\n              };\n            }\n          case 'SET_PARAMS':\n          case 'REPLACE_PARAMS':\n            {\n              const nextState = _BaseRouterJs.BaseRouter.getStateForAction(state, action);\n              if (nextState !== null) {\n                const index = nextState.index;\n                if (index != null) {\n                  const focusedRoute = nextState.routes[index];\n                  const historyItemIndex = state.history.findLastIndex(item => item.key === focusedRoute.key);\n                  let updatedHistory = state.history;\n                  if (historyItemIndex !== -1) {\n                    updatedHistory = [...state.history];\n                    updatedHistory[historyItemIndex] = {\n                      ...updatedHistory[historyItemIndex],\n                      params: focusedRoute.params\n                    };\n                  }\n                  return {\n                    ...nextState,\n                    history: updatedHistory\n                  };\n                }\n              }\n              return nextState;\n            }\n          case 'GO_BACK':\n            {\n              if (state.history.length === 1) {\n                return null;\n              }\n              const previousHistoryItem = state.history[state.history.length - 2];\n              const previousKey = previousHistoryItem?.key;\n              const index = state.routes.findLastIndex(route => route.key === previousKey);\n              if (index === -1) {\n                return null;\n              }\n              let routes = state.routes;\n              if (backBehavior === 'fullHistory' && routes[index].params !== previousHistoryItem.params) {\n                routes = [...state.routes];\n                routes[index] = {\n                  ...routes[index],\n                  params: previousHistoryItem.params\n                };\n              }\n              return {\n                ...state,\n                routes,\n                preloadedRouteKeys: state.preloadedRouteKeys.filter(key => key !== state.routes[index].key),\n                history: state.history.slice(0, -1),\n                index\n              };\n            }\n          case 'PRELOAD':\n            {\n              const routeIndex = state.routes.findIndex(route => route.name === action.payload.name);\n              if (routeIndex === -1) {\n                return null;\n              }\n              const route = state.routes[routeIndex];\n              const getId = routeGetIdList[route.name];\n              const currentId = getId?.({\n                params: route.params\n              });\n              const nextId = getId?.({\n                params: action.payload.params\n              });\n              const key = currentId === nextId ? route.key : `${route.name}-${(0, _nanoidNonSecure.nanoid)()}`;\n              const params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                ...routeParamList[route.name],\n                ...action.payload.params\n              } : undefined;\n              const newRoute = params !== route.params ? {\n                ...route,\n                key,\n                params\n              } : route;\n              return {\n                ...state,\n                preloadedRouteKeys: state.preloadedRouteKeys.filter(key => key !== route.key).concat(newRoute.key),\n                routes: state.routes.map((route, index) => index === routeIndex ? newRoute : route),\n                history: key === route.key ? state.history : state.history.filter(record => record.key !== route.key)\n              };\n            }\n          default:\n            return _BaseRouterJs.BaseRouter.getStateForAction(state, action);\n        }\n      },\n      actionCreators: TabActions\n    };\n    return router;\n  }\n});","lineCount":338,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"TabActions"],[10,23,6,0],[11,4,6,0],[12,2,6,0],[13,2,87,0,"exports"],[13,9,87,0],[13,10,87,0,"TabRouter"],[13,19,87,0],[13,22,87,0,"TabRouter"],[13,31,87,0],[14,2,3,0],[14,6,3,0,"_nanoidNonSecure"],[14,22,3,0],[14,25,3,0,"require"],[14,32,3,0],[14,33,3,0,"_dependencyMap"],[14,47,3,0],[15,2,4,0],[15,6,4,0,"_BaseRouterJs"],[15,19,4,0],[15,22,4,0,"require"],[15,29,4,0],[15,30,4,0,"_dependencyMap"],[15,44,4,0],[16,2,5,0],[16,8,5,6,"TYPE_ROUTE"],[16,18,5,16],[16,21,5,19],[16,28,5,26],[17,2,6,7],[17,8,6,13,"TabActions"],[17,18,6,23],[17,21,6,26],[18,4,7,2,"jumpTo"],[18,10,7,8,"jumpTo"],[18,11,7,9,"name"],[18,15,7,13],[18,17,7,15,"params"],[18,23,7,21],[18,25,7,23],[19,6,8,4],[19,13,8,11],[20,8,9,6,"type"],[20,12,9,10],[20,14,9,12],[20,23,9,21],[21,8,10,6,"payload"],[21,15,10,13],[21,17,10,15],[22,10,11,8,"name"],[22,14,11,12],[23,10,12,8,"params"],[24,8,13,6],[25,6,14,4],[25,7,14,5],[26,4,15,2],[27,2,16,0],[27,3,16,1],[28,2,17,0],[28,8,17,6,"getRouteHistory"],[28,23,17,21],[28,26,17,24,"getRouteHistory"],[28,27,17,25,"routes"],[28,33,17,31],[28,35,17,33,"index"],[28,40,17,38],[28,42,17,40,"backBehavior"],[28,54,17,52],[28,56,17,54,"initialRouteName"],[28,72,17,70],[28,77,17,75],[29,4,18,2],[29,10,18,8,"history"],[29,17,18,15],[29,20,18,18],[29,21,18,19],[30,6,19,4,"type"],[30,10,19,8],[30,12,19,10,"TYPE_ROUTE"],[30,22,19,20],[31,6,20,4,"key"],[31,9,20,7],[31,11,20,9,"routes"],[31,17,20,15],[31,18,20,16,"index"],[31,23,20,21],[31,24,20,22],[31,25,20,23,"key"],[32,4,21,2],[32,5,21,3],[32,6,21,4],[33,4,22,2],[33,8,22,6,"initialRouteIndex"],[33,25,22,23],[34,4,23,2],[34,12,23,10,"backBehavior"],[34,24,23,22],[35,6,24,4],[35,11,24,9],[35,18,24,16],[36,8,25,6],[36,13,25,11],[36,17,25,15,"i"],[36,18,25,16],[36,21,25,19,"index"],[36,26,25,24],[36,28,25,26,"i"],[36,29,25,27],[36,32,25,30],[36,33,25,31],[36,35,25,33,"i"],[36,36,25,34],[36,38,25,36],[36,40,25,38],[37,10,26,8,"history"],[37,17,26,15],[37,18,26,16,"unshift"],[37,25,26,23],[37,26,26,24],[38,12,27,10,"type"],[38,16,27,14],[38,18,27,16,"TYPE_ROUTE"],[38,28,27,26],[39,12,28,10,"key"],[39,15,28,13],[39,17,28,15,"routes"],[39,23,28,21],[39,24,28,22,"i"],[39,25,28,23],[39,28,28,26],[39,29,28,27],[39,30,28,28],[39,31,28,29,"key"],[40,10,29,8],[40,11,29,9],[40,12,29,10],[41,8,30,6],[42,8,31,6],[43,6,32,4],[43,11,32,9],[43,23,32,21],[44,8,33,6],[44,12,33,10,"index"],[44,17,33,15],[44,22,33,20],[44,23,33,21],[44,25,33,23],[45,10,34,8,"history"],[45,17,34,15],[45,18,34,16,"unshift"],[45,25,34,23],[45,26,34,24],[46,12,35,10,"type"],[46,16,35,14],[46,18,35,16,"TYPE_ROUTE"],[46,28,35,26],[47,12,36,10,"key"],[47,15,36,13],[47,17,36,15,"routes"],[47,23,36,21],[47,24,36,22],[47,25,36,23],[47,26,36,24],[47,27,36,25,"key"],[48,10,37,8],[48,11,37,9],[48,12,37,10],[49,8,38,6],[50,8,39,6],[51,6,40,4],[51,11,40,9],[51,25,40,23],[52,8,41,6,"initialRouteIndex"],[52,25,41,23],[52,28,41,26,"routes"],[52,34,41,32],[52,35,41,33,"findIndex"],[52,44,41,42],[52,45,41,43,"route"],[52,50,41,48],[52,54,41,52,"route"],[52,59,41,57],[52,60,41,58,"name"],[52,64,41,62],[52,69,41,67,"initialRouteName"],[52,85,41,83],[52,86,41,84],[53,8,42,6,"initialRouteIndex"],[53,25,42,23],[53,28,42,26,"initialRouteIndex"],[53,45,42,43],[53,50,42,48],[53,51,42,49],[53,52,42,50],[53,55,42,53],[53,56,42,54],[53,59,42,57,"initialRouteIndex"],[53,76,42,74],[54,8,43,6],[54,12,43,10,"index"],[54,17,43,15],[54,22,43,20,"initialRouteIndex"],[54,39,43,37],[54,41,43,39],[55,10,44,8,"history"],[55,17,44,15],[55,18,44,16,"unshift"],[55,25,44,23],[55,26,44,24],[56,12,45,10,"type"],[56,16,45,14],[56,18,45,16,"TYPE_ROUTE"],[56,28,45,26],[57,12,46,10,"key"],[57,15,46,13],[57,17,46,15,"routes"],[57,23,46,21],[57,24,46,22,"initialRouteIndex"],[57,41,46,39],[57,42,46,40],[57,43,46,41,"key"],[58,10,47,8],[58,11,47,9],[58,12,47,10],[59,8,48,6],[60,8,49,6],[61,6,50,4],[61,11,50,9],[61,20,50,18],[62,6,51,4],[62,11,51,9],[62,24,51,22],[63,8,52,6],[64,8,53,6],[65,4,54,2],[66,4,55,2],[66,11,55,9,"history"],[66,18,55,16],[67,2,56,0],[67,3,56,1],[68,2,57,0],[68,8,57,6,"changeIndex"],[68,19,57,17],[68,22,57,20,"changeIndex"],[68,23,57,21,"state"],[68,28,57,26],[68,30,57,28,"index"],[68,35,57,33],[68,37,57,35,"backBehavior"],[68,49,57,47],[68,51,57,49,"initialRouteName"],[68,67,57,65],[68,72,57,70],[69,4,58,2],[69,8,58,6,"history"],[69,15,58,13],[69,18,58,16,"state"],[69,23,58,21],[69,24,58,22,"history"],[69,31,58,29],[70,4,59,2],[70,8,59,6,"backBehavior"],[70,20,59,18],[70,25,59,23],[70,34,59,32],[70,38,59,36,"backBehavior"],[70,50,59,48],[70,55,59,53],[70,68,59,66],[70,70,59,68],[71,6,60,4],[71,12,60,10,"currentRoute"],[71,24,60,22],[71,27,60,25,"state"],[71,32,60,30],[71,33,60,31,"routes"],[71,39,60,37],[71,40,60,38,"index"],[71,45,60,43],[71,46,60,44],[72,6,61,4],[72,10,61,8,"backBehavior"],[72,22,61,20],[72,27,61,25],[72,36,61,34],[72,38,61,36],[73,8,62,6],[74,8,63,6,"history"],[74,15,63,13],[74,18,63,16,"history"],[74,25,63,23],[74,26,63,24,"filter"],[74,32,63,30],[74,33,63,31,"it"],[74,35,63,33],[74,39,63,37,"it"],[74,41,63,39],[74,42,63,40,"type"],[74,46,63,44],[74,51,63,49],[74,58,63,56],[74,61,63,59,"it"],[74,63,63,61],[74,64,63,62,"key"],[74,67,63,65],[74,72,63,70,"currentRoute"],[74,84,63,82],[74,85,63,83,"key"],[74,88,63,86],[74,91,63,89],[74,96,63,94],[74,97,63,95],[75,6,64,4],[75,7,64,5],[75,13,64,11],[75,17,64,15,"backBehavior"],[75,29,64,27],[75,34,64,32],[75,47,64,45],[75,49,64,47],[76,8,65,6],[76,14,65,12,"lastHistoryRouteItemIndex"],[76,39,65,37],[76,42,65,40,"history"],[76,49,65,47],[76,50,65,48,"findLastIndex"],[76,63,65,61],[76,64,65,62,"item"],[76,68,65,66],[76,72,65,70,"item"],[76,76,65,74],[76,77,65,75,"type"],[76,81,65,79],[76,86,65,84],[76,93,65,91],[76,94,65,92],[77,8,66,6],[77,12,66,10,"currentRoute"],[77,24,66,22],[77,25,66,23,"key"],[77,28,66,26],[77,33,66,31,"history"],[77,40,66,38],[77,41,66,39,"lastHistoryRouteItemIndex"],[77,66,66,64],[77,67,66,65],[77,69,66,67,"key"],[77,72,66,70],[77,74,66,72],[78,10,67,8],[79,10,68,8],[80,10,69,8],[81,10,70,8,"history"],[81,17,70,15],[81,20,70,18],[81,21,70,19],[81,24,70,22,"history"],[81,31,70,29],[81,32,70,30,"slice"],[81,37,70,35],[81,38,70,36],[81,39,70,37],[81,41,70,39,"lastHistoryRouteItemIndex"],[81,66,70,64],[81,67,70,65],[81,69,70,67],[81,72,70,70,"history"],[81,79,70,77],[81,80,70,78,"slice"],[81,85,70,83],[81,86,70,84,"lastHistoryRouteItemIndex"],[81,111,70,109],[81,114,70,112],[81,115,70,113],[81,116,70,114],[81,117,70,115],[82,8,71,6],[83,6,72,4],[84,6,73,4,"history"],[84,13,73,11],[84,16,73,14,"history"],[84,23,73,21],[84,24,73,22,"concat"],[84,30,73,28],[84,31,73,29],[85,8,74,6,"type"],[85,12,74,10],[85,14,74,12,"TYPE_ROUTE"],[85,24,74,22],[86,8,75,6,"key"],[86,11,75,9],[86,13,75,11,"currentRoute"],[86,25,75,23],[86,26,75,24,"key"],[86,29,75,27],[87,8,76,6,"params"],[87,14,76,12],[87,16,76,14,"backBehavior"],[87,28,76,26],[87,33,76,31],[87,46,76,44],[87,49,76,47,"currentRoute"],[87,61,76,59],[87,62,76,60,"params"],[87,68,76,66],[87,71,76,69,"undefined"],[88,6,77,4],[88,7,77,5],[88,8,77,6],[89,4,78,2],[89,5,78,3],[89,11,78,9],[90,6,79,4,"history"],[90,13,79,11],[90,16,79,14,"getRouteHistory"],[90,31,79,29],[90,32,79,30,"state"],[90,37,79,35],[90,38,79,36,"routes"],[90,44,79,42],[90,46,79,44,"index"],[90,51,79,49],[90,53,79,51,"backBehavior"],[90,65,79,63],[90,67,79,65,"initialRouteName"],[90,83,79,81],[90,84,79,82],[91,4,80,2],[92,4,81,2],[92,11,81,9],[93,6,82,4],[93,9,82,7,"state"],[93,14,82,12],[94,6,83,4,"index"],[94,11,83,9],[95,6,84,4,"history"],[96,4,85,2],[96,5,85,3],[97,2,86,0],[97,3,86,1],[98,2,87,7],[98,11,87,16,"TabRouter"],[98,20,87,25,"TabRouter"],[98,21,87,26],[99,4,88,2,"initialRouteName"],[99,20,88,18],[100,4,89,2,"backBehavior"],[100,16,89,14],[100,19,89,17],[101,2,90,0],[101,3,90,1],[101,5,90,3],[102,4,91,2],[102,10,91,8,"router"],[102,16,91,14],[102,19,91,17],[103,6,92,4],[103,9,92,7,"BaseRouter"],[103,22,92,17],[103,23,92,17,"BaseRouter"],[103,33,92,17],[104,6,93,4,"type"],[104,10,93,8],[104,12,93,10],[104,17,93,15],[105,6,94,4,"getInitialState"],[105,21,94,19,"getInitialState"],[105,22,94,20],[106,8,95,6,"routeNames"],[106,18,95,16],[107,8,96,6,"routeParamList"],[108,6,97,4],[108,7,97,5],[108,9,97,7],[109,8,98,6],[109,14,98,12,"index"],[109,19,98,17],[109,22,98,20,"initialRouteName"],[109,38,98,36],[109,43,98,41,"undefined"],[109,52,98,50],[109,56,98,54,"routeNames"],[109,66,98,64],[109,67,98,65,"includes"],[109,75,98,73],[109,76,98,74,"initialRouteName"],[109,92,98,90],[109,93,98,91],[109,96,98,94,"routeNames"],[109,106,98,104],[109,107,98,105,"indexOf"],[109,114,98,112],[109,115,98,113,"initialRouteName"],[109,131,98,129],[109,132,98,130],[109,135,98,133],[109,136,98,134],[110,8,99,6],[110,14,99,12,"routes"],[110,20,99,18],[110,23,99,21,"routeNames"],[110,33,99,31],[110,34,99,32,"map"],[110,37,99,35],[110,38,99,36,"name"],[110,42,99,40],[110,47,99,45],[111,10,100,8,"name"],[111,14,100,12],[112,10,101,8,"key"],[112,13,101,11],[112,15,101,13],[112,18,101,16,"name"],[112,22,101,20],[112,26,101,24],[112,30,101,24,"nanoid"],[112,46,101,30],[112,47,101,30,"nanoid"],[112,53,101,30],[112,55,101,31],[112,56,101,32],[112,58,101,34],[113,10,102,8,"params"],[113,16,102,14],[113,18,102,16,"routeParamList"],[113,32,102,30],[113,33,102,31,"name"],[113,37,102,35],[114,8,103,6],[114,9,103,7],[114,10,103,8],[114,11,103,9],[115,8,104,6],[115,14,104,12,"history"],[115,21,104,19],[115,24,104,22,"getRouteHistory"],[115,39,104,37],[115,40,104,38,"routes"],[115,46,104,44],[115,48,104,46,"index"],[115,53,104,51],[115,55,104,53,"backBehavior"],[115,67,104,65],[115,69,104,67,"initialRouteName"],[115,85,104,83],[115,86,104,84],[116,8,105,6],[116,15,105,13],[117,10,106,8,"stale"],[117,15,106,13],[117,17,106,15],[117,22,106,20],[118,10,107,8,"type"],[118,14,107,12],[118,16,107,14],[118,21,107,19],[119,10,108,8,"key"],[119,13,108,11],[119,15,108,13],[119,22,108,20],[119,26,108,20,"nanoid"],[119,42,108,26],[119,43,108,26,"nanoid"],[119,49,108,26],[119,51,108,27],[119,52,108,28],[119,54,108,30],[120,10,109,8,"index"],[120,15,109,13],[121,10,110,8,"routeNames"],[121,20,110,18],[122,10,111,8,"history"],[122,17,111,15],[123,10,112,8,"routes"],[123,16,112,14],[124,10,113,8,"preloadedRouteKeys"],[124,28,113,26],[124,30,113,28],[125,8,114,6],[125,9,114,7],[126,6,115,4],[126,7,115,5],[127,6,116,4,"getRehydratedState"],[127,24,116,22,"getRehydratedState"],[127,25,116,23,"partialState"],[127,37,116,35],[127,39,116,37],[128,8,117,6,"routeNames"],[128,18,117,16],[129,8,118,6,"routeParamList"],[130,6,119,4],[130,7,119,5],[130,9,119,7],[131,8,120,6],[131,14,120,12,"state"],[131,19,120,17],[131,22,120,20,"partialState"],[131,34,120,32],[132,8,121,6],[132,12,121,10,"state"],[132,17,121,15],[132,18,121,16,"stale"],[132,23,121,21],[132,28,121,26],[132,33,121,31],[132,35,121,33],[133,10,122,8],[133,17,122,15,"state"],[133,22,122,20],[134,8,123,6],[135,8,124,6],[135,14,124,12,"routes"],[135,20,124,18],[135,23,124,21,"routeNames"],[135,33,124,31],[135,34,124,32,"map"],[135,37,124,35],[135,38,124,36,"name"],[135,42,124,40],[135,46,124,44],[136,10,125,8],[136,16,125,14,"route"],[136,21,125,19],[136,24,125,22,"state"],[136,29,125,27],[136,30,125,28,"routes"],[136,36,125,34],[136,37,125,35,"find"],[136,41,125,39],[136,42,125,40,"r"],[136,43,125,41],[136,47,125,45,"r"],[136,48,125,46],[136,49,125,47,"name"],[136,53,125,51],[136,58,125,56,"name"],[136,62,125,60],[136,63,125,61],[137,10,126,8],[137,17,126,15],[138,12,127,10],[138,15,127,13,"route"],[138,20,127,18],[139,12,128,10,"name"],[139,16,128,14],[140,12,129,10,"key"],[140,15,129,13],[140,17,129,15,"route"],[140,22,129,20],[140,26,129,24,"route"],[140,31,129,29],[140,32,129,30,"name"],[140,36,129,34],[140,41,129,39,"name"],[140,45,129,43],[140,49,129,47,"route"],[140,54,129,52],[140,55,129,53,"key"],[140,58,129,56],[140,61,129,59,"route"],[140,66,129,64],[140,67,129,65,"key"],[140,70,129,68],[140,73,129,71],[140,76,129,74,"name"],[140,80,129,78],[140,84,129,82],[140,88,129,82,"nanoid"],[140,104,129,88],[140,105,129,88,"nanoid"],[140,111,129,88],[140,113,129,89],[140,114,129,90],[140,116,129,92],[141,12,130,10,"params"],[141,18,130,16],[141,20,130,18,"routeParamList"],[141,34,130,32],[141,35,130,33,"name"],[141,39,130,37],[141,40,130,38],[141,45,130,43,"undefined"],[141,54,130,52],[141,57,130,55],[142,14,131,12],[142,17,131,15,"routeParamList"],[142,31,131,29],[142,32,131,30,"name"],[142,36,131,34],[142,37,131,35],[143,14,132,12],[143,18,132,16,"route"],[143,23,132,21],[143,26,132,24,"route"],[143,31,132,29],[143,32,132,30,"params"],[143,38,132,36],[143,41,132,39,"undefined"],[143,50,132,48],[144,12,133,10],[144,13,133,11],[144,16,133,14,"route"],[144,21,133,19],[144,24,133,22,"route"],[144,29,133,27],[144,30,133,28,"params"],[144,36,133,34],[144,39,133,37,"undefined"],[145,10,134,8],[145,11,134,9],[146,8,135,6],[146,9,135,7],[146,10,135,8],[147,8,136,6],[147,14,136,12,"index"],[147,19,136,17],[147,22,136,20,"Math"],[147,26,136,24],[147,27,136,25,"min"],[147,30,136,28],[147,31,136,29,"Math"],[147,35,136,33],[147,36,136,34,"max"],[147,39,136,37],[147,40,136,38,"routeNames"],[147,50,136,48],[147,51,136,49,"indexOf"],[147,58,136,56],[147,59,136,57,"state"],[147,64,136,62],[147,65,136,63,"routes"],[147,71,136,69],[147,72,136,70,"state"],[147,77,136,75],[147,79,136,77,"index"],[147,84,136,82],[147,88,136,86],[147,89,136,87],[147,90,136,88],[147,92,136,90,"name"],[147,96,136,94],[147,97,136,95],[147,99,136,97],[147,100,136,98],[147,101,136,99],[147,103,136,101,"routes"],[147,109,136,107],[147,110,136,108,"length"],[147,116,136,114],[147,119,136,117],[147,120,136,118],[147,121,136,119],[148,8,137,6],[148,14,137,12,"routeKeys"],[148,23,137,21],[148,26,137,24,"routes"],[148,32,137,30],[148,33,137,31,"map"],[148,36,137,34],[148,37,137,35,"route"],[148,42,137,40],[148,46,137,44,"route"],[148,51,137,49],[148,52,137,50,"key"],[148,55,137,53],[148,56,137,54],[149,8,138,6],[149,14,138,12,"history"],[149,21,138,19],[149,24,138,22,"state"],[149,29,138,27],[149,30,138,28,"history"],[149,37,138,35],[149,39,138,37,"filter"],[149,45,138,43],[149,46,138,44,"it"],[149,48,138,46],[149,52,138,50,"routeKeys"],[149,61,138,59],[149,62,138,60,"includes"],[149,70,138,68],[149,71,138,69,"it"],[149,73,138,71],[149,74,138,72,"key"],[149,77,138,75],[149,78,138,76],[149,79,138,77],[149,83,138,81],[149,85,138,83],[150,8,139,6],[150,15,139,13,"changeIndex"],[150,26,139,24],[150,27,139,25],[151,10,140,8,"stale"],[151,15,140,13],[151,17,140,15],[151,22,140,20],[152,10,141,8,"type"],[152,14,141,12],[152,16,141,14],[152,21,141,19],[153,10,142,8,"key"],[153,13,142,11],[153,15,142,13],[153,22,142,20],[153,26,142,20,"nanoid"],[153,42,142,26],[153,43,142,26,"nanoid"],[153,49,142,26],[153,51,142,27],[153,52,142,28],[153,54,142,30],[154,10,143,8,"index"],[154,15,143,13],[155,10,144,8,"routeNames"],[155,20,144,18],[156,10,145,8,"history"],[156,17,145,15],[157,10,146,8,"routes"],[157,16,146,14],[158,10,147,8,"preloadedRouteKeys"],[158,28,147,26],[158,30,147,28,"state"],[158,35,147,33],[158,36,147,34,"preloadedRouteKeys"],[158,54,147,52],[158,56,147,54,"filter"],[158,62,147,60],[158,63,147,61,"key"],[158,66,147,64],[158,70,147,68,"routeKeys"],[158,79,147,77],[158,80,147,78,"includes"],[158,88,147,86],[158,89,147,87,"key"],[158,92,147,90],[158,93,147,91],[158,94,147,92],[158,98,147,96],[159,8,148,6],[159,9,148,7],[159,11,148,9,"index"],[159,16,148,14],[159,18,148,16,"backBehavior"],[159,30,148,28],[159,32,148,30,"initialRouteName"],[159,48,148,46],[159,49,148,47],[160,6,149,4],[160,7,149,5],[161,6,150,4,"getStateForRouteNamesChange"],[161,33,150,31,"getStateForRouteNamesChange"],[161,34,150,32,"state"],[161,39,150,37],[161,41,150,39],[162,8,151,6,"routeNames"],[162,18,151,16],[163,8,152,6,"routeParamList"],[163,22,152,20],[164,8,153,6,"routeKeyChanges"],[165,6,154,4],[165,7,154,5],[165,9,154,7],[166,8,155,6],[166,14,155,12,"routes"],[166,20,155,18],[166,23,155,21,"routeNames"],[166,33,155,31],[166,34,155,32,"map"],[166,37,155,35],[166,38,155,36,"name"],[166,42,155,40],[166,46,155,44,"state"],[166,51,155,49],[166,52,155,50,"routes"],[166,58,155,56],[166,59,155,57,"find"],[166,63,155,61],[166,64,155,62,"r"],[166,65,155,63],[166,69,155,67,"r"],[166,70,155,68],[166,71,155,69,"name"],[166,75,155,73],[166,80,155,78,"name"],[166,84,155,82],[166,88,155,86],[166,89,155,87,"routeKeyChanges"],[166,104,155,102],[166,105,155,103,"includes"],[166,113,155,111],[166,114,155,112,"r"],[166,115,155,113],[166,116,155,114,"name"],[166,120,155,118],[166,121,155,119],[166,122,155,120],[166,126,155,124],[167,10,156,8,"name"],[167,14,156,12],[168,10,157,8,"key"],[168,13,157,11],[168,15,157,13],[168,18,157,16,"name"],[168,22,157,20],[168,26,157,24],[168,30,157,24,"nanoid"],[168,46,157,30],[168,47,157,30,"nanoid"],[168,53,157,30],[168,55,157,31],[168,56,157,32],[168,58,157,34],[169,10,158,8,"params"],[169,16,158,14],[169,18,158,16,"routeParamList"],[169,32,158,30],[169,33,158,31,"name"],[169,37,158,35],[170,8,159,6],[170,9,159,7],[170,10,159,8],[171,8,160,6],[171,14,160,12,"index"],[171,19,160,17],[171,22,160,20,"Math"],[171,26,160,24],[171,27,160,25,"max"],[171,30,160,28],[171,31,160,29],[171,32,160,30],[171,34,160,32,"routeNames"],[171,44,160,42],[171,45,160,43,"indexOf"],[171,52,160,50],[171,53,160,51,"state"],[171,58,160,56],[171,59,160,57,"routes"],[171,65,160,63],[171,66,160,64,"state"],[171,71,160,69],[171,72,160,70,"index"],[171,77,160,75],[171,78,160,76],[171,79,160,77,"name"],[171,83,160,81],[171,84,160,82],[171,85,160,83],[172,8,161,6],[172,12,161,10,"history"],[172,19,161,17],[172,22,161,20,"state"],[172,27,161,25],[172,28,161,26,"history"],[172,35,161,33],[172,36,161,34,"filter"],[172,42,161,40],[173,8,162,6],[174,8,163,6,"it"],[174,10,163,8],[174,14,163,12,"it"],[174,16,163,14],[174,17,163,15,"type"],[174,21,163,19],[174,26,163,24],[174,33,163,31],[174,37,163,35,"routes"],[174,43,163,41],[174,44,163,42,"find"],[174,48,163,46],[174,49,163,47,"r"],[174,50,163,48],[174,54,163,52,"r"],[174,55,163,53],[174,56,163,54,"key"],[174,59,163,57],[174,64,163,62,"it"],[174,66,163,64],[174,67,163,65,"key"],[174,70,163,68],[174,71,163,69],[174,72,163,70],[175,8,164,6],[175,12,164,10],[175,13,164,11,"history"],[175,20,164,18],[175,21,164,19,"length"],[175,27,164,25],[175,29,164,27],[176,10,165,8,"history"],[176,17,165,15],[176,20,165,18,"getRouteHistory"],[176,35,165,33],[176,36,165,34,"routes"],[176,42,165,40],[176,44,165,42,"index"],[176,49,165,47],[176,51,165,49,"backBehavior"],[176,63,165,61],[176,65,165,63,"initialRouteName"],[176,81,165,79],[176,82,165,80],[177,8,166,6],[178,8,167,6],[178,15,167,13],[179,10,168,8],[179,13,168,11,"state"],[179,18,168,16],[180,10,169,8,"history"],[180,17,169,15],[181,10,170,8,"routeNames"],[181,20,170,18],[182,10,171,8,"routes"],[182,16,171,14],[183,10,172,8,"index"],[184,8,173,6],[184,9,173,7],[185,6,174,4],[185,7,174,5],[186,6,175,4,"getStateForRouteFocus"],[186,27,175,25,"getStateForRouteFocus"],[186,28,175,26,"state"],[186,33,175,31],[186,35,175,33,"key"],[186,38,175,36],[186,40,175,38],[187,8,176,6],[187,14,176,12,"index"],[187,19,176,17],[187,22,176,20,"state"],[187,27,176,25],[187,28,176,26,"routes"],[187,34,176,32],[187,35,176,33,"findIndex"],[187,44,176,42],[187,45,176,43,"r"],[187,46,176,44],[187,50,176,48,"r"],[187,51,176,49],[187,52,176,50,"key"],[187,55,176,53],[187,60,176,58,"key"],[187,63,176,61],[187,64,176,62],[188,8,177,6],[188,12,177,10,"index"],[188,17,177,15],[188,22,177,20],[188,23,177,21],[188,24,177,22],[188,28,177,26,"index"],[188,33,177,31],[188,38,177,36,"state"],[188,43,177,41],[188,44,177,42,"index"],[188,49,177,47],[188,51,177,49],[189,10,178,8],[189,17,178,15,"state"],[189,22,178,20],[190,8,179,6],[191,8,180,6],[191,15,180,13,"changeIndex"],[191,26,180,24],[191,27,180,25,"state"],[191,32,180,30],[191,34,180,32,"index"],[191,39,180,37],[191,41,180,39,"backBehavior"],[191,53,180,51],[191,55,180,53,"initialRouteName"],[191,71,180,69],[191,72,180,70],[192,6,181,4],[192,7,181,5],[193,6,182,4,"getStateForAction"],[193,23,182,21,"getStateForAction"],[193,24,182,22,"state"],[193,29,182,27],[193,31,182,29,"action"],[193,37,182,35],[193,39,182,37],[194,8,183,6,"routeParamList"],[194,22,183,20],[195,8,184,6,"routeGetIdList"],[196,6,185,4],[196,7,185,5],[196,9,185,7],[197,8,186,6],[197,16,186,14,"action"],[197,22,186,20],[197,23,186,21,"type"],[197,27,186,25],[198,10,187,8],[198,15,187,13],[198,24,187,22],[199,10,188,8],[199,15,188,13],[199,25,188,23],[200,10,189,8],[200,15,189,13],[200,36,189,34],[201,12,190,10],[202,14,191,12],[202,20,191,18,"index"],[202,25,191,23],[202,28,191,26,"state"],[202,33,191,31],[202,34,191,32,"routes"],[202,40,191,38],[202,41,191,39,"findIndex"],[202,50,191,48],[202,51,191,49,"route"],[202,56,191,54],[202,60,191,58,"route"],[202,65,191,63],[202,66,191,64,"name"],[202,70,191,68],[202,75,191,73,"action"],[202,81,191,79],[202,82,191,80,"payload"],[202,89,191,87],[202,90,191,88,"name"],[202,94,191,92],[202,95,191,93],[203,14,192,12],[203,18,192,16,"index"],[203,23,192,21],[203,28,192,26],[203,29,192,27],[203,30,192,28],[203,32,192,30],[204,16,193,14],[204,23,193,21],[204,27,193,25],[205,14,194,12],[206,14,195,12],[206,20,195,18,"updatedState"],[206,32,195,30],[206,35,195,33,"changeIndex"],[206,46,195,44],[206,47,195,45],[207,16,196,14],[207,19,196,17,"state"],[207,24,196,22],[208,16,197,14,"routes"],[208,22,197,20],[208,24,197,22,"state"],[208,29,197,27],[208,30,197,28,"routes"],[208,36,197,34],[208,37,197,35,"map"],[208,40,197,38],[208,41,197,39,"route"],[208,46,197,44],[208,50,197,48],[209,18,198,16],[209,22,198,20,"route"],[209,27,198,25],[209,28,198,26,"name"],[209,32,198,30],[209,37,198,35,"action"],[209,43,198,41],[209,44,198,42,"payload"],[209,51,198,49],[209,52,198,50,"name"],[209,56,198,54],[209,58,198,56],[210,20,199,18],[210,27,199,25,"route"],[210,32,199,30],[211,18,200,16],[212,18,201,16],[212,24,201,22,"getId"],[212,29,201,27],[212,32,201,30,"routeGetIdList"],[212,46,201,44],[212,47,201,45,"route"],[212,52,201,50],[212,53,201,51,"name"],[212,57,201,55],[212,58,201,56],[213,18,202,16],[213,24,202,22,"currentId"],[213,33,202,31],[213,36,202,34,"getId"],[213,41,202,39],[213,44,202,42],[214,20,203,18,"params"],[214,26,203,24],[214,28,203,26,"route"],[214,33,203,31],[214,34,203,32,"params"],[215,18,204,16],[215,19,204,17],[215,20,204,18],[216,18,205,16],[216,24,205,22,"nextId"],[216,30,205,28],[216,33,205,31,"getId"],[216,38,205,36],[216,41,205,39],[217,20,206,18,"params"],[217,26,206,24],[217,28,206,26,"action"],[217,34,206,32],[217,35,206,33,"payload"],[217,42,206,40],[217,43,206,41,"params"],[218,18,207,16],[218,19,207,17],[218,20,207,18],[219,18,208,16],[219,24,208,22,"key"],[219,27,208,25],[219,30,208,28,"currentId"],[219,39,208,37],[219,44,208,42,"nextId"],[219,50,208,48],[219,53,208,51,"route"],[219,58,208,56],[219,59,208,57,"key"],[219,62,208,60],[219,65,208,63],[219,68,208,66,"route"],[219,73,208,71],[219,74,208,72,"name"],[219,78,208,76],[219,82,208,80],[219,86,208,80,"nanoid"],[219,102,208,86],[219,103,208,86,"nanoid"],[219,109,208,86],[219,111,208,87],[219,112,208,88],[219,114,208,90],[220,18,209,16],[220,22,209,20,"params"],[220,28,209,26],[221,18,210,16],[221,22,210,20],[221,23,210,21,"action"],[221,29,210,27],[221,30,210,28,"type"],[221,34,210,32],[221,39,210,37],[221,49,210,47],[221,53,210,51,"action"],[221,59,210,57],[221,60,210,58,"type"],[221,64,210,62],[221,69,210,67],[221,90,210,88],[221,95,210,93,"action"],[221,101,210,99],[221,102,210,100,"payload"],[221,109,210,107],[221,110,210,108,"merge"],[221,115,210,113],[221,119,210,117,"currentId"],[221,128,210,126],[221,133,210,131,"nextId"],[221,139,210,137],[221,141,210,139],[222,20,211,18,"params"],[222,26,211,24],[222,29,211,27,"action"],[222,35,211,33],[222,36,211,34,"payload"],[222,43,211,41],[222,44,211,42,"params"],[222,50,211,48],[222,55,211,53,"undefined"],[222,64,211,62],[222,68,211,66,"routeParamList"],[222,82,211,80],[222,83,211,81,"route"],[222,88,211,86],[222,89,211,87,"name"],[222,93,211,91],[222,94,211,92],[222,99,211,97,"undefined"],[222,108,211,106],[222,111,211,109],[223,22,212,20],[223,25,212,23,"routeParamList"],[223,39,212,37],[223,40,212,38,"route"],[223,45,212,43],[223,46,212,44,"name"],[223,50,212,48],[223,51,212,49],[224,22,213,20],[224,25,213,23,"route"],[224,30,213,28],[224,31,213,29,"params"],[224,37,213,35],[225,22,214,20],[225,25,214,23,"action"],[225,31,214,29],[225,32,214,30,"payload"],[225,39,214,37],[225,40,214,38,"params"],[226,20,215,18],[226,21,215,19],[226,24,215,22,"route"],[226,29,215,27],[226,30,215,28,"params"],[226,36,215,34],[227,18,216,16],[227,19,216,17],[227,25,216,23],[228,20,217,18,"params"],[228,26,217,24],[228,29,217,27,"routeParamList"],[228,43,217,41],[228,44,217,42,"route"],[228,49,217,47],[228,50,217,48,"name"],[228,54,217,52],[228,55,217,53],[228,60,217,58,"undefined"],[228,69,217,67],[228,72,217,70],[229,22,218,20],[229,25,218,23,"routeParamList"],[229,39,218,37],[229,40,218,38,"route"],[229,45,218,43],[229,46,218,44,"name"],[229,50,218,48],[229,51,218,49],[230,22,219,20],[230,25,219,23,"action"],[230,31,219,29],[230,32,219,30,"payload"],[230,39,219,37],[230,40,219,38,"params"],[231,20,220,18],[231,21,220,19],[231,24,220,22,"action"],[231,30,220,28],[231,31,220,29,"payload"],[231,38,220,36],[231,39,220,37,"params"],[231,45,220,43],[232,18,221,16],[233,18,222,16],[233,24,222,22,"path"],[233,28,222,26],[233,31,222,29,"action"],[233,37,222,35],[233,38,222,36,"type"],[233,42,222,40],[233,47,222,45],[233,57,222,55],[233,61,222,59,"action"],[233,67,222,65],[233,68,222,66,"payload"],[233,75,222,73],[233,76,222,74,"path"],[233,80,222,78],[233,84,222,82],[233,88,222,86],[233,91,222,89,"action"],[233,97,222,95],[233,98,222,96,"payload"],[233,105,222,103],[233,106,222,104,"path"],[233,110,222,108],[233,113,222,111,"route"],[233,118,222,116],[233,119,222,117,"path"],[233,123,222,121],[234,18,223,16],[234,25,223,23,"params"],[234,31,223,29],[234,36,223,34,"route"],[234,41,223,39],[234,42,223,40,"params"],[234,48,223,46],[234,52,223,50,"path"],[234,56,223,54],[234,61,223,59,"route"],[234,66,223,64],[234,67,223,65,"path"],[234,71,223,69],[234,74,223,72],[235,20,224,18],[235,23,224,21,"route"],[235,28,224,26],[236,20,225,18,"key"],[236,23,225,21],[237,20,226,18,"path"],[237,24,226,22],[238,20,227,18,"params"],[239,18,228,16],[239,19,228,17],[239,22,228,20,"route"],[239,27,228,25],[240,16,229,14],[240,17,229,15],[241,14,230,12],[241,15,230,13],[241,17,230,15,"index"],[241,22,230,20],[241,24,230,22,"backBehavior"],[241,36,230,34],[241,38,230,36,"initialRouteName"],[241,54,230,52],[241,55,230,53],[242,14,231,12],[242,21,231,19],[243,16,232,14],[243,19,232,17,"updatedState"],[243,31,232,29],[244,16,233,14,"preloadedRouteKeys"],[244,34,233,32],[244,36,233,34,"updatedState"],[244,48,233,46],[244,49,233,47,"preloadedRouteKeys"],[244,67,233,65],[244,68,233,66,"filter"],[244,74,233,72],[244,75,233,73,"key"],[244,78,233,76],[244,82,233,80,"key"],[244,85,233,83],[244,90,233,88,"state"],[244,95,233,93],[244,96,233,94,"routes"],[244,102,233,100],[244,103,233,101,"updatedState"],[244,115,233,113],[244,116,233,114,"index"],[244,121,233,119],[244,122,233,120],[244,123,233,121,"key"],[244,126,233,124],[245,14,234,12],[245,15,234,13],[246,12,235,10],[247,10,236,8],[247,15,236,13],[247,27,236,25],[248,10,237,8],[248,15,237,13],[248,31,237,29],[249,12,238,10],[250,14,239,12],[250,20,239,18,"nextState"],[250,29,239,27],[250,32,239,30,"BaseRouter"],[250,45,239,40],[250,46,239,40,"BaseRouter"],[250,56,239,40],[250,57,239,41,"getStateForAction"],[250,74,239,58],[250,75,239,59,"state"],[250,80,239,64],[250,82,239,66,"action"],[250,88,239,72],[250,89,239,73],[251,14,240,12],[251,18,240,16,"nextState"],[251,27,240,25],[251,32,240,30],[251,36,240,34],[251,38,240,36],[252,16,241,14],[252,22,241,20,"index"],[252,27,241,25],[252,30,241,28,"nextState"],[252,39,241,37],[252,40,241,38,"index"],[252,45,241,43],[253,16,242,14],[253,20,242,18,"index"],[253,25,242,23],[253,29,242,27],[253,33,242,31],[253,35,242,33],[254,18,243,16],[254,24,243,22,"focusedRoute"],[254,36,243,34],[254,39,243,37,"nextState"],[254,48,243,46],[254,49,243,47,"routes"],[254,55,243,53],[254,56,243,54,"index"],[254,61,243,59],[254,62,243,60],[255,18,244,16],[255,24,244,22,"historyItemIndex"],[255,40,244,38],[255,43,244,41,"state"],[255,48,244,46],[255,49,244,47,"history"],[255,56,244,54],[255,57,244,55,"findLastIndex"],[255,70,244,68],[255,71,244,69,"item"],[255,75,244,73],[255,79,244,77,"item"],[255,83,244,81],[255,84,244,82,"key"],[255,87,244,85],[255,92,244,90,"focusedRoute"],[255,104,244,102],[255,105,244,103,"key"],[255,108,244,106],[255,109,244,107],[256,18,245,16],[256,22,245,20,"updatedHistory"],[256,36,245,34],[256,39,245,37,"state"],[256,44,245,42],[256,45,245,43,"history"],[256,52,245,50],[257,18,246,16],[257,22,246,20,"historyItemIndex"],[257,38,246,36],[257,43,246,41],[257,44,246,42],[257,45,246,43],[257,47,246,45],[258,20,247,18,"updatedHistory"],[258,34,247,32],[258,37,247,35],[258,38,247,36],[258,41,247,39,"state"],[258,46,247,44],[258,47,247,45,"history"],[258,54,247,52],[258,55,247,53],[259,20,248,18,"updatedHistory"],[259,34,248,32],[259,35,248,33,"historyItemIndex"],[259,51,248,49],[259,52,248,50],[259,55,248,53],[260,22,249,20],[260,25,249,23,"updatedHistory"],[260,39,249,37],[260,40,249,38,"historyItemIndex"],[260,56,249,54],[260,57,249,55],[261,22,250,20,"params"],[261,28,250,26],[261,30,250,28,"focusedRoute"],[261,42,250,40],[261,43,250,41,"params"],[262,20,251,18],[262,21,251,19],[263,18,252,16],[264,18,253,16],[264,25,253,23],[265,20,254,18],[265,23,254,21,"nextState"],[265,32,254,30],[266,20,255,18,"history"],[266,27,255,25],[266,29,255,27,"updatedHistory"],[267,18,256,16],[267,19,256,17],[268,16,257,14],[269,14,258,12],[270,14,259,12],[270,21,259,19,"nextState"],[270,30,259,28],[271,12,260,10],[272,10,261,8],[272,15,261,13],[272,24,261,22],[273,12,262,10],[274,14,263,12],[274,18,263,16,"state"],[274,23,263,21],[274,24,263,22,"history"],[274,31,263,29],[274,32,263,30,"length"],[274,38,263,36],[274,43,263,41],[274,44,263,42],[274,46,263,44],[275,16,264,14],[275,23,264,21],[275,27,264,25],[276,14,265,12],[277,14,266,12],[277,20,266,18,"previousHistoryItem"],[277,39,266,37],[277,42,266,40,"state"],[277,47,266,45],[277,48,266,46,"history"],[277,55,266,53],[277,56,266,54,"state"],[277,61,266,59],[277,62,266,60,"history"],[277,69,266,67],[277,70,266,68,"length"],[277,76,266,74],[277,79,266,77],[277,80,266,78],[277,81,266,79],[278,14,267,12],[278,20,267,18,"previousKey"],[278,31,267,29],[278,34,267,32,"previousHistoryItem"],[278,53,267,51],[278,55,267,53,"key"],[278,58,267,56],[279,14,268,12],[279,20,268,18,"index"],[279,25,268,23],[279,28,268,26,"state"],[279,33,268,31],[279,34,268,32,"routes"],[279,40,268,38],[279,41,268,39,"findLastIndex"],[279,54,268,52],[279,55,268,53,"route"],[279,60,268,58],[279,64,268,62,"route"],[279,69,268,67],[279,70,268,68,"key"],[279,73,268,71],[279,78,268,76,"previousKey"],[279,89,268,87],[279,90,268,88],[280,14,269,12],[280,18,269,16,"index"],[280,23,269,21],[280,28,269,26],[280,29,269,27],[280,30,269,28],[280,32,269,30],[281,16,270,14],[281,23,270,21],[281,27,270,25],[282,14,271,12],[283,14,272,12],[283,18,272,16,"routes"],[283,24,272,22],[283,27,272,25,"state"],[283,32,272,30],[283,33,272,31,"routes"],[283,39,272,37],[284,14,273,12],[284,18,273,16,"backBehavior"],[284,30,273,28],[284,35,273,33],[284,48,273,46],[284,52,273,50,"routes"],[284,58,273,56],[284,59,273,57,"index"],[284,64,273,62],[284,65,273,63],[284,66,273,64,"params"],[284,72,273,70],[284,77,273,75,"previousHistoryItem"],[284,96,273,94],[284,97,273,95,"params"],[284,103,273,101],[284,105,273,103],[285,16,274,14,"routes"],[285,22,274,20],[285,25,274,23],[285,26,274,24],[285,29,274,27,"state"],[285,34,274,32],[285,35,274,33,"routes"],[285,41,274,39],[285,42,274,40],[286,16,275,14,"routes"],[286,22,275,20],[286,23,275,21,"index"],[286,28,275,26],[286,29,275,27],[286,32,275,30],[287,18,276,16],[287,21,276,19,"routes"],[287,27,276,25],[287,28,276,26,"index"],[287,33,276,31],[287,34,276,32],[288,18,277,16,"params"],[288,24,277,22],[288,26,277,24,"previousHistoryItem"],[288,45,277,43],[288,46,277,44,"params"],[289,16,278,14],[289,17,278,15],[290,14,279,12],[291,14,280,12],[291,21,280,19],[292,16,281,14],[292,19,281,17,"state"],[292,24,281,22],[293,16,282,14,"routes"],[293,22,282,20],[294,16,283,14,"preloadedRouteKeys"],[294,34,283,32],[294,36,283,34,"state"],[294,41,283,39],[294,42,283,40,"preloadedRouteKeys"],[294,60,283,58],[294,61,283,59,"filter"],[294,67,283,65],[294,68,283,66,"key"],[294,71,283,69],[294,75,283,73,"key"],[294,78,283,76],[294,83,283,81,"state"],[294,88,283,86],[294,89,283,87,"routes"],[294,95,283,93],[294,96,283,94,"index"],[294,101,283,99],[294,102,283,100],[294,103,283,101,"key"],[294,106,283,104],[294,107,283,105],[295,16,284,14,"history"],[295,23,284,21],[295,25,284,23,"state"],[295,30,284,28],[295,31,284,29,"history"],[295,38,284,36],[295,39,284,37,"slice"],[295,44,284,42],[295,45,284,43],[295,46,284,44],[295,48,284,46],[295,49,284,47],[295,50,284,48],[295,51,284,49],[296,16,285,14,"index"],[297,14,286,12],[297,15,286,13],[298,12,287,10],[299,10,288,8],[299,15,288,13],[299,24,288,22],[300,12,289,10],[301,14,290,12],[301,20,290,18,"routeIndex"],[301,30,290,28],[301,33,290,31,"state"],[301,38,290,36],[301,39,290,37,"routes"],[301,45,290,43],[301,46,290,44,"findIndex"],[301,55,290,53],[301,56,290,54,"route"],[301,61,290,59],[301,65,290,63,"route"],[301,70,290,68],[301,71,290,69,"name"],[301,75,290,73],[301,80,290,78,"action"],[301,86,290,84],[301,87,290,85,"payload"],[301,94,290,92],[301,95,290,93,"name"],[301,99,290,97],[301,100,290,98],[302,14,291,12],[302,18,291,16,"routeIndex"],[302,28,291,26],[302,33,291,31],[302,34,291,32],[302,35,291,33],[302,37,291,35],[303,16,292,14],[303,23,292,21],[303,27,292,25],[304,14,293,12],[305,14,294,12],[305,20,294,18,"route"],[305,25,294,23],[305,28,294,26,"state"],[305,33,294,31],[305,34,294,32,"routes"],[305,40,294,38],[305,41,294,39,"routeIndex"],[305,51,294,49],[305,52,294,50],[306,14,295,12],[306,20,295,18,"getId"],[306,25,295,23],[306,28,295,26,"routeGetIdList"],[306,42,295,40],[306,43,295,41,"route"],[306,48,295,46],[306,49,295,47,"name"],[306,53,295,51],[306,54,295,52],[307,14,296,12],[307,20,296,18,"currentId"],[307,29,296,27],[307,32,296,30,"getId"],[307,37,296,35],[307,40,296,38],[308,16,297,14,"params"],[308,22,297,20],[308,24,297,22,"route"],[308,29,297,27],[308,30,297,28,"params"],[309,14,298,12],[309,15,298,13],[309,16,298,14],[310,14,299,12],[310,20,299,18,"nextId"],[310,26,299,24],[310,29,299,27,"getId"],[310,34,299,32],[310,37,299,35],[311,16,300,14,"params"],[311,22,300,20],[311,24,300,22,"action"],[311,30,300,28],[311,31,300,29,"payload"],[311,38,300,36],[311,39,300,37,"params"],[312,14,301,12],[312,15,301,13],[312,16,301,14],[313,14,302,12],[313,20,302,18,"key"],[313,23,302,21],[313,26,302,24,"currentId"],[313,35,302,33],[313,40,302,38,"nextId"],[313,46,302,44],[313,49,302,47,"route"],[313,54,302,52],[313,55,302,53,"key"],[313,58,302,56],[313,61,302,59],[313,64,302,62,"route"],[313,69,302,67],[313,70,302,68,"name"],[313,74,302,72],[313,78,302,76],[313,82,302,76,"nanoid"],[313,98,302,82],[313,99,302,82,"nanoid"],[313,105,302,82],[313,107,302,83],[313,108,302,84],[313,110,302,86],[314,14,303,12],[314,20,303,18,"params"],[314,26,303,24],[314,29,303,27,"action"],[314,35,303,33],[314,36,303,34,"payload"],[314,43,303,41],[314,44,303,42,"params"],[314,50,303,48],[314,55,303,53,"undefined"],[314,64,303,62],[314,68,303,66,"routeParamList"],[314,82,303,80],[314,83,303,81,"route"],[314,88,303,86],[314,89,303,87,"name"],[314,93,303,91],[314,94,303,92],[314,99,303,97,"undefined"],[314,108,303,106],[314,111,303,109],[315,16,304,14],[315,19,304,17,"routeParamList"],[315,33,304,31],[315,34,304,32,"route"],[315,39,304,37],[315,40,304,38,"name"],[315,44,304,42],[315,45,304,43],[316,16,305,14],[316,19,305,17,"action"],[316,25,305,23],[316,26,305,24,"payload"],[316,33,305,31],[316,34,305,32,"params"],[317,14,306,12],[317,15,306,13],[317,18,306,16,"undefined"],[317,27,306,25],[318,14,307,12],[318,20,307,18,"newRoute"],[318,28,307,26],[318,31,307,29,"params"],[318,37,307,35],[318,42,307,40,"route"],[318,47,307,45],[318,48,307,46,"params"],[318,54,307,52],[318,57,307,55],[319,16,308,14],[319,19,308,17,"route"],[319,24,308,22],[320,16,309,14,"key"],[320,19,309,17],[321,16,310,14,"params"],[322,14,311,12],[322,15,311,13],[322,18,311,16,"route"],[322,23,311,21],[323,14,312,12],[323,21,312,19],[324,16,313,14],[324,19,313,17,"state"],[324,24,313,22],[325,16,314,14,"preloadedRouteKeys"],[325,34,314,32],[325,36,314,34,"state"],[325,41,314,39],[325,42,314,40,"preloadedRouteKeys"],[325,60,314,58],[325,61,314,59,"filter"],[325,67,314,65],[325,68,314,66,"key"],[325,71,314,69],[325,75,314,73,"key"],[325,78,314,76],[325,83,314,81,"route"],[325,88,314,86],[325,89,314,87,"key"],[325,92,314,90],[325,93,314,91],[325,94,314,92,"concat"],[325,100,314,98],[325,101,314,99,"newRoute"],[325,109,314,107],[325,110,314,108,"key"],[325,113,314,111],[325,114,314,112],[326,16,315,14,"routes"],[326,22,315,20],[326,24,315,22,"state"],[326,29,315,27],[326,30,315,28,"routes"],[326,36,315,34],[326,37,315,35,"map"],[326,40,315,38],[326,41,315,39],[326,42,315,40,"route"],[326,47,315,45],[326,49,315,47,"index"],[326,54,315,52],[326,59,315,57,"index"],[326,64,315,62],[326,69,315,67,"routeIndex"],[326,79,315,77],[326,82,315,80,"newRoute"],[326,90,315,88],[326,93,315,91,"route"],[326,98,315,96],[326,99,315,97],[327,16,316,14,"history"],[327,23,316,21],[327,25,316,23,"key"],[327,28,316,26],[327,33,316,31,"route"],[327,38,316,36],[327,39,316,37,"key"],[327,42,316,40],[327,45,316,43,"state"],[327,50,316,48],[327,51,316,49,"history"],[327,58,316,56],[327,61,316,59,"state"],[327,66,316,64],[327,67,316,65,"history"],[327,74,316,72],[327,75,316,73,"filter"],[327,81,316,79],[327,82,316,80,"record"],[327,88,316,86],[327,92,316,90,"record"],[327,98,316,96],[327,99,316,97,"key"],[327,102,316,100],[327,107,316,105,"route"],[327,112,316,110],[327,113,316,111,"key"],[327,116,316,114],[328,14,317,12],[328,15,317,13],[329,12,318,10],[330,10,319,8],[331,12,320,10],[331,19,320,17,"BaseRouter"],[331,32,320,27],[331,33,320,27,"BaseRouter"],[331,43,320,27],[331,44,320,28,"getStateForAction"],[331,61,320,45],[331,62,320,46,"state"],[331,67,320,51],[331,69,320,53,"action"],[331,75,320,59],[331,76,320,60],[332,8,321,6],[333,6,322,4],[333,7,322,5],[334,6,323,4,"actionCreators"],[334,20,323,18],[334,22,323,20,"TabActions"],[335,4,324,2],[335,5,324,3],[336,4,325,2],[336,11,325,9,"router"],[336,17,325,15],[337,2,326,0],[338,0,326,1],[338,3]],"functionMap":{"names":["<global>","TabActions.jumpTo","getRouteHistory","routes.findIndex$argument_0","changeIndex","history.filter$argument_0","history.findLastIndex$argument_0","TabRouter","router.getInitialState","routeNames.map$argument_0","router.getRehydratedState","state.routes.find$argument_0","routes.map$argument_0","state.history.filter$argument_0","state.preloadedRouteKeys.filter$argument_0","router.getStateForRouteNamesChange","routes.find$argument_0","router.getStateForRouteFocus","state.routes.findIndex$argument_0","router.getStateForAction","state.routes.map$argument_0","updatedState.preloadedRouteKeys.filter$argument_0","state.history.findLastIndex$argument_0","state.routes.findLastIndex$argument_0"],"mappings":"AAA;ECM;GDQ;wBEE;2CCwB,wCD;CFe;oBIC;+BCM,+DD;8DEE,6BF;CJqB;OOC;ICO;oCCK;QDI;KDY;IGC;oCDQ;wCEC,oBF;OCU;mCEE,kBF;4CGC,gCH;6DIS,8BJ;KHE;IQC;oCNK,0BE,yDF;OMI;MFI,yCG,qBH,CE;KRW;IUC;2CCC,kBD;KVK;IYC;iDDS,2CC;uCCM;eDgC;yEEI,mDF;qEGW,qCH;qDIwB,kCJ;kELe,sCK;sDDO,2CC;kELwB,wBK;uCCC,yDD;gFNC,kCM;KZM;CPI"},"hasCjsExports":false},"type":"js/module"}]}