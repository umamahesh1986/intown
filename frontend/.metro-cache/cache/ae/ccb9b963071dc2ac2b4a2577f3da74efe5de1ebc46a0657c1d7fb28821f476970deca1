{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return estimateDataURLDecodedBytes;\n    }\n  });\n  /**\n   * Estimate decoded byte length of a data:// URL *without* allocating large buffers.\n   * - For base64: compute exact decoded size using length and padding;\n   *               handle %XX at the character-count level (no string allocation).\n   * - For non-base64: use UTF-8 byteLength of the encoded body as a safe upper bound.\n   *\n   * @param {string} url\n   * @returns {number}\n   */\n  function estimateDataURLDecodedBytes(url) {\n    if (!url || typeof url !== 'string') return 0;\n    if (!url.startsWith('data:')) return 0;\n    const comma = url.indexOf(',');\n    if (comma < 0) return 0;\n    const meta = url.slice(5, comma);\n    const body = url.slice(comma + 1);\n    const isBase64 = /;base64/i.test(meta);\n    if (isBase64) {\n      let effectiveLen = body.length;\n      const len = body.length; // cache length\n\n      for (let i = 0; i < len; i++) {\n        if (body.charCodeAt(i) === 37 /* '%' */ && i + 2 < len) {\n          const a = body.charCodeAt(i + 1);\n          const b = body.charCodeAt(i + 2);\n          const isHex = (a >= 48 && a <= 57 || a >= 65 && a <= 70 || a >= 97 && a <= 102) && (b >= 48 && b <= 57 || b >= 65 && b <= 70 || b >= 97 && b <= 102);\n          if (isHex) {\n            effectiveLen -= 2;\n            i += 2;\n          }\n        }\n      }\n      let pad = 0;\n      let idx = len - 1;\n      const tailIsPct3D = j => j >= 2 && body.charCodeAt(j - 2) === 37 &&\n      // '%'\n      body.charCodeAt(j - 1) === 51 && (\n      // '3'\n      body.charCodeAt(j) === 68 || body.charCodeAt(j) === 100); // 'D' or 'd'\n\n      if (idx >= 0) {\n        if (body.charCodeAt(idx) === 61 /* '=' */) {\n          pad++;\n          idx--;\n        } else if (tailIsPct3D(idx)) {\n          pad++;\n          idx -= 3;\n        }\n      }\n      if (pad === 1 && idx >= 0) {\n        if (body.charCodeAt(idx) === 61 /* '=' */) {\n          pad++;\n        } else if (tailIsPct3D(idx)) {\n          pad++;\n        }\n      }\n      const groups = Math.floor(effectiveLen / 4);\n      const bytes = groups * 3 - (pad || 0);\n      return bytes > 0 ? bytes : 0;\n    }\n    return Buffer.byteLength(body, 'utf8');\n  }\n});","lineCount":75,"map":[[7,2,10,15,"Object"],[7,8,10,15],[7,9,10,15,"defineProperty"],[7,23,10,15],[7,24,10,15,"exports"],[7,31,10,15],[8,4,10,15,"enumerable"],[8,14,10,15],[9,4,10,15,"get"],[9,7,10,15],[9,18,10,15,"get"],[9,19,10,15],[10,6,10,15],[10,13,10,15,"estimateDataURLDecodedBytes"],[10,40,10,15],[11,4,10,15],[12,2,10,15],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[22,2,10,15],[22,11,10,24,"estimateDataURLDecodedBytes"],[22,38,10,51,"estimateDataURLDecodedBytes"],[22,39,10,52,"url"],[22,42,10,55],[22,44,10,57],[23,4,11,2],[23,8,11,6],[23,9,11,7,"url"],[23,12,11,10],[23,16,11,14],[23,23,11,21,"url"],[23,26,11,24],[23,31,11,29],[23,39,11,37],[23,41,11,39],[23,48,11,46],[23,49,11,47],[24,4,12,2],[24,8,12,6],[24,9,12,7,"url"],[24,12,12,10],[24,13,12,11,"startsWith"],[24,23,12,21],[24,24,12,22],[24,31,12,29],[24,32,12,30],[24,34,12,32],[24,41,12,39],[24,42,12,40],[25,4,14,2],[25,10,14,8,"comma"],[25,15,14,13],[25,18,14,16,"url"],[25,21,14,19],[25,22,14,20,"indexOf"],[25,29,14,27],[25,30,14,28],[25,33,14,31],[25,34,14,32],[26,4,15,2],[26,8,15,6,"comma"],[26,13,15,11],[26,16,15,14],[26,17,15,15],[26,19,15,17],[26,26,15,24],[26,27,15,25],[27,4,17,2],[27,10,17,8,"meta"],[27,14,17,12],[27,17,17,15,"url"],[27,20,17,18],[27,21,17,19,"slice"],[27,26,17,24],[27,27,17,25],[27,28,17,26],[27,30,17,28,"comma"],[27,35,17,33],[27,36,17,34],[28,4,18,2],[28,10,18,8,"body"],[28,14,18,12],[28,17,18,15,"url"],[28,20,18,18],[28,21,18,19,"slice"],[28,26,18,24],[28,27,18,25,"comma"],[28,32,18,30],[28,35,18,33],[28,36,18,34],[28,37,18,35],[29,4,19,2],[29,10,19,8,"isBase64"],[29,18,19,16],[29,21,19,19],[29,31,19,29],[29,32,19,30,"test"],[29,36,19,34],[29,37,19,35,"meta"],[29,41,19,39],[29,42,19,40],[30,4,21,2],[30,8,21,6,"isBase64"],[30,16,21,14],[30,18,21,16],[31,6,22,4],[31,10,22,8,"effectiveLen"],[31,22,22,20],[31,25,22,23,"body"],[31,29,22,27],[31,30,22,28,"length"],[31,36,22,34],[32,6,23,4],[32,12,23,10,"len"],[32,15,23,13],[32,18,23,16,"body"],[32,22,23,20],[32,23,23,21,"length"],[32,29,23,27],[32,30,23,28],[32,31,23,29],[34,6,25,4],[34,11,25,9],[34,15,25,13,"i"],[34,16,25,14],[34,19,25,17],[34,20,25,18],[34,22,25,20,"i"],[34,23,25,21],[34,26,25,24,"len"],[34,29,25,27],[34,31,25,29,"i"],[34,32,25,30],[34,34,25,32],[34,36,25,34],[35,8,26,6],[35,12,26,10,"body"],[35,16,26,14],[35,17,26,15,"charCodeAt"],[35,27,26,25],[35,28,26,26,"i"],[35,29,26,27],[35,30,26,28],[35,35,26,33],[35,37,26,35],[35,38,26,36],[35,51,26,49,"i"],[35,52,26,50],[35,55,26,53],[35,56,26,54],[35,59,26,57,"len"],[35,62,26,60],[35,64,26,62],[36,10,27,8],[36,16,27,14,"a"],[36,17,27,15],[36,20,27,18,"body"],[36,24,27,22],[36,25,27,23,"charCodeAt"],[36,35,27,33],[36,36,27,34,"i"],[36,37,27,35],[36,40,27,38],[36,41,27,39],[36,42,27,40],[37,10,28,8],[37,16,28,14,"b"],[37,17,28,15],[37,20,28,18,"body"],[37,24,28,22],[37,25,28,23,"charCodeAt"],[37,35,28,33],[37,36,28,34,"i"],[37,37,28,35],[37,40,28,38],[37,41,28,39],[37,42,28,40],[38,10,29,8],[38,16,29,14,"isHex"],[38,21,29,19],[38,24,30,10],[38,25,30,12,"a"],[38,26,30,13],[38,30,30,17],[38,32,30,19],[38,36,30,23,"a"],[38,37,30,24],[38,41,30,28],[38,43,30,30],[38,47,30,36,"a"],[38,48,30,37],[38,52,30,41],[38,54,30,43],[38,58,30,47,"a"],[38,59,30,48],[38,63,30,52],[38,65,30,55],[38,69,30,60,"a"],[38,70,30,61],[38,74,30,65],[38,76,30,67],[38,80,30,71,"a"],[38,81,30,72],[38,85,30,76],[38,88,30,80],[38,94,31,12,"b"],[38,95,31,13],[38,99,31,17],[38,101,31,19],[38,105,31,23,"b"],[38,106,31,24],[38,110,31,28],[38,112,31,30],[38,116,31,36,"b"],[38,117,31,37],[38,121,31,41],[38,123,31,43],[38,127,31,47,"b"],[38,128,31,48],[38,132,31,52],[38,134,31,55],[38,138,31,60,"b"],[38,139,31,61],[38,143,31,65],[38,145,31,67],[38,149,31,71,"b"],[38,150,31,72],[38,154,31,76],[38,157,31,80],[38,158,31,81],[39,10,33,8],[39,14,33,12,"isHex"],[39,19,33,17],[39,21,33,19],[40,12,34,10,"effectiveLen"],[40,24,34,22],[40,28,34,26],[40,29,34,27],[41,12,35,10,"i"],[41,13,35,11],[41,17,35,15],[41,18,35,16],[42,10,36,8],[43,8,37,6],[44,6,38,4],[45,6,40,4],[45,10,40,8,"pad"],[45,13,40,11],[45,16,40,14],[45,17,40,15],[46,6,41,4],[46,10,41,8,"idx"],[46,13,41,11],[46,16,41,14,"len"],[46,19,41,17],[46,22,41,20],[46,23,41,21],[47,6,43,4],[47,12,43,10,"tailIsPct3D"],[47,23,43,21],[47,26,43,25,"j"],[47,27,43,26],[47,31,44,6,"j"],[47,32,44,7],[47,36,44,11],[47,37,44,12],[47,41,45,6,"body"],[47,45,45,10],[47,46,45,11,"charCodeAt"],[47,56,45,21],[47,57,45,22,"j"],[47,58,45,23],[47,61,45,26],[47,62,45,27],[47,63,45,28],[47,68,45,33],[47,70,45,35],[48,6,45,39],[49,6,46,6,"body"],[49,10,46,10],[49,11,46,11,"charCodeAt"],[49,21,46,21],[49,22,46,22,"j"],[49,23,46,23],[49,26,46,26],[49,27,46,27],[49,28,46,28],[49,33,46,33],[49,35,46,35],[50,6,46,39],[51,6,47,7,"body"],[51,10,47,11],[51,11,47,12,"charCodeAt"],[51,21,47,22],[51,22,47,23,"j"],[51,23,47,24],[51,24,47,25],[51,29,47,30],[51,31,47,32],[51,35,47,36,"body"],[51,39,47,40],[51,40,47,41,"charCodeAt"],[51,50,47,51],[51,51,47,52,"j"],[51,52,47,53],[51,53,47,54],[51,58,47,59],[51,61,47,62],[51,62,47,63],[51,63,47,64],[51,64,47,65],[53,6,49,4],[53,10,49,8,"idx"],[53,13,49,11],[53,17,49,15],[53,18,49,16],[53,20,49,18],[54,8,50,6],[54,12,50,10,"body"],[54,16,50,14],[54,17,50,15,"charCodeAt"],[54,27,50,25],[54,28,50,26,"idx"],[54,31,50,29],[54,32,50,30],[54,37,50,35],[54,39,50,37],[54,40,50,38],[54,51,50,49],[55,10,51,8,"pad"],[55,13,51,11],[55,15,51,13],[56,10,52,8,"idx"],[56,13,52,11],[56,15,52,13],[57,8,53,6],[57,9,53,7],[57,15,53,13],[57,19,53,17,"tailIsPct3D"],[57,30,53,28],[57,31,53,29,"idx"],[57,34,53,32],[57,35,53,33],[57,37,53,35],[58,10,54,8,"pad"],[58,13,54,11],[58,15,54,13],[59,10,55,8,"idx"],[59,13,55,11],[59,17,55,15],[59,18,55,16],[60,8,56,6],[61,6,57,4],[62,6,59,4],[62,10,59,8,"pad"],[62,13,59,11],[62,18,59,16],[62,19,59,17],[62,23,59,21,"idx"],[62,26,59,24],[62,30,59,28],[62,31,59,29],[62,33,59,31],[63,8,60,6],[63,12,60,10,"body"],[63,16,60,14],[63,17,60,15,"charCodeAt"],[63,27,60,25],[63,28,60,26,"idx"],[63,31,60,29],[63,32,60,30],[63,37,60,35],[63,39,60,37],[63,40,60,38],[63,51,60,49],[64,10,61,8,"pad"],[64,13,61,11],[64,15,61,13],[65,8,62,6],[65,9,62,7],[65,15,62,13],[65,19,62,17,"tailIsPct3D"],[65,30,62,28],[65,31,62,29,"idx"],[65,34,62,32],[65,35,62,33],[65,37,62,35],[66,10,63,8,"pad"],[66,13,63,11],[66,15,63,13],[67,8,64,6],[68,6,65,4],[69,6,67,4],[69,12,67,10,"groups"],[69,18,67,16],[69,21,67,19,"Math"],[69,25,67,23],[69,26,67,24,"floor"],[69,31,67,29],[69,32,67,30,"effectiveLen"],[69,44,67,42],[69,47,67,45],[69,48,67,46],[69,49,67,47],[70,6,68,4],[70,12,68,10,"bytes"],[70,17,68,15],[70,20,68,18,"groups"],[70,26,68,24],[70,29,68,27],[70,30,68,28],[70,34,68,32,"pad"],[70,37,68,35],[70,41,68,39],[70,42,68,40],[70,43,68,41],[71,6,69,4],[71,13,69,11,"bytes"],[71,18,69,16],[71,21,69,19],[71,22,69,20],[71,25,69,23,"bytes"],[71,30,69,28],[71,33,69,31],[71,34,69,32],[72,4,70,2],[73,4,72,2],[73,11,72,9,"Buffer"],[73,17,72,15],[73,18,72,16,"byteLength"],[73,28,72,26],[73,29,72,27,"body"],[73,33,72,31],[73,35,72,33],[73,41,72,39],[73,42,72,40],[74,2,73,0],[75,0,73,1],[75,3]],"functionMap":{"names":["<global>","estimateDataURLDecodedBytes","tailIsPct3D"],"mappings":"AAA;eCS;wBCiC;+DDI;CD0B"},"hasCjsExports":false},"type":"js/module"}]}