{"dependencies":[{"name":"expo","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":41,"index":41}}],"key":"PWvtvXU7MaET6Yd1Gn8oQOXJQ8A=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":42},"end":{"line":2,"column":67,"index":109}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoLocation","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":110},"end":{"line":3,"column":42,"index":152}}],"key":"n9eQB3huKj/lRnIsgaXRKPJKjaY=","exportNames":["*"],"imports":1}},{"name":"./Location.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":153},"end":{"line":4,"column":53,"index":206}}],"key":"QoIrjHWCWA2K0AZhEI/d0eITBhA=","exportNames":["*"],"imports":1}},{"name":"./LocationSubscribers","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":207},"end":{"line":5,"column":104,"index":311}}],"key":"ECD2ecHoQ4d6PxMbJzhCjCmKfZg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.getProviderStatusAsync = getProviderStatusAsync;\n  exports.enableNetworkProviderAsync = enableNetworkProviderAsync;\n  exports.getCurrentPositionAsync = getCurrentPositionAsync;\n  exports.getLastKnownPositionAsync = getLastKnownPositionAsync;\n  exports.watchPositionAsync = watchPositionAsync;\n  exports.getHeadingAsync = getHeadingAsync;\n  exports.watchHeadingAsync = watchHeadingAsync;\n  exports.geocodeAsync = geocodeAsync;\n  exports.reverseGeocodeAsync = reverseGeocodeAsync;\n  exports.getForegroundPermissionsAsync = getForegroundPermissionsAsync;\n  exports.requestForegroundPermissionsAsync = requestForegroundPermissionsAsync;\n  Object.defineProperty(exports, \"useForegroundPermissions\", {\n    enumerable: true,\n    get: function () {\n      return useForegroundPermissions;\n    }\n  });\n  exports.getBackgroundPermissionsAsync = getBackgroundPermissionsAsync;\n  exports.requestBackgroundPermissionsAsync = requestBackgroundPermissionsAsync;\n  Object.defineProperty(exports, \"useBackgroundPermissions\", {\n    enumerable: true,\n    get: function () {\n      return useBackgroundPermissions;\n    }\n  });\n  exports.hasServicesEnabledAsync = hasServicesEnabledAsync;\n  exports.isBackgroundLocationAvailableAsync = isBackgroundLocationAvailableAsync;\n  exports.startLocationUpdatesAsync = startLocationUpdatesAsync;\n  exports.stopLocationUpdatesAsync = stopLocationUpdatesAsync;\n  exports.hasStartedLocationUpdatesAsync = hasStartedLocationUpdatesAsync;\n  exports.startGeofencingAsync = startGeofencingAsync;\n  exports.stopGeofencingAsync = stopGeofencingAsync;\n  exports.hasStartedGeofencingAsync = hasStartedGeofencingAsync;\n  var _expo = require(_dependencyMap[0], \"expo\");\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ExpoLocation = require(_dependencyMap[2], \"./ExpoLocation\");\n  var ExpoLocation = _interopDefault(_ExpoLocation);\n  var _LocationTypes = require(_dependencyMap[3], \"./Location.types\");\n  var _LocationSubscribers = require(_dependencyMap[4], \"./LocationSubscribers\");\n  // Flag for warning about background services not being available in Expo Go\n  let warnAboutExpoGoDisplayed = false;\n  // @needsAudit\n  /**\n   * Check status of location providers.\n   * @return A promise which fulfills with an object of type [`LocationProviderStatus`](#locationproviderstatus).\n   */\n  async function getProviderStatusAsync() {\n    return ExpoLocation.default.getProviderStatusAsync();\n  }\n  // @needsAudit\n  /**\n   * Asks the user to turn on high accuracy location mode which enables network provider that uses\n   * Google Play services to improve location accuracy and location-based services.\n   * @return A promise resolving as soon as the user accepts the dialog. Rejects if denied.\n   *\n   * @platform android\n   */\n  async function enableNetworkProviderAsync() {\n    // If network provider is disabled (user's location mode is set to \"Device only\"),\n    // Android's location provider may not give you any results. Use this method in order to ask the user\n    // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n    // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n    if (_expoModulesCore.Platform.OS === 'android') {\n      return ExpoLocation.default.enableNetworkProviderAsync();\n    }\n  }\n  // @needsAudit\n  /**\n   * Requests for one-time delivery of the user's current location.\n   * Depending on given `accuracy` option it may take some time to resolve,\n   * especially when you're inside a building.\n   * > __Note:__ Calling it causes the location manager to obtain a location fix which may take several\n   * > seconds. Consider using [`getLastKnownPositionAsync`](#locationgetlastknownpositionasyncoptions)\n   * > if you expect to get a quick response and high accuracy is not required.\n   * @param options\n   * @return A promise which fulfills with an object of type [`LocationObject`](#locationobject).\n   */\n  async function getCurrentPositionAsync(options = {}) {\n    return ExpoLocation.default.getCurrentPositionAsync(options);\n  }\n  // @needsAudit\n  /**\n   * Gets the last known position of the device or `null` if it's not available or doesn't match given\n   * requirements such as maximum age or required accuracy.\n   * It's considered to be faster than `getCurrentPositionAsync` as it doesn't request for the current\n   * location, but keep in mind the returned location may not be up-to-date.\n   * @param options\n   * @return A promise which fulfills with an object of type [`LocationObject`](#locationobject) or\n   * `null` if it's not available or doesn't match given requirements such as maximum age or required\n   * accuracy.\n   */\n  async function getLastKnownPositionAsync(options = {}) {\n    return ExpoLocation.default.getLastKnownPositionAsync(options);\n  }\n  // @needsAudit\n  /**\n   * Subscribe to location updates from the device. Updates will only occur while the application is in\n   * the foreground. To get location updates while in background you'll need to use\n   * [`startLocationUpdatesAsync`](#locationstartlocationupdatesasynctaskname-options).\n   * @param options\n   * @param callback This function is called on each location update. It receives an object of type\n   * [`LocationObject`](#locationobject) as the first argument.\n   * @param errorHandler This function is called when an error occurs. It receives a string with the\n   * error message as the first argument.\n   * @return A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.\n   */\n  async function watchPositionAsync(options, callback, errorHandler) {\n    const watchId = _LocationSubscribers.LocationSubscriber.registerCallback(callback);\n    errorHandler && _LocationSubscribers.LocationErrorSubscriber.registerCallbackForId(watchId, errorHandler);\n    await ExpoLocation.default.watchPositionImplAsync(watchId, options);\n    return {\n      remove() {\n        _LocationSubscribers.LocationSubscriber.unregisterCallback(watchId);\n        errorHandler && _LocationSubscribers.LocationErrorSubscriber.unregisterCallback(watchId);\n      }\n    };\n  }\n  // @needsAudit\n  /**\n   * Gets the current heading information from the device. To simplify, it calls `watchHeadingAsync`\n   * and waits for a couple of updates, and then returns the one that is accurate enough.\n   * @return A promise which fulfills with an object of type [`LocationHeadingObject`](#locationheadingobject).\n   */\n  async function getHeadingAsync() {\n    return new Promise(async (resolve, reject) => {\n      let tries = 0;\n      let subscriber = undefined;\n      try {\n        subscriber = await watchHeadingAsync(heading => {\n          if (heading.accuracy > 1 || tries > 5) {\n            subscriber?.remove();\n            resolve(heading);\n          } else {\n            tries += 1;\n          }\n        }, reason => {\n          subscriber?.remove();\n          reject(reason);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n  // @needsAudit\n  /**\n   * Subscribe to compass updates from the device.\n   *\n   * @param callback This function is called on each compass update. It receives an object of type\n   * [LocationHeadingObject](#locationheadingobject) as the first argument.\n   * @param errorHandler This function is called when an error occurs. It receives a string with the\n   * error message as the first argument.\n   * @return A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.\n   *\n   * @platform android\n   * @platform ios\n   */\n  async function watchHeadingAsync(callback, errorHandler) {\n    const watchId = _LocationSubscribers.HeadingSubscriber.registerCallback(callback);\n    errorHandler && _LocationSubscribers.LocationErrorSubscriber.registerCallbackForId(watchId, errorHandler);\n    await ExpoLocation.default.watchDeviceHeading(watchId);\n    return {\n      remove() {\n        _LocationSubscribers.HeadingSubscriber.unregisterCallback(watchId);\n        errorHandler && _LocationSubscribers.LocationErrorSubscriber.unregisterCallback(watchId);\n      }\n    };\n  }\n  // @needsAudit\n  /**\n   * Geocode an address string to latitude-longitude location.\n   *\n   * On Android, you must request location permissions with [`requestForegroundPermissionsAsync`](#locationrequestforegroundpermissionsasync)\n   * before geocoding can be used.\n   *\n   * > **Note**: Geocoding is resource consuming and has to be used reasonably. Creating too many\n   * > requests at a time can result in an error, so they have to be managed properly.\n   * > It's also discouraged to use geocoding while the app is in the background and its results won't\n   * > be shown to the user immediately.\n   *\n   * @param address A string representing address, eg. `\"Baker Street London\"`.\n   * @return A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedLocation`](#locationgeocodedlocation)\n   * objects.\n   *\n   * @platform android\n   * @platform ios\n   */\n  async function geocodeAsync(address) {\n    if (typeof address !== 'string') {\n      throw new TypeError(`Address to geocode must be a string. Got ${address} instead.`);\n    }\n    if (_expoModulesCore.Platform.OS === 'web') {\n      if (__DEV__) {\n        console.warn('The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead' + '(https://developers.google.com/maps/documentation/places/web-service/autocomplete)');\n      }\n      return [];\n    }\n    return await ExpoLocation.default.geocodeAsync(address);\n  }\n  // @needsAudit\n  /**\n   * Reverse geocode a location to postal address.\n   *\n   * On Android, you must request location permissions with [`requestForegroundPermissionsAsync`](#locationrequestforegroundpermissionsasync)\n   * before geocoding can be used.\n   *\n   * > **Note**: Geocoding is resource consuming and has to be used reasonably. Creating too many\n   * > requests at a time can result in an error, so they have to be managed properly.\n   * > It's also discouraged to use geocoding while the app is in the background and its results won't\n   * > be shown to the user immediately.\n   *\n   * @param location An object representing a location.\n   * @return A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedAddress`](#locationgeocodedaddress) objects.\n   *\n   * @platform android\n   * @platform ios\n   */\n  async function reverseGeocodeAsync(location) {\n    if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n      throw new TypeError('Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.');\n    }\n    if (_expoModulesCore.Platform.OS === 'web') {\n      if (__DEV__) {\n        console.warn('The Geocoding API has been removed in SDK 49, use Place Autocomplete service instead' + '(https://developers.google.com/maps/documentation/places/web-service/autocomplete)');\n      }\n      return [];\n    }\n    return await ExpoLocation.default.reverseGeocodeAsync(location);\n  }\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing location while the app is in the foreground.\n   * @return A promise that fulfills with an object of type [`LocationPermissionResponse`](#locationpermissionresponse).\n   */\n  async function getForegroundPermissionsAsync() {\n    return await ExpoLocation.default.getForegroundPermissionsAsync();\n  }\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for location while the app is in the foreground.\n   * @return A promise that fulfills with an object of type [`LocationPermissionResponse`](#locationpermissionresponse).\n   */\n  async function requestForegroundPermissionsAsync() {\n    return await ExpoLocation.default.requestForegroundPermissionsAsync();\n  }\n  // @needsAudit\n  /**\n   * Check or request permissions for the foreground location.\n   * This uses both `requestForegroundPermissionsAsync` and `getForegroundPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [status, requestPermission] = Location.useForegroundPermissions();\n   * ```\n   */\n  const useForegroundPermissions = (0, _expoModulesCore.createPermissionHook)({\n    getMethod: getForegroundPermissionsAsync,\n    requestMethod: requestForegroundPermissionsAsync\n  });\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing location while the app is in the background.\n   * @return A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  async function getBackgroundPermissionsAsync() {\n    return await ExpoLocation.default.getBackgroundPermissionsAsync();\n  }\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for location while the app is in the background.\n   * On __Android 11 or higher__: this method will open the system settings page - before that happens\n   * you should explain to the user why your application needs background location permission.\n   * For example, you can use `Modal` component from `react-native` to do that.\n   * > __Note__: Foreground permissions should be granted before asking for the background permissions\n   * (your app can't obtain background permission without foreground permission).\n   * @return A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  async function requestBackgroundPermissionsAsync() {\n    return await ExpoLocation.default.requestBackgroundPermissionsAsync();\n  }\n  // @needsAudit\n  /**\n   * Check or request permissions for the background location.\n   * This uses both `requestBackgroundPermissionsAsync` and `getBackgroundPermissionsAsync` to\n   * interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [status, requestPermission] = Location.useBackgroundPermissions();\n   * ```\n   */\n  const useBackgroundPermissions = (0, _expoModulesCore.createPermissionHook)({\n    getMethod: getBackgroundPermissionsAsync,\n    requestMethod: requestBackgroundPermissionsAsync\n  });\n  // --- Location service\n  // @needsAudit\n  /**\n   * Checks whether location services are enabled by the user.\n   * @return A promise which fulfills to `true` if location services are enabled on the device,\n   * or `false` if not.\n   */\n  async function hasServicesEnabledAsync() {\n    return await ExpoLocation.default.hasServicesEnabledAsync();\n  }\n  // --- Background location updates\n  function _validate(taskName) {\n    if (!taskName || typeof taskName !== 'string') {\n      throw new Error(`\\`taskName\\` must be a non-empty string. Got ${taskName} instead.`);\n    }\n    if ((0, _expo.isRunningInExpoGo)()) {\n      if (!warnAboutExpoGoDisplayed) {\n        const message = 'Background location is limited in Expo Go:\\n' + 'On Android, it is not available at all.\\n' + 'On iOS, it works when running in the Simulator.\\n' + 'You can use this API, and all others, in a development build. Learn more: https://expo.fyi/dev-client.';\n        console.warn(message);\n        warnAboutExpoGoDisplayed = true;\n      }\n    }\n  }\n  // @docsMissing\n  async function isBackgroundLocationAvailableAsync() {\n    const providerStatus = await getProviderStatusAsync();\n    return providerStatus.backgroundModeEnabled;\n  }\n  // @needsAudit\n  /**\n   * Registers for receiving location updates that can also come when the app is in the background.\n   *\n   * # Task parameters\n   *\n   * Background location task will be receiving following data:\n   * - `locations` - An array of the new locations.\n   *\n   * @example\n   * ```ts\n   * import * as TaskManager from 'expo-task-manager';\n   *\n   * TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { locations }, error }) => {\n   *  if (error) {\n   *    // check `error.message` for more details.\n   *    return;\n   *  }\n   *  console.log('Received new locations', locations);\n   * });\n   * ```\n   *\n   * @param taskName Name of the task receiving location updates.\n   * @param options An object of options passed to the location manager.\n   *\n   * @return A promise resolving once the task with location updates is registered.\n   */\n  async function startLocationUpdatesAsync(taskName, options = {\n    accuracy: _LocationTypes.LocationAccuracy.Balanced\n  }) {\n    _validate(taskName);\n    await ExpoLocation.default.startLocationUpdatesAsync(taskName, options);\n  }\n  // @needsAudit\n  /**\n   * Stops location updates for specified task.\n   * @param taskName Name of the background location task to stop.\n   * @return A promise resolving as soon as the task is unregistered.\n   */\n  async function stopLocationUpdatesAsync(taskName) {\n    _validate(taskName);\n    await ExpoLocation.default.stopLocationUpdatesAsync(taskName);\n  }\n  // @needsAudit\n  /**\n   * @param taskName Name of the location task to check.\n   * @return A promise which fulfills with boolean value indicating whether the location task is\n   * started or not.\n   */\n  async function hasStartedLocationUpdatesAsync(taskName) {\n    _validate(taskName);\n    return ExpoLocation.default.hasStartedLocationUpdatesAsync(taskName);\n  }\n  // --- Geofencing\n  function _validateRegions(regions) {\n    if (!regions || regions.length === 0) {\n      throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');\n    }\n    for (const region of regions) {\n      if (typeof region.latitude !== 'number') {\n        throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n      }\n      if (typeof region.longitude !== 'number') {\n        throw new TypeError(`Region's longitude must be a number. Got '${region.longitude}' instead.`);\n      }\n      if (typeof region.radius !== 'number') {\n        throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n      }\n    }\n  }\n  // @needsAudit\n  /**\n   * Starts geofencing for given regions. When the new event comes, the task with specified name will\n   * be called with the region that the device enter to or exit from.\n   * If you want to add or remove regions from already running geofencing task, you can just call\n   * `startGeofencingAsync` again with the new array of regions.\n   *\n   * # Task parameters\n   *\n   * Geofencing task will be receiving following data:\n   *  - `eventType` - Indicates the reason for calling the task, which can be triggered by entering or exiting the region.\n   *    See [`GeofencingEventType`](#geofencingeventtype).\n   *  - `region` - Object containing details about updated region. See [`LocationRegion`](#locationregion) for more details.\n   *\n   * @param taskName Name of the task that will be called when the device enters or exits from specified regions.\n   * @param regions Array of region objects to be geofenced.\n   *\n   * @return A promise resolving as soon as the task is registered.\n   *\n   * @example\n   * ```ts\n   * import { GeofencingEventType } from 'expo-location';\n   * import * as TaskManager from 'expo-task-manager';\n   *\n   *  TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { eventType, region }, error }) => {\n   *   if (error) {\n   *     // check `error.message` for more details.\n   *     return;\n   *   }\n   *   if (eventType === GeofencingEventType.Enter) {\n   *     console.log(\"You've entered region:\", region);\n   *   } else if (eventType === GeofencingEventType.Exit) {\n   *     console.log(\"You've left region:\", region);\n   *   }\n   * });\n   * ```\n   */\n  async function startGeofencingAsync(taskName, regions = []) {\n    _validate(taskName);\n    _validateRegions(regions);\n    await ExpoLocation.default.startGeofencingAsync(taskName, {\n      regions\n    });\n  }\n  // @needsAudit\n  /**\n   * Stops geofencing for specified task. It unregisters the background task so the app will not be\n   * receiving any updates, especially in the background.\n   * @param taskName Name of the task to unregister.\n   * @return A promise resolving as soon as the task is unregistered.\n   */\n  async function stopGeofencingAsync(taskName) {\n    _validate(taskName);\n    await ExpoLocation.default.stopGeofencingAsync(taskName);\n  }\n  // @needsAudit\n  /**\n   * @param taskName Name of the geofencing task to check.\n   * @return A promise which fulfills with boolean value indicating whether the geofencing task is\n   * started or not.\n   */\n  async function hasStartedGeofencingAsync(taskName) {\n    _validate(taskName);\n    return ExpoLocation.default.hasStartedGeofencingAsync(taskName);\n  }\n});","lineCount":470,"map":[[12,2,13,0,"exports"],[12,9,13,0],[12,10,13,0,"getProviderStatusAsync"],[12,32,13,0],[12,35,13,0,"getProviderStatusAsync"],[12,57,13,0],[13,2,24,0,"exports"],[13,9,24,0],[13,10,24,0,"enableNetworkProviderAsync"],[13,36,24,0],[13,39,24,0,"enableNetworkProviderAsync"],[13,65,24,0],[14,2,44,0,"exports"],[14,9,44,0],[14,10,44,0,"getCurrentPositionAsync"],[14,33,44,0],[14,36,44,0,"getCurrentPositionAsync"],[14,59,44,0],[15,2,58,0,"exports"],[15,9,58,0],[15,10,58,0,"getLastKnownPositionAsync"],[15,35,58,0],[15,38,58,0,"getLastKnownPositionAsync"],[15,63,58,0],[16,2,73,0,"exports"],[16,9,73,0],[16,10,73,0,"watchPositionAsync"],[16,28,73,0],[16,31,73,0,"watchPositionAsync"],[16,49,73,0],[17,2,90,0,"exports"],[17,9,90,0],[17,10,90,0,"getHeadingAsync"],[17,25,90,0],[17,28,90,0,"getHeadingAsync"],[17,43,90,0],[18,2,126,0,"exports"],[18,9,126,0],[18,10,126,0,"watchHeadingAsync"],[18,27,126,0],[18,30,126,0,"watchHeadingAsync"],[18,47,126,0],[19,2,156,0,"exports"],[19,9,156,0],[19,10,156,0,"geocodeAsync"],[19,22,156,0],[19,25,156,0,"geocodeAsync"],[19,37,156,0],[20,2,187,0,"exports"],[20,9,187,0],[20,10,187,0,"reverseGeocodeAsync"],[20,29,187,0],[20,32,187,0,"reverseGeocodeAsync"],[20,51,187,0],[21,2,205,0,"exports"],[21,9,205,0],[21,10,205,0,"getForegroundPermissionsAsync"],[21,39,205,0],[21,42,205,0,"getForegroundPermissionsAsync"],[21,71,205,0],[22,2,213,0,"exports"],[22,9,213,0],[22,10,213,0,"requestForegroundPermissionsAsync"],[22,43,213,0],[22,46,213,0,"requestForegroundPermissionsAsync"],[22,79,213,0],[23,2,226,0,"Object"],[23,8,226,0],[23,9,226,0,"defineProperty"],[23,23,226,0],[23,24,226,0,"exports"],[23,31,226,0],[24,4,226,0,"enumerable"],[24,14,226,0],[25,4,226,0,"get"],[25,7,226,0],[25,18,226,0,"get"],[25,19,226,0],[26,6,226,0],[26,13,226,0,"useForegroundPermissions"],[26,37,226,0],[27,4,226,0],[28,2,226,0],[29,2,235,0,"exports"],[29,9,235,0],[29,10,235,0,"getBackgroundPermissionsAsync"],[29,39,235,0],[29,42,235,0,"getBackgroundPermissionsAsync"],[29,71,235,0],[30,2,248,0,"exports"],[30,9,248,0],[30,10,248,0,"requestBackgroundPermissionsAsync"],[30,43,248,0],[30,46,248,0,"requestBackgroundPermissionsAsync"],[30,79,248,0],[31,2,262,0,"Object"],[31,8,262,0],[31,9,262,0,"defineProperty"],[31,23,262,0],[31,24,262,0,"exports"],[31,31,262,0],[32,4,262,0,"enumerable"],[32,14,262,0],[33,4,262,0,"get"],[33,7,262,0],[33,18,262,0,"get"],[33,19,262,0],[34,6,262,0],[34,13,262,0,"useBackgroundPermissions"],[34,37,262,0],[35,4,262,0],[36,2,262,0],[37,2,273,0,"exports"],[37,9,273,0],[37,10,273,0,"hasServicesEnabledAsync"],[37,33,273,0],[37,36,273,0,"hasServicesEnabledAsync"],[37,59,273,0],[38,2,293,0,"exports"],[38,9,293,0],[38,10,293,0,"isBackgroundLocationAvailableAsync"],[38,44,293,0],[38,47,293,0,"isBackgroundLocationAvailableAsync"],[38,81,293,0],[39,2,324,0,"exports"],[39,9,324,0],[39,10,324,0,"startLocationUpdatesAsync"],[39,35,324,0],[39,38,324,0,"startLocationUpdatesAsync"],[39,63,324,0],[40,2,334,0,"exports"],[40,9,334,0],[40,10,334,0,"stopLocationUpdatesAsync"],[40,34,334,0],[40,37,334,0,"stopLocationUpdatesAsync"],[40,61,334,0],[41,2,344,0,"exports"],[41,9,344,0],[41,10,344,0,"hasStartedLocationUpdatesAsync"],[41,40,344,0],[41,43,344,0,"hasStartedLocationUpdatesAsync"],[41,73,344,0],[42,2,402,0,"exports"],[42,9,402,0],[42,10,402,0,"startGeofencingAsync"],[42,30,402,0],[42,33,402,0,"startGeofencingAsync"],[42,53,402,0],[43,2,414,0,"exports"],[43,9,414,0],[43,10,414,0,"stopGeofencingAsync"],[43,29,414,0],[43,32,414,0,"stopGeofencingAsync"],[43,51,414,0],[44,2,424,0,"exports"],[44,9,424,0],[44,10,424,0,"hasStartedGeofencingAsync"],[44,35,424,0],[44,38,424,0,"hasStartedGeofencingAsync"],[44,63,424,0],[45,2,1,0],[45,6,1,0,"_expo"],[45,11,1,0],[45,14,1,0,"require"],[45,21,1,0],[45,22,1,0,"_dependencyMap"],[45,36,1,0],[46,2,2,0],[46,6,2,0,"_expoModulesCore"],[46,22,2,0],[46,25,2,0,"require"],[46,32,2,0],[46,33,2,0,"_dependencyMap"],[46,47,2,0],[47,2,3,0],[47,6,3,0,"_ExpoLocation"],[47,19,3,0],[47,22,3,0,"require"],[47,29,3,0],[47,30,3,0,"_dependencyMap"],[47,44,3,0],[48,2,3,0],[48,6,3,0,"ExpoLocation"],[48,18,3,0],[48,21,3,0,"_interopDefault"],[48,36,3,0],[48,37,3,0,"_ExpoLocation"],[48,50,3,0],[49,2,4,0],[49,6,4,0,"_LocationTypes"],[49,20,4,0],[49,23,4,0,"require"],[49,30,4,0],[49,31,4,0,"_dependencyMap"],[49,45,4,0],[50,2,5,0],[50,6,5,0,"_LocationSubscribers"],[50,26,5,0],[50,29,5,0,"require"],[50,36,5,0],[50,37,5,0,"_dependencyMap"],[50,51,5,0],[51,2,6,0],[52,2,7,0],[52,6,7,4,"warnAboutExpoGoDisplayed"],[52,30,7,28],[52,33,7,31],[52,38,7,36],[53,2,8,0],[54,2,9,0],[55,0,10,0],[56,0,11,0],[57,0,12,0],[58,2,13,7],[58,17,13,22,"getProviderStatusAsync"],[58,39,13,44,"getProviderStatusAsync"],[58,40,13,44],[58,42,13,47],[59,4,14,4],[59,11,14,11,"ExpoLocation"],[59,23,14,23],[59,24,14,23,"default"],[59,31,14,23],[59,32,14,24,"getProviderStatusAsync"],[59,54,14,46],[59,55,14,47],[59,56,14,48],[60,2,15,0],[61,2,16,0],[62,2,17,0],[63,0,18,0],[64,0,19,0],[65,0,20,0],[66,0,21,0],[67,0,22,0],[68,0,23,0],[69,2,24,7],[69,17,24,22,"enableNetworkProviderAsync"],[69,43,24,48,"enableNetworkProviderAsync"],[69,44,24,48],[69,46,24,51],[70,4,25,4],[71,4,26,4],[72,4,27,4],[73,4,28,4],[74,4,29,4],[74,8,29,8,"Platform"],[74,24,29,16],[74,25,29,16,"Platform"],[74,33,29,16],[74,34,29,17,"OS"],[74,36,29,19],[74,41,29,24],[74,50,29,33],[74,52,29,35],[75,6,30,8],[75,13,30,15,"ExpoLocation"],[75,25,30,27],[75,26,30,27,"default"],[75,33,30,27],[75,34,30,28,"enableNetworkProviderAsync"],[75,60,30,54],[75,61,30,55],[75,62,30,56],[76,4,31,4],[77,2,32,0],[78,2,33,0],[79,2,34,0],[80,0,35,0],[81,0,36,0],[82,0,37,0],[83,0,38,0],[84,0,39,0],[85,0,40,0],[86,0,41,0],[87,0,42,0],[88,0,43,0],[89,2,44,7],[89,17,44,22,"getCurrentPositionAsync"],[89,40,44,45,"getCurrentPositionAsync"],[89,41,44,46,"options"],[89,48,44,53],[89,51,44,56],[89,52,44,57],[89,53,44,58],[89,55,44,60],[90,4,45,4],[90,11,45,11,"ExpoLocation"],[90,23,45,23],[90,24,45,23,"default"],[90,31,45,23],[90,32,45,24,"getCurrentPositionAsync"],[90,55,45,47],[90,56,45,48,"options"],[90,63,45,55],[90,64,45,56],[91,2,46,0],[92,2,47,0],[93,2,48,0],[94,0,49,0],[95,0,50,0],[96,0,51,0],[97,0,52,0],[98,0,53,0],[99,0,54,0],[100,0,55,0],[101,0,56,0],[102,0,57,0],[103,2,58,7],[103,17,58,22,"getLastKnownPositionAsync"],[103,42,58,47,"getLastKnownPositionAsync"],[103,43,58,48,"options"],[103,50,58,55],[103,53,58,58],[103,54,58,59],[103,55,58,60],[103,57,58,62],[104,4,59,4],[104,11,59,11,"ExpoLocation"],[104,23,59,23],[104,24,59,23,"default"],[104,31,59,23],[104,32,59,24,"getLastKnownPositionAsync"],[104,57,59,49],[104,58,59,50,"options"],[104,65,59,57],[104,66,59,58],[105,2,60,0],[106,2,61,0],[107,2,62,0],[108,0,63,0],[109,0,64,0],[110,0,65,0],[111,0,66,0],[112,0,67,0],[113,0,68,0],[114,0,69,0],[115,0,70,0],[116,0,71,0],[117,0,72,0],[118,2,73,7],[118,17,73,22,"watchPositionAsync"],[118,35,73,40,"watchPositionAsync"],[118,36,73,41,"options"],[118,43,73,48],[118,45,73,50,"callback"],[118,53,73,58],[118,55,73,60,"errorHandler"],[118,67,73,72],[118,69,73,74],[119,4,74,4],[119,10,74,10,"watchId"],[119,17,74,17],[119,20,74,20,"LocationSubscriber"],[119,40,74,38],[119,41,74,38,"LocationSubscriber"],[119,59,74,38],[119,60,74,39,"registerCallback"],[119,76,74,55],[119,77,74,56,"callback"],[119,85,74,64],[119,86,74,65],[120,4,75,4,"errorHandler"],[120,16,75,16],[120,20,75,20,"LocationErrorSubscriber"],[120,40,75,43],[120,41,75,43,"LocationErrorSubscriber"],[120,64,75,43],[120,65,75,44,"registerCallbackForId"],[120,86,75,65],[120,87,75,66,"watchId"],[120,94,75,73],[120,96,75,75,"errorHandler"],[120,108,75,87],[120,109,75,88],[121,4,76,4],[121,10,76,10,"ExpoLocation"],[121,22,76,22],[121,23,76,22,"default"],[121,30,76,22],[121,31,76,23,"watchPositionImplAsync"],[121,53,76,45],[121,54,76,46,"watchId"],[121,61,76,53],[121,63,76,55,"options"],[121,70,76,62],[121,71,76,63],[122,4,77,4],[122,11,77,11],[123,6,78,8,"remove"],[123,12,78,14,"remove"],[123,13,78,14],[123,15,78,17],[124,8,79,12,"LocationSubscriber"],[124,28,79,30],[124,29,79,30,"LocationSubscriber"],[124,47,79,30],[124,48,79,31,"unregisterCallback"],[124,66,79,49],[124,67,79,50,"watchId"],[124,74,79,57],[124,75,79,58],[125,8,80,12,"errorHandler"],[125,20,80,24],[125,24,80,28,"LocationErrorSubscriber"],[125,44,80,51],[125,45,80,51,"LocationErrorSubscriber"],[125,68,80,51],[125,69,80,52,"unregisterCallback"],[125,87,80,70],[125,88,80,71,"watchId"],[125,95,80,78],[125,96,80,79],[126,6,81,8],[127,4,82,4],[127,5,82,5],[128,2,83,0],[129,2,84,0],[130,2,85,0],[131,0,86,0],[132,0,87,0],[133,0,88,0],[134,0,89,0],[135,2,90,7],[135,17,90,22,"getHeadingAsync"],[135,32,90,37,"getHeadingAsync"],[135,33,90,37],[135,35,90,40],[136,4,91,4],[136,11,91,11],[136,15,91,15,"Promise"],[136,22,91,22],[136,23,91,23],[136,30,91,30,"resolve"],[136,37,91,37],[136,39,91,39,"reject"],[136,45,91,45],[136,50,91,50],[137,6,92,8],[137,10,92,12,"tries"],[137,15,92,17],[137,18,92,20],[137,19,92,21],[138,6,93,8],[138,10,93,12,"subscriber"],[138,20,93,22],[138,23,93,25,"undefined"],[138,32,93,34],[139,6,94,8],[139,10,94,12],[140,8,95,12,"subscriber"],[140,18,95,22],[140,21,95,25],[140,27,95,31,"watchHeadingAsync"],[140,44,95,48],[140,45,95,50,"heading"],[140,52,95,57],[140,56,95,62],[141,10,96,16],[141,14,96,20,"heading"],[141,21,96,27],[141,22,96,28,"accuracy"],[141,30,96,36],[141,33,96,39],[141,34,96,40],[141,38,96,44,"tries"],[141,43,96,49],[141,46,96,52],[141,47,96,53],[141,49,96,55],[142,12,97,20,"subscriber"],[142,22,97,30],[142,24,97,32,"remove"],[142,30,97,38],[142,31,97,39],[142,32,97,40],[143,12,98,20,"resolve"],[143,19,98,27],[143,20,98,28,"heading"],[143,27,98,35],[143,28,98,36],[144,10,99,16],[144,11,99,17],[144,17,100,21],[145,12,101,20,"tries"],[145,17,101,25],[145,21,101,29],[145,22,101,30],[146,10,102,16],[147,8,103,12],[147,9,103,13],[147,11,103,16,"reason"],[147,17,103,22],[147,21,103,27],[148,10,104,16,"subscriber"],[148,20,104,26],[148,22,104,28,"remove"],[148,28,104,34],[148,29,104,35],[148,30,104,36],[149,10,105,16,"reject"],[149,16,105,22],[149,17,105,23,"reason"],[149,23,105,29],[149,24,105,30],[150,8,106,12],[150,9,106,13],[150,10,106,14],[151,6,107,8],[151,7,107,9],[151,8,108,8],[151,15,108,15,"e"],[151,16,108,16],[151,18,108,18],[152,8,109,12,"reject"],[152,14,109,18],[152,15,109,19,"e"],[152,16,109,20],[152,17,109,21],[153,6,110,8],[154,4,111,4],[154,5,111,5],[154,6,111,6],[155,2,112,0],[156,2,113,0],[157,2,114,0],[158,0,115,0],[159,0,116,0],[160,0,117,0],[161,0,118,0],[162,0,119,0],[163,0,120,0],[164,0,121,0],[165,0,122,0],[166,0,123,0],[167,0,124,0],[168,0,125,0],[169,2,126,7],[169,17,126,22,"watchHeadingAsync"],[169,34,126,39,"watchHeadingAsync"],[169,35,126,40,"callback"],[169,43,126,48],[169,45,126,50,"errorHandler"],[169,57,126,62],[169,59,126,64],[170,4,127,4],[170,10,127,10,"watchId"],[170,17,127,17],[170,20,127,20,"HeadingSubscriber"],[170,40,127,37],[170,41,127,37,"HeadingSubscriber"],[170,58,127,37],[170,59,127,38,"registerCallback"],[170,75,127,54],[170,76,127,55,"callback"],[170,84,127,63],[170,85,127,64],[171,4,128,4,"errorHandler"],[171,16,128,16],[171,20,128,20,"LocationErrorSubscriber"],[171,40,128,43],[171,41,128,43,"LocationErrorSubscriber"],[171,64,128,43],[171,65,128,44,"registerCallbackForId"],[171,86,128,65],[171,87,128,66,"watchId"],[171,94,128,73],[171,96,128,75,"errorHandler"],[171,108,128,87],[171,109,128,88],[172,4,129,4],[172,10,129,10,"ExpoLocation"],[172,22,129,22],[172,23,129,22,"default"],[172,30,129,22],[172,31,129,23,"watchDeviceHeading"],[172,49,129,41],[172,50,129,42,"watchId"],[172,57,129,49],[172,58,129,50],[173,4,130,4],[173,11,130,11],[174,6,131,8,"remove"],[174,12,131,14,"remove"],[174,13,131,14],[174,15,131,17],[175,8,132,12,"HeadingSubscriber"],[175,28,132,29],[175,29,132,29,"HeadingSubscriber"],[175,46,132,29],[175,47,132,30,"unregisterCallback"],[175,65,132,48],[175,66,132,49,"watchId"],[175,73,132,56],[175,74,132,57],[176,8,133,12,"errorHandler"],[176,20,133,24],[176,24,133,28,"LocationErrorSubscriber"],[176,44,133,51],[176,45,133,51,"LocationErrorSubscriber"],[176,68,133,51],[176,69,133,52,"unregisterCallback"],[176,87,133,70],[176,88,133,71,"watchId"],[176,95,133,78],[176,96,133,79],[177,6,134,8],[178,4,135,4],[178,5,135,5],[179,2,136,0],[180,2,137,0],[181,2,138,0],[182,0,139,0],[183,0,140,0],[184,0,141,0],[185,0,142,0],[186,0,143,0],[187,0,144,0],[188,0,145,0],[189,0,146,0],[190,0,147,0],[191,0,148,0],[192,0,149,0],[193,0,150,0],[194,0,151,0],[195,0,152,0],[196,0,153,0],[197,0,154,0],[198,0,155,0],[199,2,156,7],[199,17,156,22,"geocodeAsync"],[199,29,156,34,"geocodeAsync"],[199,30,156,35,"address"],[199,37,156,42],[199,39,156,44],[200,4,157,4],[200,8,157,8],[200,15,157,15,"address"],[200,22,157,22],[200,27,157,27],[200,35,157,35],[200,37,157,37],[201,6,158,8],[201,12,158,14],[201,16,158,18,"TypeError"],[201,25,158,27],[201,26,158,28],[201,70,158,72,"address"],[201,77,158,79],[201,88,158,90],[201,89,158,91],[202,4,159,4],[203,4,160,4],[203,8,160,8,"Platform"],[203,24,160,16],[203,25,160,16,"Platform"],[203,33,160,16],[203,34,160,17,"OS"],[203,36,160,19],[203,41,160,24],[203,46,160,29],[203,48,160,31],[204,6,161,8],[204,10,161,12,"__DEV__"],[204,17,161,19],[204,19,161,21],[205,8,162,12,"console"],[205,15,162,19],[205,16,162,20,"warn"],[205,20,162,24],[205,21,162,25],[205,107,162,111],[205,110,163,16],[205,194,163,100],[205,195,163,101],[206,6,164,8],[207,6,165,8],[207,13,165,15],[207,15,165,17],[208,4,166,4],[209,4,167,4],[209,11,167,11],[209,17,167,17,"ExpoLocation"],[209,29,167,29],[209,30,167,29,"default"],[209,37,167,29],[209,38,167,30,"geocodeAsync"],[209,50,167,42],[209,51,167,43,"address"],[209,58,167,50],[209,59,167,51],[210,2,168,0],[211,2,169,0],[212,2,170,0],[213,0,171,0],[214,0,172,0],[215,0,173,0],[216,0,174,0],[217,0,175,0],[218,0,176,0],[219,0,177,0],[220,0,178,0],[221,0,179,0],[222,0,180,0],[223,0,181,0],[224,0,182,0],[225,0,183,0],[226,0,184,0],[227,0,185,0],[228,0,186,0],[229,2,187,7],[229,17,187,22,"reverseGeocodeAsync"],[229,36,187,41,"reverseGeocodeAsync"],[229,37,187,42,"location"],[229,45,187,50],[229,47,187,52],[230,4,188,4],[230,8,188,8],[230,15,188,15,"location"],[230,23,188,23],[230,24,188,24,"latitude"],[230,32,188,32],[230,37,188,37],[230,45,188,45],[230,49,188,49],[230,56,188,56,"location"],[230,64,188,64],[230,65,188,65,"longitude"],[230,74,188,74],[230,79,188,79],[230,87,188,87],[230,89,188,89],[231,6,189,8],[231,12,189,14],[231,16,189,18,"TypeError"],[231,25,189,27],[231,26,189,28],[231,124,189,126],[231,125,189,127],[232,4,190,4],[233,4,191,4],[233,8,191,8,"Platform"],[233,24,191,16],[233,25,191,16,"Platform"],[233,33,191,16],[233,34,191,17,"OS"],[233,36,191,19],[233,41,191,24],[233,46,191,29],[233,48,191,31],[234,6,192,8],[234,10,192,12,"__DEV__"],[234,17,192,19],[234,19,192,21],[235,8,193,12,"console"],[235,15,193,19],[235,16,193,20,"warn"],[235,20,193,24],[235,21,193,25],[235,107,193,111],[235,110,194,16],[235,194,194,100],[235,195,194,101],[236,6,195,8],[237,6,196,8],[237,13,196,15],[237,15,196,17],[238,4,197,4],[239,4,198,4],[239,11,198,11],[239,17,198,17,"ExpoLocation"],[239,29,198,29],[239,30,198,29,"default"],[239,37,198,29],[239,38,198,30,"reverseGeocodeAsync"],[239,57,198,49],[239,58,198,50,"location"],[239,66,198,58],[239,67,198,59],[240,2,199,0],[241,2,200,0],[242,2,201,0],[243,0,202,0],[244,0,203,0],[245,0,204,0],[246,2,205,7],[246,17,205,22,"getForegroundPermissionsAsync"],[246,46,205,51,"getForegroundPermissionsAsync"],[246,47,205,51],[246,49,205,54],[247,4,206,4],[247,11,206,11],[247,17,206,17,"ExpoLocation"],[247,29,206,29],[247,30,206,29,"default"],[247,37,206,29],[247,38,206,30,"getForegroundPermissionsAsync"],[247,67,206,59],[247,68,206,60],[247,69,206,61],[248,2,207,0],[249,2,208,0],[250,2,209,0],[251,0,210,0],[252,0,211,0],[253,0,212,0],[254,2,213,7],[254,17,213,22,"requestForegroundPermissionsAsync"],[254,50,213,55,"requestForegroundPermissionsAsync"],[254,51,213,55],[254,53,213,58],[255,4,214,4],[255,11,214,11],[255,17,214,17,"ExpoLocation"],[255,29,214,29],[255,30,214,29,"default"],[255,37,214,29],[255,38,214,30,"requestForegroundPermissionsAsync"],[255,71,214,63],[255,72,214,64],[255,73,214,65],[256,2,215,0],[257,2,216,0],[258,2,217,0],[259,0,218,0],[260,0,219,0],[261,0,220,0],[262,0,221,0],[263,0,222,0],[264,0,223,0],[265,0,224,0],[266,0,225,0],[267,2,226,7],[267,8,226,13,"useForegroundPermissions"],[267,32,226,37],[267,35,226,40],[267,39,226,40,"createPermissionHook"],[267,55,226,60],[267,56,226,60,"createPermissionHook"],[267,76,226,60],[267,78,226,61],[268,4,227,4,"getMethod"],[268,13,227,13],[268,15,227,15,"getForegroundPermissionsAsync"],[268,44,227,44],[269,4,228,4,"requestMethod"],[269,17,228,17],[269,19,228,19,"requestForegroundPermissionsAsync"],[270,2,229,0],[270,3,229,1],[270,4,229,2],[271,2,230,0],[272,2,231,0],[273,0,232,0],[274,0,233,0],[275,0,234,0],[276,2,235,7],[276,17,235,22,"getBackgroundPermissionsAsync"],[276,46,235,51,"getBackgroundPermissionsAsync"],[276,47,235,51],[276,49,235,54],[277,4,236,4],[277,11,236,11],[277,17,236,17,"ExpoLocation"],[277,29,236,29],[277,30,236,29,"default"],[277,37,236,29],[277,38,236,30,"getBackgroundPermissionsAsync"],[277,67,236,59],[277,68,236,60],[277,69,236,61],[278,2,237,0],[279,2,238,0],[280,2,239,0],[281,0,240,0],[282,0,241,0],[283,0,242,0],[284,0,243,0],[285,0,244,0],[286,0,245,0],[287,0,246,0],[288,0,247,0],[289,2,248,7],[289,17,248,22,"requestBackgroundPermissionsAsync"],[289,50,248,55,"requestBackgroundPermissionsAsync"],[289,51,248,55],[289,53,248,58],[290,4,249,4],[290,11,249,11],[290,17,249,17,"ExpoLocation"],[290,29,249,29],[290,30,249,29,"default"],[290,37,249,29],[290,38,249,30,"requestBackgroundPermissionsAsync"],[290,71,249,63],[290,72,249,64],[290,73,249,65],[291,2,250,0],[292,2,251,0],[293,2,252,0],[294,0,253,0],[295,0,254,0],[296,0,255,0],[297,0,256,0],[298,0,257,0],[299,0,258,0],[300,0,259,0],[301,0,260,0],[302,0,261,0],[303,2,262,7],[303,8,262,13,"useBackgroundPermissions"],[303,32,262,37],[303,35,262,40],[303,39,262,40,"createPermissionHook"],[303,55,262,60],[303,56,262,60,"createPermissionHook"],[303,76,262,60],[303,78,262,61],[304,4,263,4,"getMethod"],[304,13,263,13],[304,15,263,15,"getBackgroundPermissionsAsync"],[304,44,263,44],[305,4,264,4,"requestMethod"],[305,17,264,17],[305,19,264,19,"requestBackgroundPermissionsAsync"],[306,2,265,0],[306,3,265,1],[306,4,265,2],[307,2,266,0],[308,2,267,0],[309,2,268,0],[310,0,269,0],[311,0,270,0],[312,0,271,0],[313,0,272,0],[314,2,273,7],[314,17,273,22,"hasServicesEnabledAsync"],[314,40,273,45,"hasServicesEnabledAsync"],[314,41,273,45],[314,43,273,48],[315,4,274,4],[315,11,274,11],[315,17,274,17,"ExpoLocation"],[315,29,274,29],[315,30,274,29,"default"],[315,37,274,29],[315,38,274,30,"hasServicesEnabledAsync"],[315,61,274,53],[315,62,274,54],[315,63,274,55],[316,2,275,0],[317,2,276,0],[318,2,277,0],[318,11,277,9,"_validate"],[318,20,277,18,"_validate"],[318,21,277,19,"taskName"],[318,29,277,27],[318,31,277,29],[319,4,278,4],[319,8,278,8],[319,9,278,9,"taskName"],[319,17,278,17],[319,21,278,21],[319,28,278,28,"taskName"],[319,36,278,36],[319,41,278,41],[319,49,278,49],[319,51,278,51],[320,6,279,8],[320,12,279,14],[320,16,279,18,"Error"],[320,21,279,23],[320,22,279,24],[320,70,279,72,"taskName"],[320,78,279,80],[320,89,279,91],[320,90,279,92],[321,4,280,4],[322,4,281,4],[322,8,281,8],[322,12,281,8,"isRunningInExpoGo"],[322,17,281,25],[322,18,281,25,"isRunningInExpoGo"],[322,35,281,25],[322,37,281,26],[322,38,281,27],[322,40,281,29],[323,6,282,8],[323,10,282,12],[323,11,282,13,"warnAboutExpoGoDisplayed"],[323,35,282,37],[323,37,282,39],[324,8,283,12],[324,14,283,18,"message"],[324,21,283,25],[324,24,283,28],[324,70,283,74],[324,73,284,16],[324,116,284,59],[324,119,285,16],[324,170,285,67],[324,173,286,16],[324,277,286,120],[325,8,287,12,"console"],[325,15,287,19],[325,16,287,20,"warn"],[325,20,287,24],[325,21,287,25,"message"],[325,28,287,32],[325,29,287,33],[326,8,288,12,"warnAboutExpoGoDisplayed"],[326,32,288,36],[326,35,288,39],[326,39,288,43],[327,6,289,8],[328,4,290,4],[329,2,291,0],[330,2,292,0],[331,2,293,7],[331,17,293,22,"isBackgroundLocationAvailableAsync"],[331,51,293,56,"isBackgroundLocationAvailableAsync"],[331,52,293,56],[331,54,293,59],[332,4,294,4],[332,10,294,10,"providerStatus"],[332,24,294,24],[332,27,294,27],[332,33,294,33,"getProviderStatusAsync"],[332,55,294,55],[332,56,294,56],[332,57,294,57],[333,4,295,4],[333,11,295,11,"providerStatus"],[333,25,295,25],[333,26,295,26,"backgroundModeEnabled"],[333,47,295,47],[334,2,296,0],[335,2,297,0],[336,2,298,0],[337,0,299,0],[338,0,300,0],[339,0,301,0],[340,0,302,0],[341,0,303,0],[342,0,304,0],[343,0,305,0],[344,0,306,0],[345,0,307,0],[346,0,308,0],[347,0,309,0],[348,0,310,0],[349,0,311,0],[350,0,312,0],[351,0,313,0],[352,0,314,0],[353,0,315,0],[354,0,316,0],[355,0,317,0],[356,0,318,0],[357,0,319,0],[358,0,320,0],[359,0,321,0],[360,0,322,0],[361,0,323,0],[362,2,324,7],[362,17,324,22,"startLocationUpdatesAsync"],[362,42,324,47,"startLocationUpdatesAsync"],[362,43,324,48,"taskName"],[362,51,324,56],[362,53,324,58,"options"],[362,60,324,65],[362,63,324,68],[363,4,324,70,"accuracy"],[363,12,324,78],[363,14,324,80,"LocationAccuracy"],[363,28,324,96],[363,29,324,96,"LocationAccuracy"],[363,45,324,96],[363,46,324,97,"Balanced"],[364,2,324,106],[364,3,324,107],[364,5,324,109],[365,4,325,4,"_validate"],[365,13,325,13],[365,14,325,14,"taskName"],[365,22,325,22],[365,23,325,23],[366,4,326,4],[366,10,326,10,"ExpoLocation"],[366,22,326,22],[366,23,326,22,"default"],[366,30,326,22],[366,31,326,23,"startLocationUpdatesAsync"],[366,56,326,48],[366,57,326,49,"taskName"],[366,65,326,57],[366,67,326,59,"options"],[366,74,326,66],[366,75,326,67],[367,2,327,0],[368,2,328,0],[369,2,329,0],[370,0,330,0],[371,0,331,0],[372,0,332,0],[373,0,333,0],[374,2,334,7],[374,17,334,22,"stopLocationUpdatesAsync"],[374,41,334,46,"stopLocationUpdatesAsync"],[374,42,334,47,"taskName"],[374,50,334,55],[374,52,334,57],[375,4,335,4,"_validate"],[375,13,335,13],[375,14,335,14,"taskName"],[375,22,335,22],[375,23,335,23],[376,4,336,4],[376,10,336,10,"ExpoLocation"],[376,22,336,22],[376,23,336,22,"default"],[376,30,336,22],[376,31,336,23,"stopLocationUpdatesAsync"],[376,55,336,47],[376,56,336,48,"taskName"],[376,64,336,56],[376,65,336,57],[377,2,337,0],[378,2,338,0],[379,2,339,0],[380,0,340,0],[381,0,341,0],[382,0,342,0],[383,0,343,0],[384,2,344,7],[384,17,344,22,"hasStartedLocationUpdatesAsync"],[384,47,344,52,"hasStartedLocationUpdatesAsync"],[384,48,344,53,"taskName"],[384,56,344,61],[384,58,344,63],[385,4,345,4,"_validate"],[385,13,345,13],[385,14,345,14,"taskName"],[385,22,345,22],[385,23,345,23],[386,4,346,4],[386,11,346,11,"ExpoLocation"],[386,23,346,23],[386,24,346,23,"default"],[386,31,346,23],[386,32,346,24,"hasStartedLocationUpdatesAsync"],[386,62,346,54],[386,63,346,55,"taskName"],[386,71,346,63],[386,72,346,64],[387,2,347,0],[388,2,348,0],[389,2,349,0],[389,11,349,9,"_validateRegions"],[389,27,349,25,"_validateRegions"],[389,28,349,26,"regions"],[389,35,349,33],[389,37,349,35],[390,4,350,4],[390,8,350,8],[390,9,350,9,"regions"],[390,16,350,16],[390,20,350,20,"regions"],[390,27,350,27],[390,28,350,28,"length"],[390,34,350,34],[390,39,350,39],[390,40,350,40],[390,42,350,42],[391,6,351,8],[391,12,351,14],[391,16,351,18,"Error"],[391,21,351,23],[391,22,351,24],[391,123,351,125],[391,124,351,126],[392,4,352,4],[393,4,353,4],[393,9,353,9],[393,15,353,15,"region"],[393,21,353,21],[393,25,353,25,"regions"],[393,32,353,32],[393,34,353,34],[394,6,354,8],[394,10,354,12],[394,17,354,19,"region"],[394,23,354,25],[394,24,354,26,"latitude"],[394,32,354,34],[394,37,354,39],[394,45,354,47],[394,47,354,49],[395,8,355,12],[395,14,355,18],[395,18,355,22,"TypeError"],[395,27,355,31],[395,28,355,32],[395,72,355,76,"region"],[395,78,355,82],[395,79,355,83,"latitude"],[395,87,355,91],[395,99,355,103],[395,100,355,104],[396,6,356,8],[397,6,357,8],[397,10,357,12],[397,17,357,19,"region"],[397,23,357,25],[397,24,357,26,"longitude"],[397,33,357,35],[397,38,357,40],[397,46,357,48],[397,48,357,50],[398,8,358,12],[398,14,358,18],[398,18,358,22,"TypeError"],[398,27,358,31],[398,28,358,32],[398,73,358,77,"region"],[398,79,358,83],[398,80,358,84,"longitude"],[398,89,358,93],[398,101,358,105],[398,102,358,106],[399,6,359,8],[400,6,360,8],[400,10,360,12],[400,17,360,19,"region"],[400,23,360,25],[400,24,360,26,"radius"],[400,30,360,32],[400,35,360,37],[400,43,360,45],[400,45,360,47],[401,8,361,12],[401,14,361,18],[401,18,361,22,"TypeError"],[401,27,361,31],[401,28,361,32],[401,70,361,74,"region"],[401,76,361,80],[401,77,361,81,"radius"],[401,83,361,87],[401,95,361,99],[401,96,361,100],[402,6,362,8],[403,4,363,4],[404,2,364,0],[405,2,365,0],[406,2,366,0],[407,0,367,0],[408,0,368,0],[409,0,369,0],[410,0,370,0],[411,0,371,0],[412,0,372,0],[413,0,373,0],[414,0,374,0],[415,0,375,0],[416,0,376,0],[417,0,377,0],[418,0,378,0],[419,0,379,0],[420,0,380,0],[421,0,381,0],[422,0,382,0],[423,0,383,0],[424,0,384,0],[425,0,385,0],[426,0,386,0],[427,0,387,0],[428,0,388,0],[429,0,389,0],[430,0,390,0],[431,0,391,0],[432,0,392,0],[433,0,393,0],[434,0,394,0],[435,0,395,0],[436,0,396,0],[437,0,397,0],[438,0,398,0],[439,0,399,0],[440,0,400,0],[441,0,401,0],[442,2,402,7],[442,17,402,22,"startGeofencingAsync"],[442,37,402,42,"startGeofencingAsync"],[442,38,402,43,"taskName"],[442,46,402,51],[442,48,402,53,"regions"],[442,55,402,60],[442,58,402,63],[442,60,402,65],[442,62,402,67],[443,4,403,4,"_validate"],[443,13,403,13],[443,14,403,14,"taskName"],[443,22,403,22],[443,23,403,23],[444,4,404,4,"_validateRegions"],[444,20,404,20],[444,21,404,21,"regions"],[444,28,404,28],[444,29,404,29],[445,4,405,4],[445,10,405,10,"ExpoLocation"],[445,22,405,22],[445,23,405,22,"default"],[445,30,405,22],[445,31,405,23,"startGeofencingAsync"],[445,51,405,43],[445,52,405,44,"taskName"],[445,60,405,52],[445,62,405,54],[446,6,405,56,"regions"],[447,4,405,64],[447,5,405,65],[447,6,405,66],[448,2,406,0],[449,2,407,0],[450,2,408,0],[451,0,409,0],[452,0,410,0],[453,0,411,0],[454,0,412,0],[455,0,413,0],[456,2,414,7],[456,17,414,22,"stopGeofencingAsync"],[456,36,414,41,"stopGeofencingAsync"],[456,37,414,42,"taskName"],[456,45,414,50],[456,47,414,52],[457,4,415,4,"_validate"],[457,13,415,13],[457,14,415,14,"taskName"],[457,22,415,22],[457,23,415,23],[458,4,416,4],[458,10,416,10,"ExpoLocation"],[458,22,416,22],[458,23,416,22,"default"],[458,30,416,22],[458,31,416,23,"stopGeofencingAsync"],[458,50,416,42],[458,51,416,43,"taskName"],[458,59,416,51],[458,60,416,52],[459,2,417,0],[460,2,418,0],[461,2,419,0],[462,0,420,0],[463,0,421,0],[464,0,422,0],[465,0,423,0],[466,2,424,7],[466,17,424,22,"hasStartedGeofencingAsync"],[466,42,424,47,"hasStartedGeofencingAsync"],[466,43,424,48,"taskName"],[466,51,424,56],[466,53,424,58],[467,4,425,4,"_validate"],[467,13,425,13],[467,14,425,14,"taskName"],[467,22,425,22],[467,23,425,23],[468,4,426,4],[468,11,426,11,"ExpoLocation"],[468,23,426,23],[468,24,426,23,"default"],[468,31,426,23],[468,32,426,24,"hasStartedGeofencingAsync"],[468,57,426,49],[468,58,426,50,"taskName"],[468,66,426,58],[468,67,426,59],[469,2,427,0],[470,0,427,1],[470,3]],"functionMap":{"names":["<global>","getProviderStatusAsync","enableNetworkProviderAsync","getCurrentPositionAsync","getLastKnownPositionAsync","watchPositionAsync","remove","getHeadingAsync","Promise$argument_0","watchHeadingAsync$argument_0","watchHeadingAsync$argument_1","watchHeadingAsync","geocodeAsync","reverseGeocodeAsync","getForegroundPermissionsAsync","requestForegroundPermissionsAsync","getBackgroundPermissionsAsync","requestBackgroundPermissionsAsync","hasServicesEnabledAsync","_validate","isBackgroundLocationAvailableAsync","startLocationUpdatesAsync","stopLocationUpdatesAsync","hasStartedLocationUpdatesAsync","_validateRegions","startGeofencingAsync","stopGeofencingAsync","hasStartedGeofencingAsync"],"mappings":"AAA;OCY;CDE;OES;CFQ;OGY;CHE;OIY;CJE;OKa;QCK;SDG;CLE;OOO;uBCC;iDCI;aDQ,EE;aFG;KDK;CPC;OWc;QLK;SKG;CXE;OYoB;CZY;OamB;CbY;OcM;CdE;OeM;CfE;OgBoB;ChBE;OiBW;CjBE;OkBuB;ClBE;AmBE;CnBc;OoBE;CpBG;OqB4B;CrBG;OsBO;CtBG;OuBO;CvBG;AwBE;CxBe;OyBsC;CzBI;O0BQ;C1BG;O2BO;C3BG"},"hasCjsExports":false},"type":"js/module"}]}