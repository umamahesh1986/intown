{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // API\n  module.exports = abort;\n\n  /**\n   * Aborts leftover active jobs\n   *\n   * @param {object} state - current state object\n   */\n  function abort(state) {\n    Object.keys(state.jobs).forEach(clean.bind(state));\n\n    // reset leftover jobs\n    state.jobs = {};\n  }\n\n  /**\n   * Cleans up leftover job by invoking abort function for the provided job id\n   *\n   * @this  state\n   * @param {string|number} key - job id to abort\n   */\n  function clean(key) {\n    if (typeof this.jobs[key] == 'function') {\n      this.jobs[key]();\n    }\n  }\n});","lineCount":28,"map":[[2,2,1,0],[3,2,2,0,"module"],[3,8,2,6],[3,9,2,7,"exports"],[3,16,2,14],[3,19,2,17,"abort"],[3,24,2,22],[5,2,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,2,9,0],[10,11,9,9,"abort"],[10,16,9,14,"abort"],[10,17,9,15,"state"],[10,22,9,20],[10,24,10,0],[11,4,11,2,"Object"],[11,10,11,8],[11,11,11,9,"keys"],[11,15,11,13],[11,16,11,14,"state"],[11,21,11,19],[11,22,11,20,"jobs"],[11,26,11,24],[11,27,11,25],[11,28,11,26,"forEach"],[11,35,11,33],[11,36,11,34,"clean"],[11,41,11,39],[11,42,11,40,"bind"],[11,46,11,44],[11,47,11,45,"state"],[11,52,11,50],[11,53,11,51],[11,54,11,52],[13,4,13,2],[14,4,14,2,"state"],[14,9,14,7],[14,10,14,8,"jobs"],[14,14,14,12],[14,17,14,15],[14,18,14,16],[14,19,14,17],[15,2,15,0],[17,2,17,0],[18,0,18,0],[19,0,19,0],[20,0,20,0],[21,0,21,0],[22,0,22,0],[23,2,23,0],[23,11,23,9,"clean"],[23,16,23,14,"clean"],[23,17,23,15,"key"],[23,20,23,18],[23,22,24,0],[24,4,25,2],[24,8,25,6],[24,15,25,13],[24,19,25,17],[24,20,25,18,"jobs"],[24,24,25,22],[24,25,25,23,"key"],[24,28,25,26],[24,29,25,27],[24,33,25,31],[24,43,25,41],[24,45,26,2],[25,6,27,4],[25,10,27,8],[25,11,27,9,"jobs"],[25,15,27,13],[25,16,27,14,"key"],[25,19,27,17],[25,20,27,18],[25,21,27,19],[25,22,27,20],[26,4,28,2],[27,2,29,0],[28,0,29,1],[28,3]],"functionMap":{"names":["<global>","abort","clean"],"mappings":"AAA;ACQ;CDM;AEQ;CFM"},"hasCjsExports":true},"type":"js/module"}]}