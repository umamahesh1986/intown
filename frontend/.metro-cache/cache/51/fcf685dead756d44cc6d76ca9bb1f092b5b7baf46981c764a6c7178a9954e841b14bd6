{"dependencies":[{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":43,"index":58}}],"key":"SN8WVal79eAEDQEpzmVqVAy5JJs=","exportNames":["*"],"imports":1}},{"name":"./BaseRouter.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":59},"end":{"line":4,"column":45,"index":104}}],"key":"dJts27xOtIr7LbP/D7m0z2vzxHI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"TabActions\", {\n    enumerable: true,\n    get: function () {\n      return TabActions;\n    }\n  });\n  exports.TabRouter = TabRouter;\n  var _nanoidNonSecure = require(_dependencyMap[0], \"nanoid/non-secure\");\n  var _BaseRouterJs = require(_dependencyMap[1], \"./BaseRouter.js\");\n  const TYPE_ROUTE = 'route';\n  const TabActions = {\n    jumpTo(name, params) {\n      return {\n        type: 'JUMP_TO',\n        payload: {\n          name,\n          params\n        }\n      };\n    }\n  };\n  const getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n    const history = [{\n      type: TYPE_ROUTE,\n      key: routes[index].key\n    }];\n    let initialRouteIndex;\n    switch (backBehavior) {\n      case 'order':\n        for (let i = index; i > 0; i--) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[i - 1].key\n          });\n        }\n        break;\n      case 'firstRoute':\n        if (index !== 0) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[0].key\n          });\n        }\n        break;\n      case 'initialRoute':\n        initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n        initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n        if (index !== initialRouteIndex) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[initialRouteIndex].key\n          });\n        }\n        break;\n      case 'history':\n      case 'fullHistory':\n        // The history will fill up on navigation\n        break;\n    }\n    return history;\n  };\n  const changeIndex = (state, index, backBehavior, initialRouteName) => {\n    let history = state.history;\n    if (backBehavior === 'history' || backBehavior === 'fullHistory') {\n      const currentRoute = state.routes[index];\n      if (backBehavior === 'history') {\n        // Remove the existing key from the history to de-duplicate it\n        history = history.filter(it => it.type === 'route' ? it.key !== currentRoute.key : false);\n      } else if (backBehavior === 'fullHistory') {\n        const lastHistoryRouteItemIndex = history.findLastIndex(item => item.type === 'route');\n        if (currentRoute.key === history[lastHistoryRouteItemIndex]?.key) {\n          // For full-history, only remove if it matches the last route\n          // Useful for drawer, if current route was in history, then drawer state changed\n          // Then we only need to move the route to the front\n          history = [...history.slice(0, lastHistoryRouteItemIndex), ...history.slice(lastHistoryRouteItemIndex + 1)];\n        }\n      }\n      history = history.concat({\n        type: TYPE_ROUTE,\n        key: currentRoute.key,\n        params: backBehavior === 'fullHistory' ? currentRoute.params : undefined\n      });\n    } else {\n      history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n    }\n    return Object.assign({}, state, {\n      index,\n      history\n    });\n  };\n  function TabRouter({\n    initialRouteName,\n    backBehavior = 'firstRoute'\n  }) {\n    const router = Object.assign({}, _BaseRouterJs.BaseRouter, {\n      type: 'tab',\n      getInitialState({\n        routeNames,\n        routeParamList\n      }) {\n        const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n        const routes = routeNames.map(name => ({\n          name,\n          key: `${name}-${(0, _nanoidNonSecure.nanoid)()}`,\n          params: routeParamList[name]\n        }));\n        const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        return {\n          stale: false,\n          type: 'tab',\n          key: `tab-${(0, _nanoidNonSecure.nanoid)()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys: []\n        };\n      },\n      getRehydratedState(partialState, {\n        routeNames,\n        routeParamList\n      }) {\n        const state = partialState;\n        if (state.stale === false) {\n          return state;\n        }\n        const routes = routeNames.map(name => {\n          const route = state.routes.find(r => r.name === name);\n          return Object.assign({}, route, {\n            name,\n            key: route && route.name === name && route.key ? route.key : `${name}-${(0, _nanoidNonSecure.nanoid)()}`,\n            params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined\n          });\n        });\n        const index = Math.min(Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0), routes.length - 1);\n        const routeKeys = routes.map(route => route.key);\n        const history = state.history?.filter(it => routeKeys.includes(it.key)) ?? [];\n        return changeIndex({\n          stale: false,\n          type: 'tab',\n          key: `tab-${(0, _nanoidNonSecure.nanoid)()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys: state.preloadedRouteKeys?.filter(key => routeKeys.includes(key)) ?? []\n        }, index, backBehavior, initialRouteName);\n      },\n      getStateForRouteNamesChange(state, {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      }) {\n        const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n          name,\n          key: `${name}-${(0, _nanoidNonSecure.nanoid)()}`,\n          params: routeParamList[name]\n        });\n        const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n        let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        it => it.type !== 'route' || routes.find(r => r.key === it.key));\n        if (!history.length) {\n          history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        }\n        return Object.assign({}, state, {\n          history,\n          routeNames,\n          routes,\n          index\n        });\n      },\n      getStateForRouteFocus(state, key) {\n        const index = state.routes.findIndex(r => r.key === key);\n        if (index === -1 || index === state.index) {\n          return state;\n        }\n        return changeIndex(state, index, backBehavior, initialRouteName);\n      },\n      getStateForAction(state, action, {\n        routeParamList,\n        routeGetIdList\n      }) {\n        switch (action.type) {\n          case 'JUMP_TO':\n          case 'NAVIGATE':\n          case 'NAVIGATE_DEPRECATED':\n            {\n              const index = state.routes.findIndex(route => route.name === action.payload.name);\n              if (index === -1) {\n                return null;\n              }\n              const updatedState = changeIndex(Object.assign({}, state, {\n                routes: state.routes.map(route => {\n                  if (route.name !== action.payload.name) {\n                    return route;\n                  }\n                  const getId = routeGetIdList[route.name];\n                  const currentId = getId?.({\n                    params: route.params\n                  });\n                  const nextId = getId?.({\n                    params: action.payload.params\n                  });\n                  const key = currentId === nextId ? route.key : `${route.name}-${(0, _nanoidNonSecure.nanoid)()}`;\n                  let params;\n                  if ((action.type === 'NAVIGATE' || action.type === 'NAVIGATE_DEPRECATED') && action.payload.merge && currentId === nextId) {\n                    params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;\n                  } else {\n                    params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n                  }\n                  const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                  return params !== route.params || path !== route.path ? Object.assign({}, route, {\n                    key,\n                    path,\n                    params\n                  }) : route;\n                })\n              }), index, backBehavior, initialRouteName);\n              return Object.assign({}, updatedState, {\n                preloadedRouteKeys: updatedState.preloadedRouteKeys.filter(key => key !== state.routes[updatedState.index].key)\n              });\n            }\n          case 'SET_PARAMS':\n          case 'REPLACE_PARAMS':\n            {\n              const nextState = _BaseRouterJs.BaseRouter.getStateForAction(state, action);\n              if (nextState !== null) {\n                const index = nextState.index;\n                if (index != null) {\n                  const focusedRoute = nextState.routes[index];\n                  const historyItemIndex = state.history.findLastIndex(item => item.key === focusedRoute.key);\n                  let updatedHistory = state.history;\n                  if (historyItemIndex !== -1) {\n                    updatedHistory = [...state.history];\n                    updatedHistory[historyItemIndex] = Object.assign({}, updatedHistory[historyItemIndex], {\n                      params: focusedRoute.params\n                    });\n                  }\n                  return Object.assign({}, nextState, {\n                    history: updatedHistory\n                  });\n                }\n              }\n              return nextState;\n            }\n          case 'GO_BACK':\n            {\n              if (state.history.length === 1) {\n                return null;\n              }\n              const previousHistoryItem = state.history[state.history.length - 2];\n              const previousKey = previousHistoryItem?.key;\n              const index = state.routes.findLastIndex(route => route.key === previousKey);\n              if (index === -1) {\n                return null;\n              }\n              let routes = state.routes;\n              if (backBehavior === 'fullHistory' && routes[index].params !== previousHistoryItem.params) {\n                routes = [...state.routes];\n                routes[index] = Object.assign({}, routes[index], {\n                  params: previousHistoryItem.params\n                });\n              }\n              return Object.assign({}, state, {\n                routes,\n                preloadedRouteKeys: state.preloadedRouteKeys.filter(key => key !== state.routes[index].key),\n                history: state.history.slice(0, -1),\n                index\n              });\n            }\n          case 'PRELOAD':\n            {\n              const routeIndex = state.routes.findIndex(route => route.name === action.payload.name);\n              if (routeIndex === -1) {\n                return null;\n              }\n              const route = state.routes[routeIndex];\n              const getId = routeGetIdList[route.name];\n              const currentId = getId?.({\n                params: route.params\n              });\n              const nextId = getId?.({\n                params: action.payload.params\n              });\n              const key = currentId === nextId ? route.key : `${route.name}-${(0, _nanoidNonSecure.nanoid)()}`;\n              const params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : undefined;\n              const newRoute = params !== route.params ? Object.assign({}, route, {\n                key,\n                params\n              }) : route;\n              return Object.assign({}, state, {\n                preloadedRouteKeys: state.preloadedRouteKeys.filter(key => key !== route.key).concat(newRoute.key),\n                routes: state.routes.map((route, index) => index === routeIndex ? newRoute : route),\n                history: key === route.key ? state.history : state.history.filter(record => record.key !== route.key)\n              });\n            }\n          default:\n            return _BaseRouterJs.BaseRouter.getStateForAction(state, action);\n        }\n      },\n      actionCreators: TabActions\n    });\n    return router;\n  }\n});","lineCount":312,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"TabActions"],[10,23,6,0],[11,4,6,0],[12,2,6,0],[13,2,87,0,"exports"],[13,9,87,0],[13,10,87,0,"TabRouter"],[13,19,87,0],[13,22,87,0,"TabRouter"],[13,31,87,0],[14,2,3,0],[14,6,3,0,"_nanoidNonSecure"],[14,22,3,0],[14,25,3,0,"require"],[14,32,3,0],[14,33,3,0,"_dependencyMap"],[14,47,3,0],[15,2,4,0],[15,6,4,0,"_BaseRouterJs"],[15,19,4,0],[15,22,4,0,"require"],[15,29,4,0],[15,30,4,0,"_dependencyMap"],[15,44,4,0],[16,2,5,0],[16,8,5,6,"TYPE_ROUTE"],[16,18,5,16],[16,21,5,19],[16,28,5,26],[17,2,6,7],[17,8,6,13,"TabActions"],[17,18,6,23],[17,21,6,26],[18,4,7,2,"jumpTo"],[18,10,7,8,"jumpTo"],[18,11,7,9,"name"],[18,15,7,13],[18,17,7,15,"params"],[18,23,7,21],[18,25,7,23],[19,6,8,4],[19,13,8,11],[20,8,9,6,"type"],[20,12,9,10],[20,14,9,12],[20,23,9,21],[21,8,10,6,"payload"],[21,15,10,13],[21,17,10,15],[22,10,11,8,"name"],[22,14,11,12],[23,10,12,8,"params"],[24,8,13,6],[25,6,14,4],[25,7,14,5],[26,4,15,2],[27,2,16,0],[27,3,16,1],[28,2,17,0],[28,8,17,6,"getRouteHistory"],[28,23,17,21],[28,26,17,24,"getRouteHistory"],[28,27,17,25,"routes"],[28,33,17,31],[28,35,17,33,"index"],[28,40,17,38],[28,42,17,40,"backBehavior"],[28,54,17,52],[28,56,17,54,"initialRouteName"],[28,72,17,70],[28,77,17,75],[29,4,18,2],[29,10,18,8,"history"],[29,17,18,15],[29,20,18,18],[29,21,18,19],[30,6,19,4,"type"],[30,10,19,8],[30,12,19,10,"TYPE_ROUTE"],[30,22,19,20],[31,6,20,4,"key"],[31,9,20,7],[31,11,20,9,"routes"],[31,17,20,15],[31,18,20,16,"index"],[31,23,20,21],[31,24,20,22],[31,25,20,23,"key"],[32,4,21,2],[32,5,21,3],[32,6,21,4],[33,4,22,2],[33,8,22,6,"initialRouteIndex"],[33,25,22,23],[34,4,23,2],[34,12,23,10,"backBehavior"],[34,24,23,22],[35,6,24,4],[35,11,24,9],[35,18,24,16],[36,8,25,6],[36,13,25,11],[36,17,25,15,"i"],[36,18,25,16],[36,21,25,19,"index"],[36,26,25,24],[36,28,25,26,"i"],[36,29,25,27],[36,32,25,30],[36,33,25,31],[36,35,25,33,"i"],[36,36,25,34],[36,38,25,36],[36,40,25,38],[37,10,26,8,"history"],[37,17,26,15],[37,18,26,16,"unshift"],[37,25,26,23],[37,26,26,24],[38,12,27,10,"type"],[38,16,27,14],[38,18,27,16,"TYPE_ROUTE"],[38,28,27,26],[39,12,28,10,"key"],[39,15,28,13],[39,17,28,15,"routes"],[39,23,28,21],[39,24,28,22,"i"],[39,25,28,23],[39,28,28,26],[39,29,28,27],[39,30,28,28],[39,31,28,29,"key"],[40,10,29,8],[40,11,29,9],[40,12,29,10],[41,8,30,6],[42,8,31,6],[43,6,32,4],[43,11,32,9],[43,23,32,21],[44,8,33,6],[44,12,33,10,"index"],[44,17,33,15],[44,22,33,20],[44,23,33,21],[44,25,33,23],[45,10,34,8,"history"],[45,17,34,15],[45,18,34,16,"unshift"],[45,25,34,23],[45,26,34,24],[46,12,35,10,"type"],[46,16,35,14],[46,18,35,16,"TYPE_ROUTE"],[46,28,35,26],[47,12,36,10,"key"],[47,15,36,13],[47,17,36,15,"routes"],[47,23,36,21],[47,24,36,22],[47,25,36,23],[47,26,36,24],[47,27,36,25,"key"],[48,10,37,8],[48,11,37,9],[48,12,37,10],[49,8,38,6],[50,8,39,6],[51,6,40,4],[51,11,40,9],[51,25,40,23],[52,8,41,6,"initialRouteIndex"],[52,25,41,23],[52,28,41,26,"routes"],[52,34,41,32],[52,35,41,33,"findIndex"],[52,44,41,42],[52,45,41,43,"route"],[52,50,41,48],[52,54,41,52,"route"],[52,59,41,57],[52,60,41,58,"name"],[52,64,41,62],[52,69,41,67,"initialRouteName"],[52,85,41,83],[52,86,41,84],[53,8,42,6,"initialRouteIndex"],[53,25,42,23],[53,28,42,26,"initialRouteIndex"],[53,45,42,43],[53,50,42,48],[53,51,42,49],[53,52,42,50],[53,55,42,53],[53,56,42,54],[53,59,42,57,"initialRouteIndex"],[53,76,42,74],[54,8,43,6],[54,12,43,10,"index"],[54,17,43,15],[54,22,43,20,"initialRouteIndex"],[54,39,43,37],[54,41,43,39],[55,10,44,8,"history"],[55,17,44,15],[55,18,44,16,"unshift"],[55,25,44,23],[55,26,44,24],[56,12,45,10,"type"],[56,16,45,14],[56,18,45,16,"TYPE_ROUTE"],[56,28,45,26],[57,12,46,10,"key"],[57,15,46,13],[57,17,46,15,"routes"],[57,23,46,21],[57,24,46,22,"initialRouteIndex"],[57,41,46,39],[57,42,46,40],[57,43,46,41,"key"],[58,10,47,8],[58,11,47,9],[58,12,47,10],[59,8,48,6],[60,8,49,6],[61,6,50,4],[61,11,50,9],[61,20,50,18],[62,6,51,4],[62,11,51,9],[62,24,51,22],[63,8,52,6],[64,8,53,6],[65,4,54,2],[66,4,55,2],[66,11,55,9,"history"],[66,18,55,16],[67,2,56,0],[67,3,56,1],[68,2,57,0],[68,8,57,6,"changeIndex"],[68,19,57,17],[68,22,57,20,"changeIndex"],[68,23,57,21,"state"],[68,28,57,26],[68,30,57,28,"index"],[68,35,57,33],[68,37,57,35,"backBehavior"],[68,49,57,47],[68,51,57,49,"initialRouteName"],[68,67,57,65],[68,72,57,70],[69,4,58,2],[69,8,58,6,"history"],[69,15,58,13],[69,18,58,16,"state"],[69,23,58,21],[69,24,58,22,"history"],[69,31,58,29],[70,4,59,2],[70,8,59,6,"backBehavior"],[70,20,59,18],[70,25,59,23],[70,34,59,32],[70,38,59,36,"backBehavior"],[70,50,59,48],[70,55,59,53],[70,68,59,66],[70,70,59,68],[71,6,60,4],[71,12,60,10,"currentRoute"],[71,24,60,22],[71,27,60,25,"state"],[71,32,60,30],[71,33,60,31,"routes"],[71,39,60,37],[71,40,60,38,"index"],[71,45,60,43],[71,46,60,44],[72,6,61,4],[72,10,61,8,"backBehavior"],[72,22,61,20],[72,27,61,25],[72,36,61,34],[72,38,61,36],[73,8,62,6],[74,8,63,6,"history"],[74,15,63,13],[74,18,63,16,"history"],[74,25,63,23],[74,26,63,24,"filter"],[74,32,63,30],[74,33,63,31,"it"],[74,35,63,33],[74,39,63,37,"it"],[74,41,63,39],[74,42,63,40,"type"],[74,46,63,44],[74,51,63,49],[74,58,63,56],[74,61,63,59,"it"],[74,63,63,61],[74,64,63,62,"key"],[74,67,63,65],[74,72,63,70,"currentRoute"],[74,84,63,82],[74,85,63,83,"key"],[74,88,63,86],[74,91,63,89],[74,96,63,94],[74,97,63,95],[75,6,64,4],[75,7,64,5],[75,13,64,11],[75,17,64,15,"backBehavior"],[75,29,64,27],[75,34,64,32],[75,47,64,45],[75,49,64,47],[76,8,65,6],[76,14,65,12,"lastHistoryRouteItemIndex"],[76,39,65,37],[76,42,65,40,"history"],[76,49,65,47],[76,50,65,48,"findLastIndex"],[76,63,65,61],[76,64,65,62,"item"],[76,68,65,66],[76,72,65,70,"item"],[76,76,65,74],[76,77,65,75,"type"],[76,81,65,79],[76,86,65,84],[76,93,65,91],[76,94,65,92],[77,8,66,6],[77,12,66,10,"currentRoute"],[77,24,66,22],[77,25,66,23,"key"],[77,28,66,26],[77,33,66,31,"history"],[77,40,66,38],[77,41,66,39,"lastHistoryRouteItemIndex"],[77,66,66,64],[77,67,66,65],[77,69,66,67,"key"],[77,72,66,70],[77,74,66,72],[78,10,67,8],[79,10,68,8],[80,10,69,8],[81,10,70,8,"history"],[81,17,70,15],[81,20,70,18],[81,21,70,19],[81,24,70,22,"history"],[81,31,70,29],[81,32,70,30,"slice"],[81,37,70,35],[81,38,70,36],[81,39,70,37],[81,41,70,39,"lastHistoryRouteItemIndex"],[81,66,70,64],[81,67,70,65],[81,69,70,67],[81,72,70,70,"history"],[81,79,70,77],[81,80,70,78,"slice"],[81,85,70,83],[81,86,70,84,"lastHistoryRouteItemIndex"],[81,111,70,109],[81,114,70,112],[81,115,70,113],[81,116,70,114],[81,117,70,115],[82,8,71,6],[83,6,72,4],[84,6,73,4,"history"],[84,13,73,11],[84,16,73,14,"history"],[84,23,73,21],[84,24,73,22,"concat"],[84,30,73,28],[84,31,73,29],[85,8,74,6,"type"],[85,12,74,10],[85,14,74,12,"TYPE_ROUTE"],[85,24,74,22],[86,8,75,6,"key"],[86,11,75,9],[86,13,75,11,"currentRoute"],[86,25,75,23],[86,26,75,24,"key"],[86,29,75,27],[87,8,76,6,"params"],[87,14,76,12],[87,16,76,14,"backBehavior"],[87,28,76,26],[87,33,76,31],[87,46,76,44],[87,49,76,47,"currentRoute"],[87,61,76,59],[87,62,76,60,"params"],[87,68,76,66],[87,71,76,69,"undefined"],[88,6,77,4],[88,7,77,5],[88,8,77,6],[89,4,78,2],[89,5,78,3],[89,11,78,9],[90,6,79,4,"history"],[90,13,79,11],[90,16,79,14,"getRouteHistory"],[90,31,79,29],[90,32,79,30,"state"],[90,37,79,35],[90,38,79,36,"routes"],[90,44,79,42],[90,46,79,44,"index"],[90,51,79,49],[90,53,79,51,"backBehavior"],[90,65,79,63],[90,67,79,65,"initialRouteName"],[90,83,79,81],[90,84,79,82],[91,4,80,2],[92,4,81,2],[92,11,81,2,"Object"],[92,17,81,2],[92,18,81,2,"assign"],[92,24,81,2],[92,29,82,7,"state"],[92,34,82,12],[93,6,83,4,"index"],[93,11,83,9],[94,6,84,4,"history"],[95,4,84,11],[96,2,86,0],[96,3,86,1],[97,2,87,7],[97,11,87,16,"TabRouter"],[97,20,87,25,"TabRouter"],[97,21,87,26],[98,4,88,2,"initialRouteName"],[98,20,88,18],[99,4,89,2,"backBehavior"],[99,16,89,14],[99,19,89,17],[100,2,90,0],[100,3,90,1],[100,5,90,3],[101,4,91,2],[101,10,91,8,"router"],[101,16,91,14],[101,19,91,14,"Object"],[101,25,91,14],[101,26,91,14,"assign"],[101,32,91,14],[101,37,92,7,"BaseRouter"],[101,50,92,17],[101,51,92,17,"BaseRouter"],[101,61,92,17],[102,6,93,4,"type"],[102,10,93,8],[102,12,93,10],[102,17,93,15],[103,6,94,4,"getInitialState"],[103,21,94,19,"getInitialState"],[103,22,94,20],[104,8,95,6,"routeNames"],[104,18,95,16],[105,8,96,6,"routeParamList"],[106,6,97,4],[106,7,97,5],[106,9,97,7],[107,8,98,6],[107,14,98,12,"index"],[107,19,98,17],[107,22,98,20,"initialRouteName"],[107,38,98,36],[107,43,98,41,"undefined"],[107,52,98,50],[107,56,98,54,"routeNames"],[107,66,98,64],[107,67,98,65,"includes"],[107,75,98,73],[107,76,98,74,"initialRouteName"],[107,92,98,90],[107,93,98,91],[107,96,98,94,"routeNames"],[107,106,98,104],[107,107,98,105,"indexOf"],[107,114,98,112],[107,115,98,113,"initialRouteName"],[107,131,98,129],[107,132,98,130],[107,135,98,133],[107,136,98,134],[108,8,99,6],[108,14,99,12,"routes"],[108,20,99,18],[108,23,99,21,"routeNames"],[108,33,99,31],[108,34,99,32,"map"],[108,37,99,35],[108,38,99,36,"name"],[108,42,99,40],[108,47,99,45],[109,10,100,8,"name"],[109,14,100,12],[110,10,101,8,"key"],[110,13,101,11],[110,15,101,13],[110,18,101,16,"name"],[110,22,101,20],[110,26,101,24],[110,30,101,24,"nanoid"],[110,46,101,30],[110,47,101,30,"nanoid"],[110,53,101,30],[110,55,101,31],[110,56,101,32],[110,58,101,34],[111,10,102,8,"params"],[111,16,102,14],[111,18,102,16,"routeParamList"],[111,32,102,30],[111,33,102,31,"name"],[111,37,102,35],[112,8,103,6],[112,9,103,7],[112,10,103,8],[112,11,103,9],[113,8,104,6],[113,14,104,12,"history"],[113,21,104,19],[113,24,104,22,"getRouteHistory"],[113,39,104,37],[113,40,104,38,"routes"],[113,46,104,44],[113,48,104,46,"index"],[113,53,104,51],[113,55,104,53,"backBehavior"],[113,67,104,65],[113,69,104,67,"initialRouteName"],[113,85,104,83],[113,86,104,84],[114,8,105,6],[114,15,105,13],[115,10,106,8,"stale"],[115,15,106,13],[115,17,106,15],[115,22,106,20],[116,10,107,8,"type"],[116,14,107,12],[116,16,107,14],[116,21,107,19],[117,10,108,8,"key"],[117,13,108,11],[117,15,108,13],[117,22,108,20],[117,26,108,20,"nanoid"],[117,42,108,26],[117,43,108,26,"nanoid"],[117,49,108,26],[117,51,108,27],[117,52,108,28],[117,54,108,30],[118,10,109,8,"index"],[118,15,109,13],[119,10,110,8,"routeNames"],[119,20,110,18],[120,10,111,8,"history"],[120,17,111,15],[121,10,112,8,"routes"],[121,16,112,14],[122,10,113,8,"preloadedRouteKeys"],[122,28,113,26],[122,30,113,28],[123,8,114,6],[123,9,114,7],[124,6,115,4],[124,7,115,5],[125,6,116,4,"getRehydratedState"],[125,24,116,22,"getRehydratedState"],[125,25,116,23,"partialState"],[125,37,116,35],[125,39,116,37],[126,8,117,6,"routeNames"],[126,18,117,16],[127,8,118,6,"routeParamList"],[128,6,119,4],[128,7,119,5],[128,9,119,7],[129,8,120,6],[129,14,120,12,"state"],[129,19,120,17],[129,22,120,20,"partialState"],[129,34,120,32],[130,8,121,6],[130,12,121,10,"state"],[130,17,121,15],[130,18,121,16,"stale"],[130,23,121,21],[130,28,121,26],[130,33,121,31],[130,35,121,33],[131,10,122,8],[131,17,122,15,"state"],[131,22,122,20],[132,8,123,6],[133,8,124,6],[133,14,124,12,"routes"],[133,20,124,18],[133,23,124,21,"routeNames"],[133,33,124,31],[133,34,124,32,"map"],[133,37,124,35],[133,38,124,36,"name"],[133,42,124,40],[133,46,124,44],[134,10,125,8],[134,16,125,14,"route"],[134,21,125,19],[134,24,125,22,"state"],[134,29,125,27],[134,30,125,28,"routes"],[134,36,125,34],[134,37,125,35,"find"],[134,41,125,39],[134,42,125,40,"r"],[134,43,125,41],[134,47,125,45,"r"],[134,48,125,46],[134,49,125,47,"name"],[134,53,125,51],[134,58,125,56,"name"],[134,62,125,60],[134,63,125,61],[135,10,126,8],[135,17,126,8,"Object"],[135,23,126,8],[135,24,126,8,"assign"],[135,30,126,8],[135,35,127,13,"route"],[135,40,127,18],[136,12,128,10,"name"],[136,16,128,14],[137,12,129,10,"key"],[137,15,129,13],[137,17,129,15,"route"],[137,22,129,20],[137,26,129,24,"route"],[137,31,129,29],[137,32,129,30,"name"],[137,36,129,34],[137,41,129,39,"name"],[137,45,129,43],[137,49,129,47,"route"],[137,54,129,52],[137,55,129,53,"key"],[137,58,129,56],[137,61,129,59,"route"],[137,66,129,64],[137,67,129,65,"key"],[137,70,129,68],[137,73,129,71],[137,76,129,74,"name"],[137,80,129,78],[137,84,129,82],[137,88,129,82,"nanoid"],[137,104,129,88],[137,105,129,88,"nanoid"],[137,111,129,88],[137,113,129,89],[137,114,129,90],[137,116,129,92],[138,12,130,10,"params"],[138,18,130,16],[138,20,130,18,"routeParamList"],[138,34,130,32],[138,35,130,33,"name"],[138,39,130,37],[138,40,130,38],[138,45,130,43,"undefined"],[138,54,130,52],[138,57,130,52,"Object"],[138,63,130,52],[138,64,130,52,"assign"],[138,70,130,52],[138,75,131,15,"routeParamList"],[138,89,131,29],[138,90,131,30,"name"],[138,94,131,34],[138,95,131,35],[138,97,132,16,"route"],[138,102,132,21],[138,105,132,24,"route"],[138,110,132,29],[138,111,132,30,"params"],[138,117,132,36],[138,120,132,39,"undefined"],[138,129,132,48],[138,133,133,14,"route"],[138,138,133,19],[138,141,133,22,"route"],[138,146,133,27],[138,147,133,28,"params"],[138,153,133,34],[138,156,133,37,"undefined"],[139,10,133,46],[140,8,135,6],[140,9,135,7],[140,10,135,8],[141,8,136,6],[141,14,136,12,"index"],[141,19,136,17],[141,22,136,20,"Math"],[141,26,136,24],[141,27,136,25,"min"],[141,30,136,28],[141,31,136,29,"Math"],[141,35,136,33],[141,36,136,34,"max"],[141,39,136,37],[141,40,136,38,"routeNames"],[141,50,136,48],[141,51,136,49,"indexOf"],[141,58,136,56],[141,59,136,57,"state"],[141,64,136,62],[141,65,136,63,"routes"],[141,71,136,69],[141,72,136,70,"state"],[141,77,136,75],[141,79,136,77,"index"],[141,84,136,82],[141,88,136,86],[141,89,136,87],[141,90,136,88],[141,92,136,90,"name"],[141,96,136,94],[141,97,136,95],[141,99,136,97],[141,100,136,98],[141,101,136,99],[141,103,136,101,"routes"],[141,109,136,107],[141,110,136,108,"length"],[141,116,136,114],[141,119,136,117],[141,120,136,118],[141,121,136,119],[142,8,137,6],[142,14,137,12,"routeKeys"],[142,23,137,21],[142,26,137,24,"routes"],[142,32,137,30],[142,33,137,31,"map"],[142,36,137,34],[142,37,137,35,"route"],[142,42,137,40],[142,46,137,44,"route"],[142,51,137,49],[142,52,137,50,"key"],[142,55,137,53],[142,56,137,54],[143,8,138,6],[143,14,138,12,"history"],[143,21,138,19],[143,24,138,22,"state"],[143,29,138,27],[143,30,138,28,"history"],[143,37,138,35],[143,39,138,37,"filter"],[143,45,138,43],[143,46,138,44,"it"],[143,48,138,46],[143,52,138,50,"routeKeys"],[143,61,138,59],[143,62,138,60,"includes"],[143,70,138,68],[143,71,138,69,"it"],[143,73,138,71],[143,74,138,72,"key"],[143,77,138,75],[143,78,138,76],[143,79,138,77],[143,83,138,81],[143,85,138,83],[144,8,139,6],[144,15,139,13,"changeIndex"],[144,26,139,24],[144,27,139,25],[145,10,140,8,"stale"],[145,15,140,13],[145,17,140,15],[145,22,140,20],[146,10,141,8,"type"],[146,14,141,12],[146,16,141,14],[146,21,141,19],[147,10,142,8,"key"],[147,13,142,11],[147,15,142,13],[147,22,142,20],[147,26,142,20,"nanoid"],[147,42,142,26],[147,43,142,26,"nanoid"],[147,49,142,26],[147,51,142,27],[147,52,142,28],[147,54,142,30],[148,10,143,8,"index"],[148,15,143,13],[149,10,144,8,"routeNames"],[149,20,144,18],[150,10,145,8,"history"],[150,17,145,15],[151,10,146,8,"routes"],[151,16,146,14],[152,10,147,8,"preloadedRouteKeys"],[152,28,147,26],[152,30,147,28,"state"],[152,35,147,33],[152,36,147,34,"preloadedRouteKeys"],[152,54,147,52],[152,56,147,54,"filter"],[152,62,147,60],[152,63,147,61,"key"],[152,66,147,64],[152,70,147,68,"routeKeys"],[152,79,147,77],[152,80,147,78,"includes"],[152,88,147,86],[152,89,147,87,"key"],[152,92,147,90],[152,93,147,91],[152,94,147,92],[152,98,147,96],[153,8,148,6],[153,9,148,7],[153,11,148,9,"index"],[153,16,148,14],[153,18,148,16,"backBehavior"],[153,30,148,28],[153,32,148,30,"initialRouteName"],[153,48,148,46],[153,49,148,47],[154,6,149,4],[154,7,149,5],[155,6,150,4,"getStateForRouteNamesChange"],[155,33,150,31,"getStateForRouteNamesChange"],[155,34,150,32,"state"],[155,39,150,37],[155,41,150,39],[156,8,151,6,"routeNames"],[156,18,151,16],[157,8,152,6,"routeParamList"],[157,22,152,20],[158,8,153,6,"routeKeyChanges"],[159,6,154,4],[159,7,154,5],[159,9,154,7],[160,8,155,6],[160,14,155,12,"routes"],[160,20,155,18],[160,23,155,21,"routeNames"],[160,33,155,31],[160,34,155,32,"map"],[160,37,155,35],[160,38,155,36,"name"],[160,42,155,40],[160,46,155,44,"state"],[160,51,155,49],[160,52,155,50,"routes"],[160,58,155,56],[160,59,155,57,"find"],[160,63,155,61],[160,64,155,62,"r"],[160,65,155,63],[160,69,155,67,"r"],[160,70,155,68],[160,71,155,69,"name"],[160,75,155,73],[160,80,155,78,"name"],[160,84,155,82],[160,88,155,86],[160,89,155,87,"routeKeyChanges"],[160,104,155,102],[160,105,155,103,"includes"],[160,113,155,111],[160,114,155,112,"r"],[160,115,155,113],[160,116,155,114,"name"],[160,120,155,118],[160,121,155,119],[160,122,155,120],[160,126,155,124],[161,10,156,8,"name"],[161,14,156,12],[162,10,157,8,"key"],[162,13,157,11],[162,15,157,13],[162,18,157,16,"name"],[162,22,157,20],[162,26,157,24],[162,30,157,24,"nanoid"],[162,46,157,30],[162,47,157,30,"nanoid"],[162,53,157,30],[162,55,157,31],[162,56,157,32],[162,58,157,34],[163,10,158,8,"params"],[163,16,158,14],[163,18,158,16,"routeParamList"],[163,32,158,30],[163,33,158,31,"name"],[163,37,158,35],[164,8,159,6],[164,9,159,7],[164,10,159,8],[165,8,160,6],[165,14,160,12,"index"],[165,19,160,17],[165,22,160,20,"Math"],[165,26,160,24],[165,27,160,25,"max"],[165,30,160,28],[165,31,160,29],[165,32,160,30],[165,34,160,32,"routeNames"],[165,44,160,42],[165,45,160,43,"indexOf"],[165,52,160,50],[165,53,160,51,"state"],[165,58,160,56],[165,59,160,57,"routes"],[165,65,160,63],[165,66,160,64,"state"],[165,71,160,69],[165,72,160,70,"index"],[165,77,160,75],[165,78,160,76],[165,79,160,77,"name"],[165,83,160,81],[165,84,160,82],[165,85,160,83],[166,8,161,6],[166,12,161,10,"history"],[166,19,161,17],[166,22,161,20,"state"],[166,27,161,25],[166,28,161,26,"history"],[166,35,161,33],[166,36,161,34,"filter"],[166,42,161,40],[167,8,162,6],[168,8,163,6,"it"],[168,10,163,8],[168,14,163,12,"it"],[168,16,163,14],[168,17,163,15,"type"],[168,21,163,19],[168,26,163,24],[168,33,163,31],[168,37,163,35,"routes"],[168,43,163,41],[168,44,163,42,"find"],[168,48,163,46],[168,49,163,47,"r"],[168,50,163,48],[168,54,163,52,"r"],[168,55,163,53],[168,56,163,54,"key"],[168,59,163,57],[168,64,163,62,"it"],[168,66,163,64],[168,67,163,65,"key"],[168,70,163,68],[168,71,163,69],[168,72,163,70],[169,8,164,6],[169,12,164,10],[169,13,164,11,"history"],[169,20,164,18],[169,21,164,19,"length"],[169,27,164,25],[169,29,164,27],[170,10,165,8,"history"],[170,17,165,15],[170,20,165,18,"getRouteHistory"],[170,35,165,33],[170,36,165,34,"routes"],[170,42,165,40],[170,44,165,42,"index"],[170,49,165,47],[170,51,165,49,"backBehavior"],[170,63,165,61],[170,65,165,63,"initialRouteName"],[170,81,165,79],[170,82,165,80],[171,8,166,6],[172,8,167,6],[172,15,167,6,"Object"],[172,21,167,6],[172,22,167,6,"assign"],[172,28,167,6],[172,33,168,11,"state"],[172,38,168,16],[173,10,169,8,"history"],[173,17,169,15],[174,10,170,8,"routeNames"],[174,20,170,18],[175,10,171,8,"routes"],[175,16,171,14],[176,10,172,8,"index"],[177,8,172,13],[178,6,174,4],[178,7,174,5],[179,6,175,4,"getStateForRouteFocus"],[179,27,175,25,"getStateForRouteFocus"],[179,28,175,26,"state"],[179,33,175,31],[179,35,175,33,"key"],[179,38,175,36],[179,40,175,38],[180,8,176,6],[180,14,176,12,"index"],[180,19,176,17],[180,22,176,20,"state"],[180,27,176,25],[180,28,176,26,"routes"],[180,34,176,32],[180,35,176,33,"findIndex"],[180,44,176,42],[180,45,176,43,"r"],[180,46,176,44],[180,50,176,48,"r"],[180,51,176,49],[180,52,176,50,"key"],[180,55,176,53],[180,60,176,58,"key"],[180,63,176,61],[180,64,176,62],[181,8,177,6],[181,12,177,10,"index"],[181,17,177,15],[181,22,177,20],[181,23,177,21],[181,24,177,22],[181,28,177,26,"index"],[181,33,177,31],[181,38,177,36,"state"],[181,43,177,41],[181,44,177,42,"index"],[181,49,177,47],[181,51,177,49],[182,10,178,8],[182,17,178,15,"state"],[182,22,178,20],[183,8,179,6],[184,8,180,6],[184,15,180,13,"changeIndex"],[184,26,180,24],[184,27,180,25,"state"],[184,32,180,30],[184,34,180,32,"index"],[184,39,180,37],[184,41,180,39,"backBehavior"],[184,53,180,51],[184,55,180,53,"initialRouteName"],[184,71,180,69],[184,72,180,70],[185,6,181,4],[185,7,181,5],[186,6,182,4,"getStateForAction"],[186,23,182,21,"getStateForAction"],[186,24,182,22,"state"],[186,29,182,27],[186,31,182,29,"action"],[186,37,182,35],[186,39,182,37],[187,8,183,6,"routeParamList"],[187,22,183,20],[188,8,184,6,"routeGetIdList"],[189,6,185,4],[189,7,185,5],[189,9,185,7],[190,8,186,6],[190,16,186,14,"action"],[190,22,186,20],[190,23,186,21,"type"],[190,27,186,25],[191,10,187,8],[191,15,187,13],[191,24,187,22],[192,10,188,8],[192,15,188,13],[192,25,188,23],[193,10,189,8],[193,15,189,13],[193,36,189,34],[194,12,190,10],[195,14,191,12],[195,20,191,18,"index"],[195,25,191,23],[195,28,191,26,"state"],[195,33,191,31],[195,34,191,32,"routes"],[195,40,191,38],[195,41,191,39,"findIndex"],[195,50,191,48],[195,51,191,49,"route"],[195,56,191,54],[195,60,191,58,"route"],[195,65,191,63],[195,66,191,64,"name"],[195,70,191,68],[195,75,191,73,"action"],[195,81,191,79],[195,82,191,80,"payload"],[195,89,191,87],[195,90,191,88,"name"],[195,94,191,92],[195,95,191,93],[196,14,192,12],[196,18,192,16,"index"],[196,23,192,21],[196,28,192,26],[196,29,192,27],[196,30,192,28],[196,32,192,30],[197,16,193,14],[197,23,193,21],[197,27,193,25],[198,14,194,12],[199,14,195,12],[199,20,195,18,"updatedState"],[199,32,195,30],[199,35,195,33,"changeIndex"],[199,46,195,44],[199,47,195,44,"Object"],[199,53,195,44],[199,54,195,44,"assign"],[199,60,195,44],[199,65,196,17,"state"],[199,70,196,22],[200,16,197,14,"routes"],[200,22,197,20],[200,24,197,22,"state"],[200,29,197,27],[200,30,197,28,"routes"],[200,36,197,34],[200,37,197,35,"map"],[200,40,197,38],[200,41,197,39,"route"],[200,46,197,44],[200,50,197,48],[201,18,198,16],[201,22,198,20,"route"],[201,27,198,25],[201,28,198,26,"name"],[201,32,198,30],[201,37,198,35,"action"],[201,43,198,41],[201,44,198,42,"payload"],[201,51,198,49],[201,52,198,50,"name"],[201,56,198,54],[201,58,198,56],[202,20,199,18],[202,27,199,25,"route"],[202,32,199,30],[203,18,200,16],[204,18,201,16],[204,24,201,22,"getId"],[204,29,201,27],[204,32,201,30,"routeGetIdList"],[204,46,201,44],[204,47,201,45,"route"],[204,52,201,50],[204,53,201,51,"name"],[204,57,201,55],[204,58,201,56],[205,18,202,16],[205,24,202,22,"currentId"],[205,33,202,31],[205,36,202,34,"getId"],[205,41,202,39],[205,44,202,42],[206,20,203,18,"params"],[206,26,203,24],[206,28,203,26,"route"],[206,33,203,31],[206,34,203,32,"params"],[207,18,204,16],[207,19,204,17],[207,20,204,18],[208,18,205,16],[208,24,205,22,"nextId"],[208,30,205,28],[208,33,205,31,"getId"],[208,38,205,36],[208,41,205,39],[209,20,206,18,"params"],[209,26,206,24],[209,28,206,26,"action"],[209,34,206,32],[209,35,206,33,"payload"],[209,42,206,40],[209,43,206,41,"params"],[210,18,207,16],[210,19,207,17],[210,20,207,18],[211,18,208,16],[211,24,208,22,"key"],[211,27,208,25],[211,30,208,28,"currentId"],[211,39,208,37],[211,44,208,42,"nextId"],[211,50,208,48],[211,53,208,51,"route"],[211,58,208,56],[211,59,208,57,"key"],[211,62,208,60],[211,65,208,63],[211,68,208,66,"route"],[211,73,208,71],[211,74,208,72,"name"],[211,78,208,76],[211,82,208,80],[211,86,208,80,"nanoid"],[211,102,208,86],[211,103,208,86,"nanoid"],[211,109,208,86],[211,111,208,87],[211,112,208,88],[211,114,208,90],[212,18,209,16],[212,22,209,20,"params"],[212,28,209,26],[213,18,210,16],[213,22,210,20],[213,23,210,21,"action"],[213,29,210,27],[213,30,210,28,"type"],[213,34,210,32],[213,39,210,37],[213,49,210,47],[213,53,210,51,"action"],[213,59,210,57],[213,60,210,58,"type"],[213,64,210,62],[213,69,210,67],[213,90,210,88],[213,95,210,93,"action"],[213,101,210,99],[213,102,210,100,"payload"],[213,109,210,107],[213,110,210,108,"merge"],[213,115,210,113],[213,119,210,117,"currentId"],[213,128,210,126],[213,133,210,131,"nextId"],[213,139,210,137],[213,141,210,139],[214,20,211,18,"params"],[214,26,211,24],[214,29,211,27,"action"],[214,35,211,33],[214,36,211,34,"payload"],[214,43,211,41],[214,44,211,42,"params"],[214,50,211,48],[214,55,211,53,"undefined"],[214,64,211,62],[214,68,211,66,"routeParamList"],[214,82,211,80],[214,83,211,81,"route"],[214,88,211,86],[214,89,211,87,"name"],[214,93,211,91],[214,94,211,92],[214,99,211,97,"undefined"],[214,108,211,106],[214,111,211,106,"Object"],[214,117,211,106],[214,118,211,106,"assign"],[214,124,211,106],[214,129,212,23,"routeParamList"],[214,143,212,37],[214,144,212,38,"route"],[214,149,212,43],[214,150,212,44,"name"],[214,154,212,48],[214,155,212,49],[214,157,213,23,"route"],[214,162,213,28],[214,163,213,29,"params"],[214,169,213,35],[214,171,214,23,"action"],[214,177,214,29],[214,178,214,30,"payload"],[214,185,214,37],[214,186,214,38,"params"],[214,192,214,44],[214,196,215,22,"route"],[214,201,215,27],[214,202,215,28,"params"],[214,208,215,34],[215,18,216,16],[215,19,216,17],[215,25,216,23],[216,20,217,18,"params"],[216,26,217,24],[216,29,217,27,"routeParamList"],[216,43,217,41],[216,44,217,42,"route"],[216,49,217,47],[216,50,217,48,"name"],[216,54,217,52],[216,55,217,53],[216,60,217,58,"undefined"],[216,69,217,67],[216,72,217,67,"Object"],[216,78,217,67],[216,79,217,67,"assign"],[216,85,217,67],[216,90,218,23,"routeParamList"],[216,104,218,37],[216,105,218,38,"route"],[216,110,218,43],[216,111,218,44,"name"],[216,115,218,48],[216,116,218,49],[216,118,219,23,"action"],[216,124,219,29],[216,125,219,30,"payload"],[216,132,219,37],[216,133,219,38,"params"],[216,139,219,44],[216,143,220,22,"action"],[216,149,220,28],[216,150,220,29,"payload"],[216,157,220,36],[216,158,220,37,"params"],[216,164,220,43],[217,18,221,16],[218,18,222,16],[218,24,222,22,"path"],[218,28,222,26],[218,31,222,29,"action"],[218,37,222,35],[218,38,222,36,"type"],[218,42,222,40],[218,47,222,45],[218,57,222,55],[218,61,222,59,"action"],[218,67,222,65],[218,68,222,66,"payload"],[218,75,222,73],[218,76,222,74,"path"],[218,80,222,78],[218,84,222,82],[218,88,222,86],[218,91,222,89,"action"],[218,97,222,95],[218,98,222,96,"payload"],[218,105,222,103],[218,106,222,104,"path"],[218,110,222,108],[218,113,222,111,"route"],[218,118,222,116],[218,119,222,117,"path"],[218,123,222,121],[219,18,223,16],[219,25,223,23,"params"],[219,31,223,29],[219,36,223,34,"route"],[219,41,223,39],[219,42,223,40,"params"],[219,48,223,46],[219,52,223,50,"path"],[219,56,223,54],[219,61,223,59,"route"],[219,66,223,64],[219,67,223,65,"path"],[219,71,223,69],[219,74,223,69,"Object"],[219,80,223,69],[219,81,223,69,"assign"],[219,87,223,69],[219,92,224,21,"route"],[219,97,224,26],[220,20,225,18,"key"],[220,23,225,21],[221,20,226,18,"path"],[221,24,226,22],[222,20,227,18,"params"],[223,18,227,24],[223,23,228,20,"route"],[223,28,228,25],[224,16,229,14],[224,17,229,15],[225,14,229,16],[225,18,230,15,"index"],[225,23,230,20],[225,25,230,22,"backBehavior"],[225,37,230,34],[225,39,230,36,"initialRouteName"],[225,55,230,52],[225,56,230,53],[226,14,231,12],[226,21,231,12,"Object"],[226,27,231,12],[226,28,231,12,"assign"],[226,34,231,12],[226,39,232,17,"updatedState"],[226,51,232,29],[227,16,233,14,"preloadedRouteKeys"],[227,34,233,32],[227,36,233,34,"updatedState"],[227,48,233,46],[227,49,233,47,"preloadedRouteKeys"],[227,67,233,65],[227,68,233,66,"filter"],[227,74,233,72],[227,75,233,73,"key"],[227,78,233,76],[227,82,233,80,"key"],[227,85,233,83],[227,90,233,88,"state"],[227,95,233,93],[227,96,233,94,"routes"],[227,102,233,100],[227,103,233,101,"updatedState"],[227,115,233,113],[227,116,233,114,"index"],[227,121,233,119],[227,122,233,120],[227,123,233,121,"key"],[227,126,233,124],[228,14,233,125],[229,12,235,10],[230,10,236,8],[230,15,236,13],[230,27,236,25],[231,10,237,8],[231,15,237,13],[231,31,237,29],[232,12,238,10],[233,14,239,12],[233,20,239,18,"nextState"],[233,29,239,27],[233,32,239,30,"BaseRouter"],[233,45,239,40],[233,46,239,40,"BaseRouter"],[233,56,239,40],[233,57,239,41,"getStateForAction"],[233,74,239,58],[233,75,239,59,"state"],[233,80,239,64],[233,82,239,66,"action"],[233,88,239,72],[233,89,239,73],[234,14,240,12],[234,18,240,16,"nextState"],[234,27,240,25],[234,32,240,30],[234,36,240,34],[234,38,240,36],[235,16,241,14],[235,22,241,20,"index"],[235,27,241,25],[235,30,241,28,"nextState"],[235,39,241,37],[235,40,241,38,"index"],[235,45,241,43],[236,16,242,14],[236,20,242,18,"index"],[236,25,242,23],[236,29,242,27],[236,33,242,31],[236,35,242,33],[237,18,243,16],[237,24,243,22,"focusedRoute"],[237,36,243,34],[237,39,243,37,"nextState"],[237,48,243,46],[237,49,243,47,"routes"],[237,55,243,53],[237,56,243,54,"index"],[237,61,243,59],[237,62,243,60],[238,18,244,16],[238,24,244,22,"historyItemIndex"],[238,40,244,38],[238,43,244,41,"state"],[238,48,244,46],[238,49,244,47,"history"],[238,56,244,54],[238,57,244,55,"findLastIndex"],[238,70,244,68],[238,71,244,69,"item"],[238,75,244,73],[238,79,244,77,"item"],[238,83,244,81],[238,84,244,82,"key"],[238,87,244,85],[238,92,244,90,"focusedRoute"],[238,104,244,102],[238,105,244,103,"key"],[238,108,244,106],[238,109,244,107],[239,18,245,16],[239,22,245,20,"updatedHistory"],[239,36,245,34],[239,39,245,37,"state"],[239,44,245,42],[239,45,245,43,"history"],[239,52,245,50],[240,18,246,16],[240,22,246,20,"historyItemIndex"],[240,38,246,36],[240,43,246,41],[240,44,246,42],[240,45,246,43],[240,47,246,45],[241,20,247,18,"updatedHistory"],[241,34,247,32],[241,37,247,35],[241,38,247,36],[241,41,247,39,"state"],[241,46,247,44],[241,47,247,45,"history"],[241,54,247,52],[241,55,247,53],[242,20,248,18,"updatedHistory"],[242,34,248,32],[242,35,248,33,"historyItemIndex"],[242,51,248,49],[242,52,248,50],[242,55,248,50,"Object"],[242,61,248,50],[242,62,248,50,"assign"],[242,68,248,50],[242,73,249,23,"updatedHistory"],[242,87,249,37],[242,88,249,38,"historyItemIndex"],[242,104,249,54],[242,105,249,55],[243,22,250,20,"params"],[243,28,250,26],[243,30,250,28,"focusedRoute"],[243,42,250,40],[243,43,250,41,"params"],[244,20,250,47],[244,22,251,19],[245,18,252,16],[246,18,253,16],[246,25,253,16,"Object"],[246,31,253,16],[246,32,253,16,"assign"],[246,38,253,16],[246,43,254,21,"nextState"],[246,52,254,30],[247,20,255,18,"history"],[247,27,255,25],[247,29,255,27,"updatedHistory"],[248,18,255,41],[249,16,257,14],[250,14,258,12],[251,14,259,12],[251,21,259,19,"nextState"],[251,30,259,28],[252,12,260,10],[253,10,261,8],[253,15,261,13],[253,24,261,22],[254,12,262,10],[255,14,263,12],[255,18,263,16,"state"],[255,23,263,21],[255,24,263,22,"history"],[255,31,263,29],[255,32,263,30,"length"],[255,38,263,36],[255,43,263,41],[255,44,263,42],[255,46,263,44],[256,16,264,14],[256,23,264,21],[256,27,264,25],[257,14,265,12],[258,14,266,12],[258,20,266,18,"previousHistoryItem"],[258,39,266,37],[258,42,266,40,"state"],[258,47,266,45],[258,48,266,46,"history"],[258,55,266,53],[258,56,266,54,"state"],[258,61,266,59],[258,62,266,60,"history"],[258,69,266,67],[258,70,266,68,"length"],[258,76,266,74],[258,79,266,77],[258,80,266,78],[258,81,266,79],[259,14,267,12],[259,20,267,18,"previousKey"],[259,31,267,29],[259,34,267,32,"previousHistoryItem"],[259,53,267,51],[259,55,267,53,"key"],[259,58,267,56],[260,14,268,12],[260,20,268,18,"index"],[260,25,268,23],[260,28,268,26,"state"],[260,33,268,31],[260,34,268,32,"routes"],[260,40,268,38],[260,41,268,39,"findLastIndex"],[260,54,268,52],[260,55,268,53,"route"],[260,60,268,58],[260,64,268,62,"route"],[260,69,268,67],[260,70,268,68,"key"],[260,73,268,71],[260,78,268,76,"previousKey"],[260,89,268,87],[260,90,268,88],[261,14,269,12],[261,18,269,16,"index"],[261,23,269,21],[261,28,269,26],[261,29,269,27],[261,30,269,28],[261,32,269,30],[262,16,270,14],[262,23,270,21],[262,27,270,25],[263,14,271,12],[264,14,272,12],[264,18,272,16,"routes"],[264,24,272,22],[264,27,272,25,"state"],[264,32,272,30],[264,33,272,31,"routes"],[264,39,272,37],[265,14,273,12],[265,18,273,16,"backBehavior"],[265,30,273,28],[265,35,273,33],[265,48,273,46],[265,52,273,50,"routes"],[265,58,273,56],[265,59,273,57,"index"],[265,64,273,62],[265,65,273,63],[265,66,273,64,"params"],[265,72,273,70],[265,77,273,75,"previousHistoryItem"],[265,96,273,94],[265,97,273,95,"params"],[265,103,273,101],[265,105,273,103],[266,16,274,14,"routes"],[266,22,274,20],[266,25,274,23],[266,26,274,24],[266,29,274,27,"state"],[266,34,274,32],[266,35,274,33,"routes"],[266,41,274,39],[266,42,274,40],[267,16,275,14,"routes"],[267,22,275,20],[267,23,275,21,"index"],[267,28,275,26],[267,29,275,27],[267,32,275,27,"Object"],[267,38,275,27],[267,39,275,27,"assign"],[267,45,275,27],[267,50,276,19,"routes"],[267,56,276,25],[267,57,276,26,"index"],[267,62,276,31],[267,63,276,32],[268,18,277,16,"params"],[268,24,277,22],[268,26,277,24,"previousHistoryItem"],[268,45,277,43],[268,46,277,44,"params"],[269,16,277,50],[269,18,278,15],[270,14,279,12],[271,14,280,12],[271,21,280,12,"Object"],[271,27,280,12],[271,28,280,12,"assign"],[271,34,280,12],[271,39,281,17,"state"],[271,44,281,22],[272,16,282,14,"routes"],[272,22,282,20],[273,16,283,14,"preloadedRouteKeys"],[273,34,283,32],[273,36,283,34,"state"],[273,41,283,39],[273,42,283,40,"preloadedRouteKeys"],[273,60,283,58],[273,61,283,59,"filter"],[273,67,283,65],[273,68,283,66,"key"],[273,71,283,69],[273,75,283,73,"key"],[273,78,283,76],[273,83,283,81,"state"],[273,88,283,86],[273,89,283,87,"routes"],[273,95,283,93],[273,96,283,94,"index"],[273,101,283,99],[273,102,283,100],[273,103,283,101,"key"],[273,106,283,104],[273,107,283,105],[274,16,284,14,"history"],[274,23,284,21],[274,25,284,23,"state"],[274,30,284,28],[274,31,284,29,"history"],[274,38,284,36],[274,39,284,37,"slice"],[274,44,284,42],[274,45,284,43],[274,46,284,44],[274,48,284,46],[274,49,284,47],[274,50,284,48],[274,51,284,49],[275,16,285,14,"index"],[276,14,285,19],[277,12,287,10],[278,10,288,8],[278,15,288,13],[278,24,288,22],[279,12,289,10],[280,14,290,12],[280,20,290,18,"routeIndex"],[280,30,290,28],[280,33,290,31,"state"],[280,38,290,36],[280,39,290,37,"routes"],[280,45,290,43],[280,46,290,44,"findIndex"],[280,55,290,53],[280,56,290,54,"route"],[280,61,290,59],[280,65,290,63,"route"],[280,70,290,68],[280,71,290,69,"name"],[280,75,290,73],[280,80,290,78,"action"],[280,86,290,84],[280,87,290,85,"payload"],[280,94,290,92],[280,95,290,93,"name"],[280,99,290,97],[280,100,290,98],[281,14,291,12],[281,18,291,16,"routeIndex"],[281,28,291,26],[281,33,291,31],[281,34,291,32],[281,35,291,33],[281,37,291,35],[282,16,292,14],[282,23,292,21],[282,27,292,25],[283,14,293,12],[284,14,294,12],[284,20,294,18,"route"],[284,25,294,23],[284,28,294,26,"state"],[284,33,294,31],[284,34,294,32,"routes"],[284,40,294,38],[284,41,294,39,"routeIndex"],[284,51,294,49],[284,52,294,50],[285,14,295,12],[285,20,295,18,"getId"],[285,25,295,23],[285,28,295,26,"routeGetIdList"],[285,42,295,40],[285,43,295,41,"route"],[285,48,295,46],[285,49,295,47,"name"],[285,53,295,51],[285,54,295,52],[286,14,296,12],[286,20,296,18,"currentId"],[286,29,296,27],[286,32,296,30,"getId"],[286,37,296,35],[286,40,296,38],[287,16,297,14,"params"],[287,22,297,20],[287,24,297,22,"route"],[287,29,297,27],[287,30,297,28,"params"],[288,14,298,12],[288,15,298,13],[288,16,298,14],[289,14,299,12],[289,20,299,18,"nextId"],[289,26,299,24],[289,29,299,27,"getId"],[289,34,299,32],[289,37,299,35],[290,16,300,14,"params"],[290,22,300,20],[290,24,300,22,"action"],[290,30,300,28],[290,31,300,29,"payload"],[290,38,300,36],[290,39,300,37,"params"],[291,14,301,12],[291,15,301,13],[291,16,301,14],[292,14,302,12],[292,20,302,18,"key"],[292,23,302,21],[292,26,302,24,"currentId"],[292,35,302,33],[292,40,302,38,"nextId"],[292,46,302,44],[292,49,302,47,"route"],[292,54,302,52],[292,55,302,53,"key"],[292,58,302,56],[292,61,302,59],[292,64,302,62,"route"],[292,69,302,67],[292,70,302,68,"name"],[292,74,302,72],[292,78,302,76],[292,82,302,76,"nanoid"],[292,98,302,82],[292,99,302,82,"nanoid"],[292,105,302,82],[292,107,302,83],[292,108,302,84],[292,110,302,86],[293,14,303,12],[293,20,303,18,"params"],[293,26,303,24],[293,29,303,27,"action"],[293,35,303,33],[293,36,303,34,"payload"],[293,43,303,41],[293,44,303,42,"params"],[293,50,303,48],[293,55,303,53,"undefined"],[293,64,303,62],[293,68,303,66,"routeParamList"],[293,82,303,80],[293,83,303,81,"route"],[293,88,303,86],[293,89,303,87,"name"],[293,93,303,91],[293,94,303,92],[293,99,303,97,"undefined"],[293,108,303,106],[293,111,303,106,"Object"],[293,117,303,106],[293,118,303,106,"assign"],[293,124,303,106],[293,129,304,17,"routeParamList"],[293,143,304,31],[293,144,304,32,"route"],[293,149,304,37],[293,150,304,38,"name"],[293,154,304,42],[293,155,304,43],[293,157,305,17,"action"],[293,163,305,23],[293,164,305,24,"payload"],[293,171,305,31],[293,172,305,32,"params"],[293,178,305,38],[293,182,306,16,"undefined"],[293,191,306,25],[294,14,307,12],[294,20,307,18,"newRoute"],[294,28,307,26],[294,31,307,29,"params"],[294,37,307,35],[294,42,307,40,"route"],[294,47,307,45],[294,48,307,46,"params"],[294,54,307,52],[294,57,307,52,"Object"],[294,63,307,52],[294,64,307,52,"assign"],[294,70,307,52],[294,75,308,17,"route"],[294,80,308,22],[295,16,309,14,"key"],[295,19,309,17],[296,16,310,14,"params"],[297,14,310,20],[297,19,311,16,"route"],[297,24,311,21],[298,14,312,12],[298,21,312,12,"Object"],[298,27,312,12],[298,28,312,12,"assign"],[298,34,312,12],[298,39,313,17,"state"],[298,44,313,22],[299,16,314,14,"preloadedRouteKeys"],[299,34,314,32],[299,36,314,34,"state"],[299,41,314,39],[299,42,314,40,"preloadedRouteKeys"],[299,60,314,58],[299,61,314,59,"filter"],[299,67,314,65],[299,68,314,66,"key"],[299,71,314,69],[299,75,314,73,"key"],[299,78,314,76],[299,83,314,81,"route"],[299,88,314,86],[299,89,314,87,"key"],[299,92,314,90],[299,93,314,91],[299,94,314,92,"concat"],[299,100,314,98],[299,101,314,99,"newRoute"],[299,109,314,107],[299,110,314,108,"key"],[299,113,314,111],[299,114,314,112],[300,16,315,14,"routes"],[300,22,315,20],[300,24,315,22,"state"],[300,29,315,27],[300,30,315,28,"routes"],[300,36,315,34],[300,37,315,35,"map"],[300,40,315,38],[300,41,315,39],[300,42,315,40,"route"],[300,47,315,45],[300,49,315,47,"index"],[300,54,315,52],[300,59,315,57,"index"],[300,64,315,62],[300,69,315,67,"routeIndex"],[300,79,315,77],[300,82,315,80,"newRoute"],[300,90,315,88],[300,93,315,91,"route"],[300,98,315,96],[300,99,315,97],[301,16,316,14,"history"],[301,23,316,21],[301,25,316,23,"key"],[301,28,316,26],[301,33,316,31,"route"],[301,38,316,36],[301,39,316,37,"key"],[301,42,316,40],[301,45,316,43,"state"],[301,50,316,48],[301,51,316,49,"history"],[301,58,316,56],[301,61,316,59,"state"],[301,66,316,64],[301,67,316,65,"history"],[301,74,316,72],[301,75,316,73,"filter"],[301,81,316,79],[301,82,316,80,"record"],[301,88,316,86],[301,92,316,90,"record"],[301,98,316,96],[301,99,316,97,"key"],[301,102,316,100],[301,107,316,105,"route"],[301,112,316,110],[301,113,316,111,"key"],[301,116,316,114],[302,14,316,115],[303,12,318,10],[304,10,319,8],[305,12,320,10],[305,19,320,17,"BaseRouter"],[305,32,320,27],[305,33,320,27,"BaseRouter"],[305,43,320,27],[305,44,320,28,"getStateForAction"],[305,61,320,45],[305,62,320,46,"state"],[305,67,320,51],[305,69,320,53,"action"],[305,75,320,59],[305,76,320,60],[306,8,321,6],[307,6,322,4],[307,7,322,5],[308,6,323,4,"actionCreators"],[308,20,323,18],[308,22,323,20,"TabActions"],[309,4,323,30],[309,6,324,3],[310,4,325,2],[310,11,325,9,"router"],[310,17,325,15],[311,2,326,0],[312,0,326,1],[312,3]],"functionMap":{"names":["<global>","TabActions.jumpTo","getRouteHistory","routes.findIndex$argument_0","changeIndex","history.filter$argument_0","history.findLastIndex$argument_0","TabRouter","router.getInitialState","routeNames.map$argument_0","router.getRehydratedState","state.routes.find$argument_0","routes.map$argument_0","state.history.filter$argument_0","state.preloadedRouteKeys.filter$argument_0","router.getStateForRouteNamesChange","routes.find$argument_0","router.getStateForRouteFocus","state.routes.findIndex$argument_0","router.getStateForAction","state.routes.map$argument_0","updatedState.preloadedRouteKeys.filter$argument_0","state.history.findLastIndex$argument_0","state.routes.findLastIndex$argument_0"],"mappings":"AAA;ECM;GDQ;wBEE;2CCwB,wCD;CFe;oBIC;+BCM,+DD;8DEE,6BF;CJqB;OOC;ICO;oCCK;QDI;KDY;IGC;oCDQ;wCEC,oBF;OCU;mCEE,kBF;4CGC,gCH;6DIS,8BJ;KHE;IQC;oCNK,0BE,yDF;OMI;MFI,yCG,qBH,CE;KRW;IUC;2CCC,kBD;KVK;IYC;iDDS,2CC;uCCM;eDgC;yEEI,mDF;qEGW,qCH;qDIwB,kCJ;kELe,sCK;sDDO,2CC;kELwB,wBK;uCCC,yDD;gFNC,kCM;KZM;CPI"},"hasCjsExports":false},"type":"js/module"}]}